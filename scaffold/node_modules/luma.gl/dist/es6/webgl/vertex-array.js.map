{"version":3,"sources":["../../../src/webgl/vertex-array.js"],"names":["glKey","isWebGL2","Resource","assert","log","OES_vertex_array_object","GL_ELEMENT_ARRAY_BUFFER","GL_VERTEX_ATTRIB_ARRAY_ENABLED","GL_VERTEX_ATTRIB_ARRAY_SIZE","GL_VERTEX_ATTRIB_ARRAY_STRIDE","GL_VERTEX_ATTRIB_ARRAY_TYPE","GL_VERTEX_ATTRIB_ARRAY_NORMALIZED","GL_VERTEX_ATTRIB_ARRAY_POINTER","GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING","GL_VERTEX_ATTRIB_ARRAY_INTEGER","GL_VERTEX_ATTRIB_ARRAY_DIVISOR","PARAMETERS","ERR_ELEMENTS","VertexArray","isSupported","gl","getExtension","getDefaultArray","luma","defaultVertexArray","handle","getMaxAttributes","getParameter","MAX_VERTEX_ATTRIBS","MAX_ATTRIBUTES","constructor","opts","elements","buffers","locations","names","drawParameters","_bound","_filledLocations","Object","seal","initialize","setLocations","setBuffers","clear","setElements","filledLocations","setBuffer","location","buffer","target","layout","undefined","bind","ARRAY_BUFFER","size","type","normalized","stride","offset","integer","vertexAttribPointer","vertexAttribIPointer","_getBufferAndLayout","bufferData","assign","clearBindings","_getLocations","ext","bindVertexArray","setDivisor","instanced","enable","disable","bindBuffer","disableZero","disableVertexAttribArray","enableVertexAttribArray","divisor","vertexAttribDivisor","setGeneric","array","Float32Array","_setGenericFloatArray","Int32Array","_setGenericIntArray","Uint32Array","_setGenericUintArray","setGenericValues","length","vertexAttrib1fv","vertexAttrib2fv","vertexAttrib3fv","vertexAttrib4fv","vertexAttribI1iv","vertexAttribI2iv","vertexAttribI3iv","vertexAttribI4iv","vertexAttribI1uiv","vertexAttribI2uiv","vertexAttribI3uiv","vertexAttribI4uiv","v0","v1","v2","v3","arguments","vertexAttrib1f","vertexAttrib2f","vertexAttrib3f","vertexAttrib4f","funcOrHandle","value","_deduceDrawParameters","isInstanced","isIndexed","indexType","forEach","bufferName","Number","isFinite","_sortBuffersByLocation","Array","_attributeCount","fill","_warn","warn","_print","_createHandle","createVertexArray","_deleteHandle","deleteVertexArray","_getParameter","pname","result","getVertexAttribOffset","getVertexAttrib","_getData","map","_","parameter","_bind"],"mappings":"AAAA;AACA,SAAQA,KAAR,QAAoB,gBAApB;AACA,SAAQC,QAAR,QAAuB,WAAvB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,SAAQC,GAAR,QAAkB,UAAlB;AAEA;;AACA,MAAMC,0BAA0B,yBAAhC;AAEA,MAAMC,0BAA0B,MAAhC,C,CAEA;;AAEA,MAAMC,iCAAiC,MAAvC;AACA,MAAMC,8BAA8B,MAApC;AACA,MAAMC,gCAAgC,MAAtC;AACA,MAAMC,8BAA8B,MAApC;AACA,MAAMC,oCAAoC,MAA1C;AACA,MAAMC,iCAAiC,MAAvC;AACA,MAAMC,wCAAwC,MAA9C;AAEA,MAAMC,iCAAiC,MAAvC;AACA,MAAMC,iCAAiC,MAAvC;AAEA,MAAMC,aAAa,CACjBT,8BADiB,EAEjBC,2BAFiB,EAGjBC,6BAHiB,EAIjBC,2BAJiB,EAKjBC,iCALiB,EAMjBC,8BANiB,EAOjBC,qCAPiB,EASjBC,8BATiB,EAUjBC,8BAViB,CAAnB;AAaA,MAAME,eAAe,0CAArB;AAEA,eAAe,MAAMC,WAAN,SAA0BhB,QAA1B,CAAmC;AAEhD,SAAOiB,WAAP,CAAmBC,EAAnB,EAAuB;AACrB,WAAOnB,SAASmB,EAAT,KAAgBA,GAAGC,YAAH,CAAgBhB,uBAAhB,CAAvB;AACD;;AAED,SAAOiB,eAAP,CAAuBF,EAAvB,EAA2B;AACzBA,OAAGG,IAAH,GAAUH,GAAGG,IAAH,IAAW,EAArB;;AACA,QAAI,CAACH,GAAGG,IAAH,CAAQC,kBAAb,EAAiC;AAC/BJ,SAAGG,IAAH,CAAQC,kBAAR,GAA6B,IAAIN,WAAJ,CAAgBE,EAAhB,EAAoB;AAACK,gBAAQ;AAAT,OAApB,CAA7B;AACD;;AACD,WAAOL,GAAGG,IAAH,CAAQC,kBAAf;AACD;;AAED,SAAOE,gBAAP,CAAwBN,EAAxB,EAA4B;AAC1B,WAAOA,GAAGO,YAAH,CAAgBP,GAAGQ,kBAAnB,CAAP;AACD;;AAED,MAAIC,cAAJ,GAAqB;AACnB,WAAO,KAAKT,EAAL,CAAQO,YAAR,CAAqB,KAAKP,EAAL,CAAQQ,kBAA7B,CAAP;AACD,GApB+C,CAsBhD;;;AACAE,cAAYV,EAAZ,EAAgBW,OAAO,EAAvB,EAA2B;AACzB,UAAMX,EAAN,EAAUW,IAAV;AAEA,SAAKC,QAAL,GAAgB,IAAhB;AACA,SAAKC,OAAL,GAAe,EAAf,CAJyB,CAIN;;AACnB,SAAKC,SAAL,GAAiB,EAAjB;AACA,SAAKC,KAAL,GAAa,EAAb;AACA,SAAKC,cAAL,GAAsB,EAAtB;AAEA,SAAKC,MAAL,GAAc,KAAd;AACA,SAAKC,gBAAL,GAAwB,EAAxB;AACAC,WAAOC,IAAP,CAAY,IAAZ;AAEA,SAAKC,UAAL,CAAgBV,IAAhB;AACD;;AAEDU,aAAW;AACTR,cAAU,EADD;AAETD,eAAW,IAFF;AAGTE,gBAAY;AAHH,MAIP,EAJJ,EAIQ;AACN,SAAKQ,YAAL,CAAkBR,SAAlB;AACA,SAAKS,UAAL,CAAgBV,OAAhB,EAAyB;AAACW,aAAO;AAAR,KAAzB;AACA,SAAKC,WAAL,CAAiBb,QAAjB;AACD;;AAED,MAAIc,eAAJ,GAAsB;AACpB,WAAO,KAAKR,gBAAZ;AACD,GAnD+C,CAqDhD;;;AACAS,YAAU;AACRC,YADQ;AAERC,UAFQ;AAGRC,UAHQ;AAIRC;AAJQ,MAKN,EALJ,EAKQ;AAAA,UACC/B,EADD,GACO,IADP,CACCA,EADD,EAGN;;AACA8B,aAASA,WAAWE,SAAX,GAAuBF,MAAvB,GAAgCD,OAAOC,MAAhD;AACAC,aAASA,WAAWC,SAAX,GAAuBD,MAAvB,GAAgCF,OAAOE,MAAhD;AACAhD,WAAO+C,MAAP,EAAe,wBAAf;AACA/C,WAAOgD,MAAP,EAAe,0CAAf;AACA,SAAKb,gBAAL,CAAsBU,QAAtB,IAAkC,IAAlC;AAEA,SAAKK,IAAL,CAAU,MAAM;AACd;AACAJ,aAAOI,IAAP,CAAY;AAACH,gBAAQ9B,GAAGkC;AAAZ,OAAZ;AAFc,sBAImCH,MAJnC;AAAA,YAIPI,IAJO,WAIPA,IAJO;AAAA,YAIDC,IAJC,WAIDA,IAJC;AAAA,YAIKC,UAJL,WAIKA,UAJL;AAAA,YAIiBC,MAJjB,WAIiBA,MAJjB;AAAA,YAIyBC,MAJzB,WAIyBA,MAJzB,EAKd;;AACA,UAAI,CAACR,OAAOS,OAAZ,EAAqB;AACnBxC,WAAGyC,mBAAH,CAAuBb,QAAvB,EAAiCO,IAAjC,EAAuCC,IAAvC,EAA6CC,UAA7C,EAAyDC,MAAzD,EAAiEC,MAAjE;AACD,OAFD,MAEO;AACL;AACAxD,eAAOF,SAASmB,EAAT,CAAP;AACAA,WAAG0C,oBAAH,CAAwBd,QAAxB,EAAkCO,IAAlC,EAAwCC,IAAxC,EAA8CE,MAA9C,EAAsDC,MAAtD;AACD;AACF,KAbD;AAeD,GApF+C,CAsFhD;AACA;AACA;AACA;AACA;AACA;;;AAEAI,sBAAoBC,UAApB,EAAgC;AAC9B;AACA,QAAIf,MAAJ;AACA,QAAIE,MAAJ;;AACA,QAAIa,WAAWvC,MAAf,EAAuB;AACrBwB,eAASe,UAAT;AACAb,eAASa,WAAWb,MAApB;AACD,KAHD,MAGO;AACLF,eAASe,WAAWf,MAApB;AACAE,eAASZ,OAAO0B,MAAP,CAAc,EAAd,EAAkBhB,OAAOE,MAAzB,EAAiCa,WAAWb,MAAX,IAAqB,EAAtD,EAA0Da,UAA1D,CAAT;AACD;;AACD,WAAO;AAACf,YAAD;AAASE;AAAT,KAAP;AACD;;AAEDR,aAAWV,OAAX,EAAoB;AAACW,YAAQ;AAAT,MAAiB,EAArC,EAAyC;AACvC,QAAIA,KAAJ,EAAW;AACT,WAAKsB,aAAL;AACD;;AAHsC,0BAIT,KAAKC,aAAL,CAAmBlC,OAAnB,CAJS;AAAA,UAIhCC,SAJgC,iBAIhCA,SAJgC;AAAA,UAIrBF,QAJqB,iBAIrBA,QAJqB;;AAMvC,SAAKoC,GAAL,CAASC,eAAT,CAAyB,KAAK5C,MAA9B,EANuC,CAQvC;;AACA,SAAK,MAAMuB,QAAX,IAAuBd,SAAvB,EAAkC;AAChC,YAAM8B,aAAa9B,UAAUc,QAAV,CAAnB;;AACA,UAAIgB,UAAJ,EAAgB;AAAA,oCACW,KAAKD,mBAAL,CAAyBC,UAAzB,CADX;AAAA,cACPf,MADO,uBACPA,MADO;AAAA,cACCE,MADD,uBACCA,MADD;;AAEd,aAAKJ,SAAL,CAAe;AAACC,kBAAD;AAAWC,gBAAX;AAAmBE;AAAnB,SAAf;AACA,aAAKmB,UAAL,CAAgBtB,QAAhB,EAA0BG,OAAOoB,SAAP,GAAmB,CAAnB,GAAuB,CAAjD;AACA,aAAKC,MAAL,CAAYxB,QAAZ;AACD,OALD,MAKO;AACL;AACA,aAAKyB,OAAL,CAAazB,QAAb;AACD;AACF;;AACD,SAAKf,OAAL,GAAeA,OAAf;AAEA,SAAKmC,GAAL,CAASC,eAAT,CAAyB,IAAzB;;AAEA,QAAIrC,QAAJ,EAAc;AACZ,WAAKa,WAAL,CAAiBb,QAAjB;AACD;AACF,GAvI+C,CAyIhD;;;AACAU,eAAaR,SAAb,EAAwB;AACtB,SAAKA,SAAL,GAAiBA,SAAjB;AACA,SAAKC,KAAL,GAAa,EAAb;AACD,GA7I+C,CA+IhD;;;AACAU,cAAYb,QAAZ,EAAsB;AACpB7B,WAAO,CAAC6B,QAAD,IAAaA,SAASkB,MAAT,KAAoB5C,uBAAxC,EAAiEW,YAAjE;AAEA,SAAKmD,GAAL,CAASC,eAAT,CAAyB,KAAK5C,MAA9B;AACA,SAAKL,EAAL,CAAQsD,UAAR,CAAmBpE,uBAAnB,EAA4C0B,YAAYA,SAASP,MAAjE;AACA,SAAK2C,GAAL,CAASC,eAAT,CAAyB,IAAzB;AAEA,SAAKrC,QAAL,GAAgBA,QAAhB;AACA,WAAO,IAAP;AACD;;AAEDkC,gBAAc;AAACS,kBAAc;AAAf,MAAwB,EAAtC,EAA0C;AACxC,SAAKtB,IAAL,CAAU,MAAM;AACd,WAAK,MAAML,QAAX,IAAuB,KAAKV,gBAA5B,EAA8C;AAC5C,YAAI,KAAKA,gBAAL,CAAsBU,QAAtB,MAAoCA,WAAW,CAAX,IAAgB2B,WAApD,CAAJ,EAAsE;AACpE,eAAKvD,EAAL,CAAQwD,wBAAR,CAAiC5B,QAAjC;AACD;AACF;;AACD,WAAKV,gBAAL,GAAwB,EAAxB;AACD,KAPD;AAQD,GApK+C,CAsKhD;;;AACAkC,SAAOxB,QAAP,EAAiB;AACf,SAAKK,IAAL,CAAU,MAAM;AACd,WAAKjC,EAAL,CAAQyD,uBAAR,CAAgC7B,QAAhC;AACD,KAFD;AAGD,GA3K+C,CA6KhD;AACA;AACA;AACA;;;AACAyB,UAAQzB,QAAR,EAAkB2B,cAAc,KAAhC,EAAuC;AACrC,QAAI3B,WAAW,CAAX,IAAgB2B,WAApB,EAAiC;AAC/B,WAAKtB,IAAL,CAAU,MAAM;AACd,aAAKjC,EAAL,CAAQwD,wBAAR,CAAiC5B,QAAjC;AACD,OAFD;AAGD;AACF,GAvL+C,CAyLhD;;;AACAsB,aAAWtB,QAAX,EAAqB8B,OAArB,EAA8B;AAC5B,SAAKzB,IAAL,CAAU,MAAM;AACd,WAAKe,GAAL,CAASW,mBAAT,CAA6B/B,QAA7B,EAAuC8B,OAAvC;AACD,KAFD;AAGD,GA9L+C,CAgMhD;;;AACAE,aAAW;AAAChC,YAAD;AAAWiC;AAAX,GAAX,EAA8B;AAC5B,SAAK3C,gBAAL,CAAsBU,QAAtB,IAAkC,IAAlC;;AACA,YAAQiC,MAAMnD,WAAd;AACA,WAAKoD,YAAL;AACE,aAAKC,qBAAL,CAA2BnC,QAA3B,EAAqCiC,KAArC;;AACA;;AACF,WAAKG,UAAL;AACE,aAAKC,mBAAL,CAAyBrC,QAAzB,EAAmCiC,KAAnC;;AACA;;AACF,WAAKK,WAAL;AACE,aAAKC,oBAAL,CAA0BvC,QAA1B,EAAoCiC,KAApC;;AACA;;AACF;AACE,aAAKO,gBAAL,CAAsBxC,QAAtB,EAAgC,GAAGiC,KAAnC;AAXF;AAaD;;AAEDE,wBAAsBnC,QAAtB,EAAgCiC,KAAhC,EAAuC;AAAA,UAC9B7D,EAD8B,GACxB,IADwB,CAC9BA,EAD8B;;AAErC,YAAQ6D,MAAMQ,MAAd;AACA,WAAK,CAAL;AAAQrE,WAAGsE,eAAH,CAAmB1C,QAAnB,EAA6BiC,KAA7B;AAAqC;;AAC7C,WAAK,CAAL;AAAQ7D,WAAGuE,eAAH,CAAmB3C,QAAnB,EAA6BiC,KAA7B;AAAqC;;AAC7C,WAAK,CAAL;AAAQ7D,WAAGwE,eAAH,CAAmB5C,QAAnB,EAA6BiC,KAA7B;AAAqC;;AAC7C,WAAK,CAAL;AAAQ7D,WAAGyE,eAAH,CAAmB7C,QAAnB,EAA6BiC,KAA7B;AAAqC;;AAC7C;AAAS9E,eAAO,KAAP;AALT;AAOD;;AAEDkF,sBAAoBrC,QAApB,EAA8BiC,KAA9B,EAAqC;AAAA,UAC5B7D,EAD4B,GACtB,IADsB,CAC5BA,EAD4B;AAEnCjB,WAAOF,SAASmB,EAAT,CAAP;;AACA,YAAQ6D,MAAMQ,MAAd;AACA,WAAK,CAAL;AAAQrE,WAAG0E,gBAAH,CAAoB9C,QAApB,EAA8BiC,KAA9B;AAAsC;;AAC9C,WAAK,CAAL;AAAQ7D,WAAG2E,gBAAH,CAAoB/C,QAApB,EAA8BiC,KAA9B;AAAsC;;AAC9C,WAAK,CAAL;AAAQ7D,WAAG4E,gBAAH,CAAoBhD,QAApB,EAA8BiC,KAA9B;AAAsC;;AAC9C,WAAK,CAAL;AAAQ7D,WAAG6E,gBAAH,CAAoBjD,QAApB,EAA8BiC,KAA9B;AAAsC;;AAC9C;AAAS9E,eAAO,KAAP;AALT;AAOD;;AAEDoF,uBAAqBvC,QAArB,EAA+BiC,KAA/B,EAAsC;AAAA,UAC7B7D,EAD6B,GACvB,IADuB,CAC7BA,EAD6B;AAEpCjB,WAAOF,SAASmB,EAAT,CAAP;;AACA,YAAQ6D,MAAMQ,MAAd;AACA,WAAK,CAAL;AAAQrE,WAAG8E,iBAAH,CAAqBlD,QAArB,EAA+BiC,KAA/B;AAAuC;;AAC/C,WAAK,CAAL;AAAQ7D,WAAG+E,iBAAH,CAAqBnD,QAArB,EAA+BiC,KAA/B;AAAuC;;AAC/C,WAAK,CAAL;AAAQ7D,WAAGgF,iBAAH,CAAqBpD,QAArB,EAA+BiC,KAA/B;AAAuC;;AAC/C,WAAK,CAAL;AAAQ7D,WAAGiF,iBAAH,CAAqBrD,QAArB,EAA+BiC,KAA/B;AAAuC;;AAC/C;AAAS9E,eAAO,KAAP;AALT;AAOD,GAnP+C,CAqPhD;;;AACAqF,mBAAiBxC,QAAjB,EAA2BsD,EAA3B,EAA+BC,EAA/B,EAAmCC,EAAnC,EAAuCC,EAAvC,EAA2C;AAAA,UAClCrF,EADkC,GAC5B,IAD4B,CAClCA,EADkC;;AAEzC,YAAQsF,UAAUjB,MAAV,GAAmB,CAA3B;AACA,WAAK,CAAL;AAAQrE,WAAGuF,cAAH,CAAkB3D,QAAlB,EAA4BsD,EAA5B;AAAiC;;AACzC,WAAK,CAAL;AAAQlF,WAAGwF,cAAH,CAAkB5D,QAAlB,EAA4BsD,EAA5B,EAAgCC,EAAhC;AAAqC;;AAC7C,WAAK,CAAL;AAAQnF,WAAGyF,cAAH,CAAkB7D,QAAlB,EAA4BsD,EAA5B,EAAgCC,EAAhC,EAAoCC,EAApC;AAAyC;;AACjD,WAAK,CAAL;AAAQpF,WAAG0F,cAAH,CAAkB9D,QAAlB,EAA4BsD,EAA5B,EAAgCC,EAAhC,EAAoCC,EAApC,EAAwCC,EAAxC;AAA6C;;AACrD;AAAStG,eAAO,KAAP;AALT,KAFyC,CAUzC;AACA;AACA;AACA;;AACD;;AAEDkD,OAAK0D,eAAe,KAAKtF,MAAzB,EAAiC;AAC/B,QAAI,OAAOsF,YAAP,KAAwB,UAA5B,EAAwC;AACtC,WAAK1C,eAAL,CAAqB0C,YAArB;AACA,aAAO,IAAP;AACD;;AAED,QAAIC,KAAJ;;AAEA,QAAI,CAAC,KAAK3E,MAAV,EAAkB;AAChB,WAAK+B,GAAL,CAASC,eAAT,CAAyB,KAAK5C,MAA9B;AACA,WAAKY,MAAL,GAAc,IAAd;AAEA2E,cAAQD,cAAR;AAEA,WAAK3C,GAAL,CAASC,eAAT,CAAyB,IAAzB;AACA,WAAKhC,MAAL,GAAc,KAAd;AACD,KARD,MAQO;AACL2E,cAAQD,cAAR;AACD;;AAED,WAAOC,KAAP;AACD,GA3R+C,CA6RhD;AAEA;;;AACAC,0BAAwB;AACtB;AACA;AACA,QAAIC,cAAc,KAAlB;AACA,QAAIC,YAAY,KAAhB;AACA,QAAIC,YAAY,IAAhB,CALsB,CAOtB;;AACA,QAAI,KAAKpF,QAAT,EAAmB;AACjBmF,kBAAY,IAAZ;AACAC,kBAAY,KAAKpF,QAAL,CAAcmB,MAAd,CAAqBK,IAAjC;AACD,KAXqB,CAatB;;;AACA,SAAKvB,OAAL,CAAaoF,OAAb,CAAqBpE,UAAU;AAC7B,UAAIA,OAAOE,MAAP,CAAcoB,SAAd,GAA0B,CAA9B,EAAiC;AAC/B2C,sBAAc,IAAd;AACD;AACF,KAJD;AAMA,WAAO;AAACA,iBAAD;AAAcC,eAAd;AAAyBC;AAAzB,KAAP;AACD,GArT+C,CAsThD;;;AAEAjD,gBAAclC,OAAd,EAAuB;AACrB;AACA,QAAID,WAAW,IAAf;AACA,UAAME,YAAY,EAAlB;;AAEA,SAAK,MAAMoF,UAAX,IAAyBrF,OAAzB,EAAkC;AAChC,YAAMgB,SAAShB,QAAQqF,UAAR,CAAf,CADgC,CAGhC;;AACA,UAAIrE,UAAUA,OAAOC,MAAP,KAAkB5C,uBAAhC,EAAyD;AACvDH,eAAO,CAAC6B,QAAR,EAAkB,mCAAlB,EADuD,CAEvD;;AACAA,mBAAWiB,MAAX;AACD;;AAED,UAAID,WAAWuE,OAAOD,UAAP,CAAf,CAVgC,CAWhC;AACA;;AACA,UAAI,CAACC,OAAOC,QAAP,CAAgBxE,QAAhB,CAAL,EAAgC;AAC9BA,mBAAW,KAAKd,SAAL,CAAeoF,UAAf,CAAX;AACD;;AACDnH,aAAOoH,OAAOC,QAAP,CAAgBxE,QAAhB,CAAP;AAEA7C,aAAO,CAAC+B,UAAUc,QAAV,CAAR,EAA8B,yCAAwCA,QAAS,EAA/E;AACAd,gBAAUc,QAAV,IAAsBC,MAAtB;AACD;;AAED,WAAO;AAACf,eAAD;AAAYF;AAAZ,KAAP;AACD;;AAEDyF,yBAAuBxF,OAAvB,EAAgC;AAC9B;AACA,QAAID,WAAW,IAAf;AACA,UAAME,YAAY,IAAIwF,KAAJ,CAAU,KAAKC,eAAf,EAAgCC,IAAhC,CAAqC,IAArC,CAAlB;;AAEA,SAAK,MAAMN,UAAX,IAAyBrF,OAAzB,EAAkC;AAChC,YAAMgB,SAAShB,QAAQqF,UAAR,CAAf,CADgC,CAGhC;;AACA,UAAIrE,OAAOC,MAAP,KAAkB5C,uBAAtB,EAA+C;AAC7CH,eAAO,CAAC6B,QAAR,EAAkB,mCAAlB,EAD6C,CAE7C;;AACAA,mBAAWiB,MAAX;AACD,OAJD,MAIO,IAAI,CAAC,KAAK4E,KAAL,CAAWP,UAAX,CAAL,EAA6B;AAClClH,YAAI0H,IAAJ,CAAS,CAAT,EAAa,GAAE,KAAKC,MAAL,CAAYT,UAAZ,CAAwB,WAAvC;AACA,aAAKO,KAAL,CAAWP,UAAX,IAAyB,IAAzB;AACD;;AAED,UAAItE,WAAWuE,OAAOD,UAAP,CAAf,CAbgC,CAchC;AACA;;AACA,UAAI,CAACC,OAAOC,QAAP,CAAgBxE,QAAhB,CAAL,EAAgC;AAC9BA,mBAAW,KAAKd,SAAL,CAAeoF,UAAf,CAAX;AACD;;AACDpF,gBAAUc,QAAV,IAAsBsE,UAAtB;AACAnH,aAAO+B,UAAUc,QAAV,MAAwB,IAA/B,EAAsC,yCAAwCA,QAAS,EAAvF;AACAd,gBAAUc,QAAV,IAAsBA,QAAtB;AACD;;AAED,WAAO;AAACd,eAAD;AAAYF;AAAZ,KAAP;AACD,GApX+C,CAsXhD;;;AAEAgG,kBAAgB;AACd,WAAO,KAAK5D,GAAL,CAAS6D,iBAAT,EAAP;AACD;;AAEDC,gBAAczG,MAAd,EAAsB;AACpB,SAAK2C,GAAL,CAAS+D,iBAAT,CAA2B1G,MAA3B;AACA,WAAO,CAAC,KAAKO,QAAN,CAAP,CAFoB,CAGpB;AACD,GAhY+C,CAkYhD;AACA;AACA;AACA;;;AACAoG,gBAAcC,KAAd,EAAqB;AAACrF;AAAD,GAArB,EAAiC;AAC/B7C,WAAOoH,OAAOC,QAAP,CAAgBxE,QAAhB,CAAP;AAEA,SAAKoB,GAAL,CAASC,eAAT,CAAyB,KAAK5C,MAA9B,EAH+B,CAK/B;;AACA,QAAI6G,MAAJ;;AACA,YAAQD,KAAR;AACA,WAAKzH,8BAAL;AACE0H,iBAAS,KAAKlH,EAAL,CAAQmH,qBAAR,CAA8BvF,QAA9B,EAAwCqF,KAAxC,CAAT;AACA;;AACF;AACEC,iBAAS,KAAKlE,GAAL,CAASoE,eAAT,CAAyBxF,QAAzB,EAAmCqF,KAAnC,CAAT;AALF;;AAQA,SAAKjE,GAAL,CAASC,eAAT,CAAyB,IAAzB;AACA,WAAOiE,MAAP;AACD;;AAEDG,aAAW;AACT,WAAO,IAAIf,KAAJ,CAAU,KAAK7F,cAAf,EAA+B+F,IAA/B,CAAoC,CAApC,EAAuCc,GAAvC,CAA2C,CAACC,CAAD,EAAI3F,QAAJ,KAAiB;AACjE,YAAMsF,SAAS,EAAf;AACAtH,iBAAWqG,OAAX,CAAmBuB,aAAa;AAC9BN,eAAOtI,MAAM4I,SAAN,CAAP,IAA2B,KAAKjH,YAAL,CAAkBiH,SAAlB,EAA6B;AAAC5F;AAAD,SAA7B,CAA3B;AACD,OAFD;AAGA,aAAOsF,MAAP;AACD,KANM,CAAP;AAOD;;AAEDO,QAAMpH,MAAN,EAAc;AACZ,SAAK2C,GAAL,CAASC,eAAT,CAAyB5C,MAAzB;AACD;;AAra+C","sourcesContent":["// WebGL2 VertexArray Objects Helper\nimport {glKey} from './gl-constants';\nimport {isWebGL2} from './context';\nimport Resource from './resource';\nimport assert from '../utils/assert';\nimport {log} from '../utils';\n\n/* eslint-disable camelcase */\nconst OES_vertex_array_object = 'OES_vertex_array_object';\n\nconst GL_ELEMENT_ARRAY_BUFFER = 0x8893;\n\n// const GL_CURRENT_VERTEX_ATTRIB = 0x8626;\n\nconst GL_VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622;\nconst GL_VERTEX_ATTRIB_ARRAY_SIZE = 0x8623;\nconst GL_VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624;\nconst GL_VERTEX_ATTRIB_ARRAY_TYPE = 0x8625;\nconst GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A;\nconst GL_VERTEX_ATTRIB_ARRAY_POINTER = 0x8645;\nconst GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F;\n\nconst GL_VERTEX_ATTRIB_ARRAY_INTEGER = 0x88FD;\nconst GL_VERTEX_ATTRIB_ARRAY_DIVISOR = 0x88FE;\n\nconst PARAMETERS = [\n  GL_VERTEX_ATTRIB_ARRAY_ENABLED,\n  GL_VERTEX_ATTRIB_ARRAY_SIZE,\n  GL_VERTEX_ATTRIB_ARRAY_STRIDE,\n  GL_VERTEX_ATTRIB_ARRAY_TYPE,\n  GL_VERTEX_ATTRIB_ARRAY_NORMALIZED,\n  GL_VERTEX_ATTRIB_ARRAY_POINTER,\n  GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING,\n\n  GL_VERTEX_ATTRIB_ARRAY_INTEGER,\n  GL_VERTEX_ATTRIB_ARRAY_DIVISOR\n];\n\nconst ERR_ELEMENTS = 'elements must be GL.ELEMENT_ARRAY_BUFFER';\n\nexport default class VertexArray extends Resource {\n\n  static isSupported(gl) {\n    return isWebGL2(gl) || gl.getExtension(OES_vertex_array_object);\n  }\n\n  static getDefaultArray(gl) {\n    gl.luma = gl.luma || {};\n    if (!gl.luma.defaultVertexArray) {\n      gl.luma.defaultVertexArray = new VertexArray(gl, {handle: null});\n    }\n    return gl.luma.defaultVertexArray;\n  }\n\n  static getMaxAttributes(gl) {\n    return gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n  }\n\n  get MAX_ATTRIBUTES() {\n    return this.gl.getParameter(this.gl.MAX_VERTEX_ATTRIBS);\n  }\n\n  // Create a VertexArray\n  constructor(gl, opts = {}) {\n    super(gl, opts);\n\n    this.elements = null;\n    this.buffers = {}; // new Array(this.MAX_VERTEX_ATTRIBS).fill(null);\n    this.locations = {};\n    this.names = {};\n    this.drawParameters = {};\n\n    this._bound = false;\n    this._filledLocations = {};\n    Object.seal(this);\n\n    this.initialize(opts);\n  }\n\n  initialize({\n    buffers = {},\n    elements = null,\n    locations = {}\n  } = {}) {\n    this.setLocations(locations);\n    this.setBuffers(buffers, {clear: true});\n    this.setElements(elements);\n  }\n\n  get filledLocations() {\n    return this._filledLocations;\n  }\n\n  // Set a location in vertex attributes array to a buffer\n  setBuffer({\n    location,\n    buffer,\n    target,\n    layout\n  } = {}) {\n    const {gl} = this;\n\n    // Copy main data characteristics from buffer\n    target = target !== undefined ? target : buffer.target;\n    layout = layout !== undefined ? layout : buffer.layout;\n    assert(target, 'setBuffer needs target');\n    assert(layout, 'setBuffer called on uninitialized buffer');\n    this._filledLocations[location] = true;\n\n    this.bind(() => {\n      // a non-zero named buffer object must be bound to the GL_ARRAY_BUFFER target\n      buffer.bind({target: gl.ARRAY_BUFFER});\n\n      const {size, type, normalized, stride, offset} = layout;\n      // Attach _bound ARRAY_BUFFER with specified buffer format to location\n      if (!layout.integer) {\n        gl.vertexAttribPointer(location, size, type, normalized, stride, offset);\n      } else {\n        // specifies *integer* data formats and locations of vertex attributes\n        assert(isWebGL2(gl));\n        gl.vertexAttribIPointer(location, size, type, stride, offset);\n      }\n    });\n\n  }\n\n  // Set (bind) an array or map of vertex array buffers, either in numbered or\n  // named locations. (named locations requires `locations` to have been provided).\n  // For names that are not present in `location`, the supplied buffers will be ignored.\n  // if a single buffer of type GL.ELEMENT_ARRAY_BUFFER is present, it will be set as elements\n  // @param {Object} buffers - An object map with attribute names being keys\n  //   and values are expected to be instances of Buffer.\n\n  _getBufferAndLayout(bufferData) {\n    // Check if buffer was supplied\n    let buffer;\n    let layout;\n    if (bufferData.handle) {\n      buffer = bufferData;\n      layout = bufferData.layout;\n    } else {\n      buffer = bufferData.buffer;\n      layout = Object.assign({}, buffer.layout, bufferData.layout || {}, bufferData);\n    }\n    return {buffer, layout};\n  }\n\n  setBuffers(buffers, {clear = true} = {}) {\n    if (clear) {\n      this.clearBindings();\n    }\n    const {locations, elements} = this._getLocations(buffers);\n\n    this.ext.bindVertexArray(this.handle);\n\n    // Process locations in order\n    for (const location in locations) {\n      const bufferData = locations[location];\n      if (bufferData) {\n        const {buffer, layout} = this._getBufferAndLayout(bufferData);\n        this.setBuffer({location, buffer, layout});\n        this.setDivisor(location, layout.instanced ? 1 : 0);\n        this.enable(location);\n      } else {\n        // DISABLE MISSING ATTRIBUTE\n        this.disable(location);\n      }\n    }\n    this.buffers = buffers;\n\n    this.ext.bindVertexArray(null);\n\n    if (elements) {\n      this.setElements(elements);\n    }\n  }\n\n  // Register an optional buffer name to location mapping\n  setLocations(locations) {\n    this.locations = locations;\n    this.names = {};\n  }\n\n  // Set (bind) an elements buffer, for indexed rendering. Must be GL.ELEMENT_ARRAY_BUFFER\n  setElements(elements) {\n    assert(!elements || elements.target === GL_ELEMENT_ARRAY_BUFFER, ERR_ELEMENTS);\n\n    this.ext.bindVertexArray(this.handle);\n    this.gl.bindBuffer(GL_ELEMENT_ARRAY_BUFFER, elements && elements.handle);\n    this.ext.bindVertexArray(null);\n\n    this.elements = elements;\n    return this;\n  }\n\n  clearBindings({disableZero = false} = {}) {\n    this.bind(() => {\n      for (const location in this._filledLocations) {\n        if (this._filledLocations[location] && (location > 0 || disableZero)) {\n          this.gl.disableVertexAttribArray(location);\n        }\n      }\n      this._filledLocations = {};\n    });\n  }\n\n  // Enable an attribute\n  enable(location) {\n    this.bind(() => {\n      this.gl.enableVertexAttribArray(location);\n    });\n  }\n\n  // Disable an attribute\n  // Perf penalty when disabling attribute 0:\n  // https://stackoverflow.com/questions/20305231/webgl-warning-attribute-0-is-disabled-\n  // this-has-significant-performance-penalt\n  disable(location, disableZero = false) {\n    if (location > 0 || disableZero) {\n      this.bind(() => {\n        this.gl.disableVertexAttribArray(location);\n      });\n    }\n  }\n\n  // Set the frequency divisor used for instanced rendering.\n  setDivisor(location, divisor) {\n    this.bind(() => {\n      this.ext.vertexAttribDivisor(location, divisor);\n    });\n  }\n\n  // Specify values for generic vertex attributes\n  setGeneric({location, array}) {\n    this._filledLocations[location] = true;\n    switch (array.constructor) {\n    case Float32Array:\n      this._setGenericFloatArray(location, array);\n      break;\n    case Int32Array:\n      this._setGenericIntArray(location, array);\n      break;\n    case Uint32Array:\n      this._setGenericUintArray(location, array);\n      break;\n    default:\n      this.setGenericValues(location, ...array);\n    }\n  }\n\n  _setGenericFloatArray(location, array) {\n    const {gl} = this;\n    switch (array.length) {\n    case 1: gl.vertexAttrib1fv(location, array); break;\n    case 2: gl.vertexAttrib2fv(location, array); break;\n    case 3: gl.vertexAttrib3fv(location, array); break;\n    case 4: gl.vertexAttrib4fv(location, array); break;\n    default: assert(false);\n    }\n  }\n\n  _setGenericIntArray(location, array) {\n    const {gl} = this;\n    assert(isWebGL2(gl));\n    switch (array.length) {\n    case 1: gl.vertexAttribI1iv(location, array); break;\n    case 2: gl.vertexAttribI2iv(location, array); break;\n    case 3: gl.vertexAttribI3iv(location, array); break;\n    case 4: gl.vertexAttribI4iv(location, array); break;\n    default: assert(false);\n    }\n  }\n\n  _setGenericUintArray(location, array) {\n    const {gl} = this;\n    assert(isWebGL2(gl));\n    switch (array.length) {\n    case 1: gl.vertexAttribI1uiv(location, array); break;\n    case 2: gl.vertexAttribI2uiv(location, array); break;\n    case 3: gl.vertexAttribI3uiv(location, array); break;\n    case 4: gl.vertexAttribI4uiv(location, array); break;\n    default: assert(false);\n    }\n  }\n\n  // Specify values for generic vertex attributes\n  setGenericValues(location, v0, v1, v2, v3) {\n    const {gl} = this;\n    switch (arguments.length - 1) {\n    case 1: gl.vertexAttrib1f(location, v0); break;\n    case 2: gl.vertexAttrib2f(location, v0, v1); break;\n    case 3: gl.vertexAttrib3f(location, v0, v1, v2); break;\n    case 4: gl.vertexAttrib4f(location, v0, v1, v2, v3); break;\n    default: assert(false);\n    }\n\n    // assert(gl instanceof WebGL2RenderingContext, 'WebGL2 required');\n    // Looks like these will check how many arguments were supplied?\n    // gl.vertexAttribI4i(location, v0, v1, v2, v3);\n    // gl.vertexAttribI4ui(location, v0, v1, v2, v3);\n  }\n\n  bind(funcOrHandle = this.handle) {\n    if (typeof funcOrHandle !== 'function') {\n      this.bindVertexArray(funcOrHandle);\n      return this;\n    }\n\n    let value;\n\n    if (!this._bound) {\n      this.ext.bindVertexArray(this.handle);\n      this._bound = true;\n\n      value = funcOrHandle();\n\n      this.ext.bindVertexArray(null);\n      this._bound = false;\n    } else {\n      value = funcOrHandle();\n    }\n\n    return value;\n  }\n\n  // PRIVATE\n\n  // Auto detect draw parameters from the complement of buffers provided\n  _deduceDrawParameters() {\n    // indexing is autodetected - buffer with target gl.ELEMENT_ARRAY_BUFFER\n    // index type is saved for drawElement calls\n    let isInstanced = false;\n    let isIndexed = false;\n    let indexType = null;\n\n    // Check if we have an elements array buffer\n    if (this.elements) {\n      isIndexed = true;\n      indexType = this.elements.layout.type;\n    }\n\n    // Check if any instanced buffers\n    this.buffers.forEach(buffer => {\n      if (buffer.layout.instanced > 0) {\n        isInstanced = true;\n      }\n    });\n\n    return {isInstanced, isIndexed, indexType};\n  }\n  //         this._filledLocations[bufferName] = true;\n\n  _getLocations(buffers) {\n    // Try to extract elements and locations\n    let elements = null;\n    const locations = {};\n\n    for (const bufferName in buffers) {\n      const buffer = buffers[bufferName];\n\n      // Check if this is an elements array\n      if (buffer && buffer.target === GL_ELEMENT_ARRAY_BUFFER) {\n        assert(!elements, 'Duplicate GL.ELEMENT_ARRAY_BUFFER');\n        // assert(location === undefined, 'GL.ELEMENT_ARRAY_BUFFER assigned to location');\n        elements = buffer;\n      }\n\n      let location = Number(bufferName);\n      // if key is a number, interpret as the location\n      // if key is not a location number, assume it is a named buffer, look it up in supplied map\n      if (!Number.isFinite(location)) {\n        location = this.locations[bufferName];\n      }\n      assert(Number.isFinite(location));\n\n      assert(!locations[location], `Duplicate attribute for binding point ${location}`);\n      locations[location] = buffer;\n    }\n\n    return {locations, elements};\n  }\n\n  _sortBuffersByLocation(buffers) {\n    // Try to extract elements and locations\n    let elements = null;\n    const locations = new Array(this._attributeCount).fill(null);\n\n    for (const bufferName in buffers) {\n      const buffer = buffers[bufferName];\n\n      // Check if this is an elements arrau\n      if (buffer.target === GL_ELEMENT_ARRAY_BUFFER) {\n        assert(!elements, 'Duplicate GL.ELEMENT_ARRAY_BUFFER');\n        // assert(location === undefined, 'GL.ELEMENT_ARRAY_BUFFER assigned to location');\n        elements = buffer;\n      } else if (!this._warn[bufferName]) {\n        log.warn(2, `${this._print(bufferName)} not used`)();\n        this._warn[bufferName] = true;\n      }\n\n      let location = Number(bufferName);\n      // if key is a number, interpret as the location\n      // if key is not a location number, assume it is a named buffer, look it up in supplied map\n      if (!Number.isFinite(location)) {\n        location = this.locations[bufferName];\n      }\n      locations[location] = bufferName;\n      assert(locations[location] === null, `Duplicate attribute for binding point ${location}`);\n      locations[location] = location;\n    }\n\n    return {locations, elements};\n  }\n\n  // RESOURCE IMPLEMENTATION\n\n  _createHandle() {\n    return this.ext.createVertexArray();\n  }\n\n  _deleteHandle(handle) {\n    this.ext.deleteVertexArray(handle);\n    return [this.elements];\n    // return [this.elements, ...this.buffers];\n  }\n\n  // Generic getter for information about a vertex attribute at a given position\n  // @param {GLuint} location - index of the vertex attribute.\n  // @param {GLenum} pname - specifies the information to query.\n  // @returns {*} - requested vertex attribute information (specified by pname)\n  _getParameter(pname, {location}) {\n    assert(Number.isFinite(location));\n\n    this.ext.bindVertexArray(this.handle);\n\n    // Let the polyfill intercept the query\n    let result;\n    switch (pname) {\n    case GL_VERTEX_ATTRIB_ARRAY_POINTER:\n      result = this.gl.getVertexAttribOffset(location, pname);\n      break;\n    default:\n      result = this.ext.getVertexAttrib(location, pname);\n    }\n\n    this.ext.bindVertexArray(null);\n    return result;\n  }\n\n  _getData() {\n    return new Array(this.MAX_ATTRIBUTES).fill(0).map((_, location) => {\n      const result = {};\n      PARAMETERS.forEach(parameter => {\n        result[glKey(parameter)] = this.getParameter(parameter, {location});\n      });\n      return result;\n    });\n  }\n\n  _bind(handle) {\n    this.ext.bindVertexArray(handle);\n  }\n}\n"],"file":"vertex-array.js"}