{"version":3,"sources":["../../../src/webgl/context.js"],"names":["WebGLRenderingContext","WebGL2RenderingContext","createHeadlessContext","trackContextState","getCanvas","createContext","makeDebugContext","glGetDebugInfo","queryManager","log","isBrowser","assert","GL_ARRAY_BUFFER","GL_TEXTURE_BINDING_3D","ERR_CONTEXT","ERR_WEBGL","ERR_WEBGL2","isWebGL","gl","Boolean","ARRAY_BUFFER","isWebGL2","TEXTURE_BINDING_3D","assertWebGLContext","assertWebGL2Context","contextDefaults","webgl2","webgl1","throwOnFailure","manageState","canvas","debug","width","height","setContextDefaults","opts","Object","assign","createGLContext","throwOnError","onError","message","Error","targetCanvas","copyState","args","priority","Math","max","logInfo","deleteGLContext","pollContext","poll","webGL","info","driver","vendor","renderer","once"],"mappings":"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","sourcesContent":["/* eslint-disable quotes */\n// WebGLRenderingContext related methods\nimport {WebGLRenderingContext, WebGL2RenderingContext, createHeadlessContext} from '../webgl-utils';\nimport trackContextState from '../webgl-utils/track-context-state';\nimport {getCanvas, createContext} from '../webgl-utils';\n\nimport {makeDebugContext} from '../webgl-utils/debug-context';\nimport {glGetDebugInfo} from './context-limits';\nimport queryManager from './helpers/query-manager';\n\nimport {log, isBrowser} from '../utils';\nimport assert from '../utils/assert';\n\n// Heuristic testing of contexts (to indentify debug wrappers around gl contexts)\nconst GL_ARRAY_BUFFER = 0x8892;\nconst GL_TEXTURE_BINDING_3D = 0x806A;\n\nexport const ERR_CONTEXT = 'Invalid WebGLRenderingContext';\nexport const ERR_WEBGL = ERR_CONTEXT;\nexport const ERR_WEBGL2 = 'Requires WebGL2';\n\nexport function isWebGL(gl) {\n  return Boolean(gl && (\n    gl instanceof WebGLRenderingContext ||\n    gl.ARRAY_BUFFER === GL_ARRAY_BUFFER\n  ));\n}\n\nexport function isWebGL2(gl) {\n  return Boolean(gl && (\n    gl instanceof WebGL2RenderingContext ||\n    gl.TEXTURE_BINDING_3D === GL_TEXTURE_BINDING_3D\n  ));\n}\n\nexport function assertWebGLContext(gl) {\n  // Need to handle debug context\n  assert(isWebGL(gl), ERR_CONTEXT);\n}\n\nexport function assertWebGL2Context(gl) {\n  // Need to handle debug context\n  assert(isWebGL2(gl), ERR_WEBGL2);\n}\n\nconst contextDefaults = {\n  // COMMON CONTEXT PARAMETERS\n  // Attempt to allocate WebGL2 context\n  webgl2: true, // Attempt to create a WebGL2 context (false to force webgl1)\n  webgl1: true,  // Attempt to create a WebGL1 context (false to fail if webgl2 not available)\n  throwOnFailure: true,\n  manageState: true,\n  // BROWSER CONTEXT PARAMETERS\n  canvas: null, // A canvas element or a canvas string id\n  debug: false, // Instrument context (at the expense of performance)\n  // HEADLESS CONTEXT PARAMETERS\n  width: 800, // width are height are only used by headless gl\n  height: 600\n  // WEBGL/HEADLESS CONTEXT PARAMETERS\n  // Remaining options are passed through to context creator\n};\n\n/*\n * Change default context creation parameters.\n * Main use case is regression test suite.\n */\nexport function setContextDefaults(opts = {}) {\n  Object.assign(contextDefaults, {width: 1, height: 1}, opts);\n}\n\n/*\n * Creates a context giving access to the WebGL API\n */\n/* eslint-disable complexity, max-statements */\nexport function createGLContext(opts = {}) {\n  opts = Object.assign({}, contextDefaults, opts);\n  const {canvas, width, height, throwOnError, manageState, debug} = opts;\n\n  // Error reporting function, enables exceptions to be disabled\n  function onError(message) {\n    if (throwOnError) {\n      throw new Error(message);\n    }\n    // log.log(0, message)();\n    return null;\n  }\n\n  let gl;\n  if (isBrowser) {\n    // Get or create a canvas\n    const targetCanvas = getCanvas({canvas, width, height, onError});\n    // Create a WebGL context in the canvas\n    gl = createContext({canvas: targetCanvas, opts});\n  } else {\n    // Create a headless-gl context under Node.js\n    gl = createHeadlessContext({width, height, opts, onError});\n  }\n  if (!gl) {\n    return null;\n  }\n\n  // Install context state tracking\n  if (manageState) {\n    trackContextState(gl, {\n      copyState: false,\n      log: (...args) => log.log(1, ...args)()\n    });\n  }\n\n  // Add debug instrumentation to the context\n  if (isBrowser && debug) {\n    gl = makeDebugContext(gl, {debug});\n    // Debug forces log level to at least 1\n    log.priority = Math.max(log.priority, 1);\n    // Log some debug info about the context\n  }\n  logInfo(gl);\n\n  // Add to seer integration\n\n  return gl;\n}\n\nexport function deleteGLContext(gl) {\n  // Remove from seer integration\n}\n\n// POLLING FOR PENDING QUERIES\n// Calling this function checks all pending queries for completion\nexport function pollContext(gl) {\n  queryManager.poll(gl);\n}\n\nfunction logInfo(gl) {\n  const webGL = isWebGL2(gl) ? 'WebGL2' : 'WebGL1';\n  const info = glGetDebugInfo(gl);\n  const driver = info ? `(${info.vendor},${info.renderer})` : '';\n  const debug = gl.debug ? ' debug' : '';\n  log.once(0, `${webGL}${debug} context ${driver}`)();\n}\n"],"file":"context.js"}