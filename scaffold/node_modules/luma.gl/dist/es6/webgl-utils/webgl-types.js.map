{"version":3,"sources":["../../../src/webgl-utils/webgl-types.js"],"names":["global","headlessTypes","DummyType","WebGLRenderingContext","WebGLProgram","WebGLShader","WebGLBuffer","WebGLFramebuffer","WebGLRenderbuffer","WebGLTexture","WebGLUniformLocation","WebGLActiveInfo","WebGLShaderPrecisionFormat","webGLTypesAvailable","getWebGL2RenderingContext","WebGL2RenderingContextNotSupported","WebGL2RenderingContext","getImage","ImageNotSupported","Image"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAQA,MAAR,QAAqB,kBAArB,C,CAEA;;AACA,SAAQC,aAAR,QAA4B,2BAA5B;;AAEA,MAAMC,SAAN,CAAgB;;aAaZD,iBAAiBD,M;mCAVnBG,qB;MAAAA,qB,sCAAwBD,S;+BACxBE,Y;MAAAA,Y,kCAAeF,S;8BACfG,W;MAAAA,W,iCAAcH,S;8BACdI,W;MAAAA,W,iCAAcJ,S;mCACdK,gB;MAAAA,gB,sCAAmBL,S;mCACnBM,iB;MAAAA,iB,sCAAoBN,S;+BACpBO,Y;MAAAA,Y,kCAAeP,S;mCACfQ,oB;MAAAA,oB,sCAAuBR,S;kCACvBS,e;MAAAA,e,qCAAkBT,S;mCAClBU,0B;MAAAA,0B,sCAA6BV,S;;AAG/B,OAAO,MAAMW,sBACXV,0BAA0BD,SAA1B,IACAE,iBAAiBF,SADjB,IAEAG,gBAAgBH,SAFhB,IAGAI,gBAAgBJ,SAHhB,IAIAK,qBAAqBL,SAJrB,IAKAM,sBAAsBN,SALtB,IAMAO,iBAAiBP,SANjB,IAOAQ,yBAAyBR,SAPzB,IAQAS,oBAAoBT,SARpB,IASAU,+BAA+BV,SAV1B,C,CAYP;AACA;AACA;;AACA,SAASY,yBAAT,GAAqC;AACnC,QAAMC,kCAAN,CAAyC;;AACzC,SAAOf,OAAOgB,sBAAP,IAAiCD,kCAAxC;AACD,C,CAED;;;AACA,SAASE,QAAT,GAAoB;AAClB,QAAMC,iBAAN,CAAwB;;AACxB,SAAOlB,OAAOmB,KAAP,IAAgBD,iBAAvB;AACD;;AAED,MAAMF,yBAAyBF,2BAA/B;AACA,MAAMK,QAAQF,UAAd,C,CAEA;;AACA,SACEE,KADF,EAGEhB,qBAHF,EAIEC,YAJF,EAKEC,WALF,EAMEC,WANF,EAOEC,gBAPF,EAQEC,iBARF,EASEC,YATF,EAUEC,oBAVF,EAWEC,eAXF,EAYEC,0BAZF,EAcEI,sBAdF","sourcesContent":["// WEBGL BUILT-IN TYPES\n// 1) Exports all WebGL constants as {GL}\n// 2) Enables app to \"import\" WebGL types\n//    - Importing these types makes them known to eslint etc.\n//    - Provides dummy types for WebGL2 when not available to streamline\n//      library code.\n//    - Exports types from headless gl when running under Node.js\n\nimport {global} from '../utils/globals';\n\n// Load headless gl dynamically, if available\nimport {headlessTypes} from './create-headless-context';\n\nclass DummyType {}\n\nconst {\n  WebGLRenderingContext = DummyType,\n  WebGLProgram = DummyType,\n  WebGLShader = DummyType,\n  WebGLBuffer = DummyType,\n  WebGLFramebuffer = DummyType,\n  WebGLRenderbuffer = DummyType,\n  WebGLTexture = DummyType,\n  WebGLUniformLocation = DummyType,\n  WebGLActiveInfo = DummyType,\n  WebGLShaderPrecisionFormat = DummyType\n} = headlessTypes || global;\n\nexport const webGLTypesAvailable =\n  WebGLRenderingContext !== DummyType &&\n  WebGLProgram !== DummyType &&\n  WebGLShader !== DummyType &&\n  WebGLBuffer !== DummyType &&\n  WebGLFramebuffer !== DummyType &&\n  WebGLRenderbuffer !== DummyType &&\n  WebGLTexture !== DummyType &&\n  WebGLUniformLocation !== DummyType &&\n  WebGLActiveInfo !== DummyType &&\n  WebGLShaderPrecisionFormat !== DummyType;\n\n// Ensures that WebGL2RenderingContext is defined in non-WebGL2 environments\n// so that apps can test their gl contexts with instanceof\n// E.g. if (gl instanceof WebGL2RenderingContext) { }\nfunction getWebGL2RenderingContext() {\n  class WebGL2RenderingContextNotSupported {}\n  return global.WebGL2RenderingContext || WebGL2RenderingContextNotSupported;\n}\n\n// Ensure that Image is defined under Node.js\nfunction getImage() {\n  class ImageNotSupported {}\n  return global.Image || ImageNotSupported;\n}\n\nconst WebGL2RenderingContext = getWebGL2RenderingContext();\nconst Image = getImage();\n\n// Export the standard WebGL types\nexport {\n  Image,\n\n  WebGLRenderingContext,\n  WebGLProgram,\n  WebGLShader,\n  WebGLBuffer,\n  WebGLFramebuffer,\n  WebGLRenderbuffer,\n  WebGLTexture,\n  WebGLUniformLocation,\n  WebGLActiveInfo,\n  WebGLShaderPrecisionFormat,\n\n  WebGL2RenderingContext\n};\n"],"file":"webgl-types.js"}