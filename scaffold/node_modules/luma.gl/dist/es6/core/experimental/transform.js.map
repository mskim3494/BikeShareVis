{"version":3,"sources":["../../../../src/core/experimental/transform.js"],"names":["GL","Buffer","TransformFeedback","Model","isWebGL2","assertWebGL2Context","assert","log","PASS_THROUGH_FS","Transform","isSupported","gl","constructor","opts","model","_buffersSwapable","currentIndex","sourceBuffers","Array","destinationBuffers","transformFeedbacks","_buffersToDelete","elementCount","initialize","Object","seal","delete","buffer","vs","sourceDestinationMap","varyings","drawMode","POINTS","index","varyingMap","varying","_bindBuffers","_buildModel","update","warn","bufferName","assign","bindBuffers","nextIndex","sourceBufferName","destinationBufferName","run","uniforms","setAttributes","draw","transformFeedback","parameters","RASTERIZER_DISCARD","swapBuffers","getBuffer","varyingName","sourceBuffer","bytes","type","usage","layout","push","fs","vsLines","split","indexOf","vertexCount","buffers"],"mappings":"AAAA,OAAOA,EAAP,MAAe,0BAAf;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,OAAOC,iBAAP,MAA8B,gCAA9B;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,SAAQC,QAAR,EAAkBC,mBAAlB,QAA4C,qBAA5C;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,SAAQC,GAAR,QAAkB,aAAlB;AAEA,MAAMC,kBAAmB;;;EAAzB;AAKA,eAAe,MAAMC,SAAN,CAAgB;AAE7B,SAAOC,WAAP,CAAmBC,EAAnB,EAAuB;AACrB;AACA,WAAOP,SAASO,EAAT,CAAP;AACD;;AAEDC,cAAYD,EAAZ,EAAgBE,OAAO,EAAvB,EAA2B;AACzBR,wBAAoBM,EAApB;AAEA,SAAKA,EAAL,GAAUA,EAAV;AACA,SAAKG,KAAL,GAAa,IAAb;AACA,SAAKC,gBAAL,GAAwB,KAAxB;AACA,SAAKC,YAAL,GAAoB,CAApB;AACA,SAAKC,aAAL,GAAqB,IAAIC,KAAJ,CAAU,CAAV,CAArB;AACA,SAAKC,kBAAL,GAA0B,IAAID,KAAJ,CAAU,CAAV,CAA1B;AACA,SAAKE,kBAAL,GAA0B,IAAIF,KAAJ,CAAU,CAAV,CAA1B;AACA,SAAKG,gBAAL,GAAwB,EAAxB;AACA,SAAKC,YAAL,GAAoB,CAApB;AAEA,SAAKC,UAAL,CAAgBV,IAAhB;AACAW,WAAOC,IAAP,CAAY,IAAZ;AACD,GAtB4B,CAwB7B;;;AACAC,WAAS;AACP,SAAK,MAAMC,MAAX,IAAqB,KAAKN,gBAA1B,EAA4C;AAC1CM,aAAOD,MAAP;AACD;;AACD,SAAKZ,KAAL,CAAWY,MAAX;AACD;;AAEDH,aAAW;AACTN,oBAAgB,IADP;AAETE,yBAAqB,IAFZ;AAGTS,SAAK,IAHI;AAITC,2BAAuB,IAJd;AAKTC,eAAW,IALF;AAMTC,eAAW/B,GAAGgC,MANL;AAOTV,mBAAe;AAPN,GAAX,EAQG;AACDhB,WAAOW,iBAAiBW,EAAjB,IAAuBE,QAAvB,IAAmCR,YAA1C,EADC,CAGD;AACA;;AACAhB,WAAOa,sBAAsBU,oBAA7B;;AAEA,QAAIA,oBAAJ,EAA0B;AACxB,WAAKA,oBAAL,GAA4BA,oBAA5B;AACA,WAAKd,gBAAL,GAAwB,IAAxB;AACD;;AAED,QAAIkB,QAAQ,CAAZ;AACA,SAAKH,QAAL,GAAgB,EAAhB;AACA,SAAKI,UAAL,GAAkB,EAAlB;;AACA,SAAK,MAAMC,OAAX,IAAsBL,QAAtB,EAAgC;AAC9B,WAAKA,QAAL,CAAcG,KAAd,IAAuBE,OAAvB;AACA,WAAKD,UAAL,CAAgBC,OAAhB,IAA2BF,KAA3B;AACAA;AACD;;AAED,SAAKG,YAAL,CAAkB;AAACnB,mBAAD;AAAgBE;AAAhB,KAAlB;;AACA,SAAKkB,WAAL,CAAiB;AAACT,QAAD;AAAKG,cAAL;AAAeT;AAAf,KAAjB;AACD,GA/D4B,CAiE7B;;;AACAgB,SAAO;AACLrB,oBAAgB,IADX;AAELE,yBAAqB;AAFhB,GAAP,EAGG;AACD,QAAI,CAACF,aAAD,IAAkB,CAACE,kBAAvB,EAA2C;AACzCZ,UAAIgC,IAAJ,CAAS,gCAAT;AACA,aAAO,IAAP;AACD;;AAJA,UAKMvB,YALN,GAKwE,IALxE,CAKMA,YALN;AAAA,UAKoBkB,UALpB,GAKwE,IALxE,CAKoBA,UALpB;AAAA,UAKgCnB,gBALhC,GAKwE,IALxE,CAKgCA,gBALhC;AAAA,UAKkDK,kBALlD,GAKwE,IALxE,CAKkDA,kBALlD;;AAMD,SAAK,MAAMoB,UAAX,IAAyBvB,aAAzB,EAAwC;AACtCX,aAAOW,cAAcuB,UAAd,aAAqCvC,MAA5C;AACD;;AACD,SAAK,MAAMuC,UAAX,IAAyBrB,kBAAzB,EAA6C;AAC3Cb,aAAOa,mBAAmBqB,UAAnB,aAA0CvC,MAAjD;AACD;;AACDuB,WAAOiB,MAAP,CAAc,KAAKxB,aAAL,CAAmBD,YAAnB,CAAd,EAAgDC,aAAhD;AACAO,WAAOiB,MAAP,CAAc,KAAKtB,kBAAL,CAAwBH,YAAxB,CAAd,EAAqDG,kBAArD;AACAC,uBAAmBJ,YAAnB,EAAiC0B,WAAjC,CACE,KAAKvB,kBAAL,CAAwBH,YAAxB,CADF,EACyC;AAACkB;AAAD,KADzC;;AAIA,QAAInB,gBAAJ,EAAsB;AACpB,YAAM4B,YAAY,CAAC3B,eAAe,CAAhB,IAAqB,CAAvC;;AAEA,WAAK,MAAM4B,gBAAX,IAA+B,KAAKf,oBAApC,EAA0D;AACxD,cAAMgB,wBAAwB,KAAKhB,oBAAL,CAA0Be,gBAA1B,CAA9B;AACA,aAAK3B,aAAL,CAAmB0B,SAAnB,EAA8BC,gBAA9B,IACE,KAAKzB,kBAAL,CAAwBH,YAAxB,EAAsC6B,qBAAtC,CADF;AAEA,aAAK1B,kBAAL,CAAwBwB,SAAxB,EAAmCE,qBAAnC,IACE,KAAK5B,aAAL,CAAmBD,YAAnB,EAAiC4B,gBAAjC,CADF;AAED;;AACDxB,yBAAmBuB,SAAnB,EAA8BD,WAA9B,CACE,KAAKvB,kBAAL,CAAwBwB,SAAxB,CADF,EACsC;AAACT;AAAD,OADtC;AAGD;;AACD,WAAO,IAAP;AACD,GAtG4B,CAwG7B;;;AACAY,MAAI;AAACC,eAAW;AAAZ,MAAkB,EAAtB,EAA0B;AAAA,UACjBjC,KADiB,GACyC,IADzC,CACjBA,KADiB;AAAA,UACVM,kBADU,GACyC,IADzC,CACVA,kBADU;AAAA,UACUH,aADV,GACyC,IADzC,CACUA,aADV;AAAA,UACyBD,YADzB,GACyC,IADzC,CACyBA,YADzB;AAExBF,UAAMkC,aAAN,CAAoB/B,cAAcD,YAAd,CAApB;AACAF,UAAMmC,IAAN,CAAW;AACTC,yBAAmB9B,mBAAmBJ,YAAnB,CADV;AAET+B,cAFS;AAGTI,kBAAY;AACV,SAACnD,GAAGoD,kBAAJ,GAAyB;AADf;AAHH,KAAX;AAOD,GAnH4B,CAqH7B;;;AACAC,gBAAc;AACZ/C,WAAO,KAAKS,gBAAZ;AACA,SAAKC,YAAL,GAAoB,CAAC,KAAKA,YAAL,GAAoB,CAArB,IAA0B,CAA9C;AACD,GAzH4B,CA2H7B;;;AACAsC,YAAUC,cAAc,IAAxB,EAA8B;AAAA,UACrBpC,kBADqB,GACe,IADf,CACrBA,kBADqB;AAAA,UACDH,YADC,GACe,IADf,CACDA,YADC;AAE5BV,WAAOiD,eAAepC,mBAAmBH,YAAnB,EAAiCuC,WAAjC,CAAtB;AACA,WAAOpC,mBAAmBH,YAAnB,EAAiCuC,WAAjC,CAAP;AACD,GAhI4B,CAkI7B;AACA;;;AACAnB,eAAa;AACXnB,oBAAgB,IADL;AAEXE,yBAAqB;AAFV,GAAb,EAGG;AAAA,UACMJ,gBADN,GAC0B,IAD1B,CACMA,gBADN;;AAED,SAAK,MAAMyB,UAAX,IAAyBvB,aAAzB,EAAwC;AACtCX,aAAOW,cAAcuB,UAAd,aAAqCvC,MAA5C;AACD;;AACD,SAAK,MAAMuC,UAAX,IAAyBrB,kBAAzB,EAA6C;AAC3Cb,aAAOa,mBAAmBqB,UAAnB,aAA0CvC,MAAjD;AACD;;AACD,SAAKgB,aAAL,CAAmB,CAAnB,IAAwBO,OAAOiB,MAAP,CAAc,EAAd,EAAkBxB,aAAlB,CAAxB;AACA,SAAKE,kBAAL,CAAwB,CAAxB,IAA6BK,OAAOiB,MAAP,CAAc,EAAd,EAAkBtB,kBAAlB,CAA7B;;AAEA,QAAIJ,gBAAJ,EAAsB;AACpB,WAAKE,aAAL,CAAmB,CAAnB,IAAwB,EAAxB;AACA,WAAKE,kBAAL,CAAwB,CAAxB,IAA6B,EAA7B;;AAEA,WAAK,MAAMyB,gBAAX,IAA+B,KAAKf,oBAApC,EAA0D;AACxD,cAAMgB,wBAAwB,KAAKhB,oBAAL,CAA0Be,gBAA1B,CAA9B;;AACA,YAAI,CAAC,KAAKzB,kBAAL,CAAwB,CAAxB,EAA2B0B,qBAA3B,CAAL,EAAwD;AACtD;AACA,gBAAMW,eAAe,KAAKvC,aAAL,CAAmB,CAAnB,EAAsB2B,gBAAtB,CAArB;AAFsD,gBAG/Ca,KAH+C,GAGjBD,YAHiB,CAG/CC,KAH+C;AAAA,gBAGxCC,IAHwC,GAGjBF,YAHiB,CAGxCE,IAHwC;AAAA,gBAGlCC,KAHkC,GAGjBH,YAHiB,CAGlCG,KAHkC;AAAA,gBAG3BC,MAH2B,GAGjBJ,YAHiB,CAG3BI,MAH2B;AAItD,eAAKzC,kBAAL,CAAwB,CAAxB,EAA2B0B,qBAA3B,IACE,IAAI5C,MAAJ,CAAW,KAAKU,EAAhB,EAAoB;AAAC8C,iBAAD;AAAQC,gBAAR;AAAcC,iBAAd;AAAqBC;AAArB,WAApB,CADF;;AAEA,eAAKvC,gBAAL,CAAsBwC,IAAtB,CAA2B,KAAK1C,kBAAL,CAAwB,CAAxB,EAA2B0B,qBAA3B,CAA3B;AACD;;AAED,aAAK5B,aAAL,CAAmB,CAAnB,EAAsB2B,gBAAtB,IACE,KAAKzB,kBAAL,CAAwB,CAAxB,EAA2B0B,qBAA3B,CADF;AAEA,aAAK1B,kBAAL,CAAwB,CAAxB,EAA2B0B,qBAA3B,IACE,KAAK5B,aAAL,CAAmB,CAAnB,EAAsB2B,gBAAtB,CADF;AAED;AACF;AACF,GAvK4B,CAyK7B;;;AACAP,cAAY;AACVT,MADU;AACNG,YADM;AACIT;AADJ,GAAZ,EAEG;AAAA,UACMQ,QADN,GACgD,IADhD,CACMA,QADN;AAAA,UACgBI,UADhB,GACgD,IADhD,CACgBA,UADhB;AAAA,UAC4BnB,gBAD5B,GACgD,IADhD,CAC4BA,gBAD5B,EAGD;;AACA,QAAI+C,KAAKtD,eAAT;AACA,UAAMuD,UAAUnC,GAAGoC,KAAH,CAAS,IAAT,CAAhB;;AACA,QAAID,QAAQ,CAAR,EAAWE,OAAX,CAAmB,WAAnB,MAAoC,CAAxC,EAA2C;AACzCH,WAAM;EACVC,QAAQ,CAAR,CAAW;EACXvD,eAAgB;CAFZ;AAID;;AAED,SAAKM,KAAL,GAAa,IAAIX,KAAJ,CAAU,KAAKQ,EAAf,EAAmB;AAC9BiB,QAD8B;AAE9BkC,QAF8B;AAG9BhC,cAH8B;AAI9BC,cAJ8B;AAK9BmC,mBAAa5C;AALiB,KAAnB,CAAb;AAOA,SAAKF,kBAAL,CAAwB,CAAxB,IAA6B,IAAIlB,iBAAJ,CAAsB,KAAKS,EAA3B,EAA+B;AAC1DwD,eAAS,KAAKhD,kBAAL,CAAwB,CAAxB,CADiD;AAE1De;AAF0D,KAA/B,CAA7B;;AAIA,QAAInB,gBAAJ,EAAsB;AACpB,WAAKK,kBAAL,CAAwB,CAAxB,IAA6B,IAAIlB,iBAAJ,CAAsB,KAAKS,EAA3B,EAA+B;AAC1DwD,iBAAS,KAAKhD,kBAAL,CAAwB,CAAxB,CADiD;AAE1De,oBAAY,KAAKA;AAFyC,OAA/B,CAA7B;AAID;AACF;;AA1M4B","sourcesContent":["import GL from '../../webgl/gl-constants';\nimport Buffer from '../../webgl/buffer';\nimport TransformFeedback from '../../webgl/transform-feedback';\nimport Model from '../model';\nimport {isWebGL2, assertWebGL2Context} from '../../webgl/context';\nimport assert from '../../utils/assert';\nimport {log} from '../../utils';\n\nconst PASS_THROUGH_FS = `\\\nvoid main()\n{\n}`;\n\nexport default class Transform {\n\n  static isSupported(gl) {\n    // For now WebGL2 only\n    return isWebGL2(gl);\n  }\n\n  constructor(gl, opts = {}) {\n    assertWebGL2Context(gl);\n\n    this.gl = gl;\n    this.model = null;\n    this._buffersSwapable = false;\n    this.currentIndex = 0;\n    this.sourceBuffers = new Array(2);\n    this.destinationBuffers = new Array(2);\n    this.transformFeedbacks = new Array(2);\n    this._buffersToDelete = [];\n    this.elementCount = 0;\n\n    this.initialize(opts);\n    Object.seal(this);\n  }\n\n  // Delete owned resources.\n  delete() {\n    for (const buffer of this._buffersToDelete) {\n      buffer.delete();\n    }\n    this.model.delete();\n  }\n\n  initialize({\n    sourceBuffers = null,\n    destinationBuffers = null,\n    vs = null,\n    sourceDestinationMap = null,\n    varyings = null,\n    drawMode = GL.POINTS,\n    elementCount = null\n  }) {\n    assert(sourceBuffers && vs && varyings && elementCount);\n\n    // If destinationBuffers are not provided, sourceDestinationMap must be provided\n    // to create destinaitonBuffers with layout of corresponding source buffer.\n    assert(destinationBuffers || sourceDestinationMap);\n\n    if (sourceDestinationMap) {\n      this.sourceDestinationMap = sourceDestinationMap;\n      this._buffersSwapable = true;\n    }\n\n    let index = 0;\n    this.varyings = [];\n    this.varyingMap = {};\n    for (const varying of varyings) {\n      this.varyings[index] = varying;\n      this.varyingMap[varying] = index;\n      index++;\n    }\n\n    this._bindBuffers({sourceBuffers, destinationBuffers});\n    this._buildModel({vs, drawMode, elementCount});\n  }\n\n  // Update some or all buffer bindings.\n  update({\n    sourceBuffers = null,\n    destinationBuffers = null\n  }) {\n    if (!sourceBuffers && !destinationBuffers) {\n      log.warn('Transform : no buffers updated')();\n      return this;\n    }\n    const {currentIndex, varyingMap, _buffersSwapable, transformFeedbacks} = this;\n    for (const bufferName in sourceBuffers) {\n      assert(sourceBuffers[bufferName] instanceof Buffer);\n    }\n    for (const bufferName in destinationBuffers) {\n      assert(destinationBuffers[bufferName] instanceof Buffer);\n    }\n    Object.assign(this.sourceBuffers[currentIndex], sourceBuffers);\n    Object.assign(this.destinationBuffers[currentIndex], destinationBuffers);\n    transformFeedbacks[currentIndex].bindBuffers(\n      this.destinationBuffers[currentIndex], {varyingMap}\n    );\n\n    if (_buffersSwapable) {\n      const nextIndex = (currentIndex + 1) % 2;\n\n      for (const sourceBufferName in this.sourceDestinationMap) {\n        const destinationBufferName = this.sourceDestinationMap[sourceBufferName];\n        this.sourceBuffers[nextIndex][sourceBufferName] =\n          this.destinationBuffers[currentIndex][destinationBufferName];\n        this.destinationBuffers[nextIndex][destinationBufferName] =\n          this.sourceBuffers[currentIndex][sourceBufferName];\n      }\n      transformFeedbacks[nextIndex].bindBuffers(\n        this.destinationBuffers[nextIndex], {varyingMap}\n      );\n    }\n    return this;\n  }\n\n  // Run one transformfeedback loop.\n  run({uniforms = {}} = {}) {\n    const {model, transformFeedbacks, sourceBuffers, currentIndex} = this;\n    model.setAttributes(sourceBuffers[currentIndex]);\n    model.draw({\n      transformFeedback: transformFeedbacks[currentIndex],\n      uniforms,\n      parameters: {\n        [GL.RASTERIZER_DISCARD]: true\n      }\n    });\n  }\n\n  // Swap source and destination buffers.\n  swapBuffers() {\n    assert(this._buffersSwapable);\n    this.currentIndex = (this.currentIndex + 1) % 2;\n  }\n\n  // Return Buffer object for given varying name.\n  getBuffer(varyingName = null) {\n    const {destinationBuffers, currentIndex} = this;\n    assert(varyingName && destinationBuffers[currentIndex][varyingName]);\n    return destinationBuffers[currentIndex][varyingName];\n  }\n\n  // Private\n  // build source and destination buffers\n  _bindBuffers({\n    sourceBuffers = null,\n    destinationBuffers = null\n  }) {\n    const {_buffersSwapable} = this;\n    for (const bufferName in sourceBuffers) {\n      assert(sourceBuffers[bufferName] instanceof Buffer);\n    }\n    for (const bufferName in destinationBuffers) {\n      assert(destinationBuffers[bufferName] instanceof Buffer);\n    }\n    this.sourceBuffers[0] = Object.assign({}, sourceBuffers);\n    this.destinationBuffers[0] = Object.assign({}, destinationBuffers);\n\n    if (_buffersSwapable) {\n      this.sourceBuffers[1] = {};\n      this.destinationBuffers[1] = {};\n\n      for (const sourceBufferName in this.sourceDestinationMap) {\n        const destinationBufferName = this.sourceDestinationMap[sourceBufferName];\n        if (!this.destinationBuffers[0][destinationBufferName]) {\n          // Create new buffer with same layout and settings as source buffer\n          const sourceBuffer = this.sourceBuffers[0][sourceBufferName];\n          const {bytes, type, usage, layout} = sourceBuffer;\n          this.destinationBuffers[0][destinationBufferName] =\n            new Buffer(this.gl, {bytes, type, usage, layout});\n          this._buffersToDelete.push(this.destinationBuffers[0][destinationBufferName]);\n        }\n\n        this.sourceBuffers[1][sourceBufferName] =\n          this.destinationBuffers[0][destinationBufferName];\n        this.destinationBuffers[1][destinationBufferName] =\n          this.sourceBuffers[0][sourceBufferName];\n      }\n    }\n  }\n\n  // build Model and TransformFeedback objects\n  _buildModel({\n    vs, drawMode, elementCount\n  }) {\n    const {varyings, varyingMap, _buffersSwapable} = this;\n\n    // Append matching version string to FS.\n    let fs = PASS_THROUGH_FS;\n    const vsLines = vs.split('\\n');\n    if (vsLines[0].indexOf('#version ') === 0) {\n      fs = `\\\n${vsLines[0]}\n${PASS_THROUGH_FS}\n`;\n    }\n\n    this.model = new Model(this.gl, {\n      vs,\n      fs,\n      varyings,\n      drawMode,\n      vertexCount: elementCount\n    });\n    this.transformFeedbacks[0] = new TransformFeedback(this.gl, {\n      buffers: this.destinationBuffers[0],\n      varyingMap\n    });\n    if (_buffersSwapable) {\n      this.transformFeedbacks[1] = new TransformFeedback(this.gl, {\n        buffers: this.destinationBuffers[1],\n        varyingMap: this.varyingMap\n      });\n    }\n  }\n}\n"],"file":"transform.js"}