{"version":3,"sources":["../../../../src/core/experimental/transform.js"],"names":["PASS_THROUGH_FS","Transform","gl","opts","model","_buffersSwapable","currentIndex","sourceBuffers","Array","destinationBuffers","transformFeedbacks","_buffersToDelete","elementCount","initialize","Object","seal","buffer","delete","vs","sourceDestinationMap","varyings","drawMode","GL","POINTS","index","varyingMap","varying","_bindBuffers","_buildModel","log","warn","bufferName","Buffer","assign","bindBuffers","nextIndex","sourceBufferName","destinationBufferName","uniforms","setAttributes","draw","transformFeedback","parameters","RASTERIZER_DISCARD","varyingName","sourceBuffer","bytes","type","usage","layout","push","fs","vsLines","split","indexOf","Model","vertexCount","TransformFeedback","buffers"],"mappings":"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","sourcesContent":["import GL from '../../webgl/gl-constants';\nimport Buffer from '../../webgl/buffer';\nimport TransformFeedback from '../../webgl/transform-feedback';\nimport Model from '../model';\nimport {isWebGL2, assertWebGL2Context} from '../../webgl/context';\nimport assert from '../../utils/assert';\nimport {log} from '../../utils';\n\nconst PASS_THROUGH_FS = `\\\nvoid main()\n{\n}`;\n\nexport default class Transform {\n\n  static isSupported(gl) {\n    // For now WebGL2 only\n    return isWebGL2(gl);\n  }\n\n  constructor(gl, opts = {}) {\n    assertWebGL2Context(gl);\n\n    this.gl = gl;\n    this.model = null;\n    this._buffersSwapable = false;\n    this.currentIndex = 0;\n    this.sourceBuffers = new Array(2);\n    this.destinationBuffers = new Array(2);\n    this.transformFeedbacks = new Array(2);\n    this._buffersToDelete = [];\n    this.elementCount = 0;\n\n    this.initialize(opts);\n    Object.seal(this);\n  }\n\n  // Delete owned resources.\n  delete() {\n    for (const buffer of this._buffersToDelete) {\n      buffer.delete();\n    }\n    this.model.delete();\n  }\n\n  initialize({\n    sourceBuffers = null,\n    destinationBuffers = null,\n    vs = null,\n    sourceDestinationMap = null,\n    varyings = null,\n    drawMode = GL.POINTS,\n    elementCount = null\n  }) {\n    assert(sourceBuffers && vs && varyings && elementCount);\n\n    // If destinationBuffers are not provided, sourceDestinationMap must be provided\n    // to create destinaitonBuffers with layout of corresponding source buffer.\n    assert(destinationBuffers || sourceDestinationMap);\n\n    if (sourceDestinationMap) {\n      this.sourceDestinationMap = sourceDestinationMap;\n      this._buffersSwapable = true;\n    }\n\n    let index = 0;\n    this.varyings = [];\n    this.varyingMap = {};\n    for (const varying of varyings) {\n      this.varyings[index] = varying;\n      this.varyingMap[varying] = index;\n      index++;\n    }\n\n    this._bindBuffers({sourceBuffers, destinationBuffers});\n    this._buildModel({vs, drawMode, elementCount});\n  }\n\n  // Update some or all buffer bindings.\n  update({\n    sourceBuffers = null,\n    destinationBuffers = null\n  }) {\n    if (!sourceBuffers && !destinationBuffers) {\n      log.warn('Transform : no buffers updated')();\n      return this;\n    }\n    const {currentIndex, varyingMap, _buffersSwapable, transformFeedbacks} = this;\n    for (const bufferName in sourceBuffers) {\n      assert(sourceBuffers[bufferName] instanceof Buffer);\n    }\n    for (const bufferName in destinationBuffers) {\n      assert(destinationBuffers[bufferName] instanceof Buffer);\n    }\n    Object.assign(this.sourceBuffers[currentIndex], sourceBuffers);\n    Object.assign(this.destinationBuffers[currentIndex], destinationBuffers);\n    transformFeedbacks[currentIndex].bindBuffers(\n      this.destinationBuffers[currentIndex], {varyingMap}\n    );\n\n    if (_buffersSwapable) {\n      const nextIndex = (currentIndex + 1) % 2;\n\n      for (const sourceBufferName in this.sourceDestinationMap) {\n        const destinationBufferName = this.sourceDestinationMap[sourceBufferName];\n        this.sourceBuffers[nextIndex][sourceBufferName] =\n          this.destinationBuffers[currentIndex][destinationBufferName];\n        this.destinationBuffers[nextIndex][destinationBufferName] =\n          this.sourceBuffers[currentIndex][sourceBufferName];\n      }\n      transformFeedbacks[nextIndex].bindBuffers(\n        this.destinationBuffers[nextIndex], {varyingMap}\n      );\n    }\n    return this;\n  }\n\n  // Run one transformfeedback loop.\n  run({uniforms = {}} = {}) {\n    const {model, transformFeedbacks, sourceBuffers, currentIndex} = this;\n    model.setAttributes(sourceBuffers[currentIndex]);\n    model.draw({\n      transformFeedback: transformFeedbacks[currentIndex],\n      uniforms,\n      parameters: {\n        [GL.RASTERIZER_DISCARD]: true\n      }\n    });\n  }\n\n  // Swap source and destination buffers.\n  swapBuffers() {\n    assert(this._buffersSwapable);\n    this.currentIndex = (this.currentIndex + 1) % 2;\n  }\n\n  // Return Buffer object for given varying name.\n  getBuffer(varyingName = null) {\n    const {destinationBuffers, currentIndex} = this;\n    assert(varyingName && destinationBuffers[currentIndex][varyingName]);\n    return destinationBuffers[currentIndex][varyingName];\n  }\n\n  // Private\n  // build source and destination buffers\n  _bindBuffers({\n    sourceBuffers = null,\n    destinationBuffers = null\n  }) {\n    const {_buffersSwapable} = this;\n    for (const bufferName in sourceBuffers) {\n      assert(sourceBuffers[bufferName] instanceof Buffer);\n    }\n    for (const bufferName in destinationBuffers) {\n      assert(destinationBuffers[bufferName] instanceof Buffer);\n    }\n    this.sourceBuffers[0] = Object.assign({}, sourceBuffers);\n    this.destinationBuffers[0] = Object.assign({}, destinationBuffers);\n\n    if (_buffersSwapable) {\n      this.sourceBuffers[1] = {};\n      this.destinationBuffers[1] = {};\n\n      for (const sourceBufferName in this.sourceDestinationMap) {\n        const destinationBufferName = this.sourceDestinationMap[sourceBufferName];\n        if (!this.destinationBuffers[0][destinationBufferName]) {\n          // Create new buffer with same layout and settings as source buffer\n          const sourceBuffer = this.sourceBuffers[0][sourceBufferName];\n          const {bytes, type, usage, layout} = sourceBuffer;\n          this.destinationBuffers[0][destinationBufferName] =\n            new Buffer(this.gl, {bytes, type, usage, layout});\n          this._buffersToDelete.push(this.destinationBuffers[0][destinationBufferName]);\n        }\n\n        this.sourceBuffers[1][sourceBufferName] =\n          this.destinationBuffers[0][destinationBufferName];\n        this.destinationBuffers[1][destinationBufferName] =\n          this.sourceBuffers[0][sourceBufferName];\n      }\n    }\n  }\n\n  // build Model and TransformFeedback objects\n  _buildModel({\n    vs, drawMode, elementCount\n  }) {\n    const {varyings, varyingMap, _buffersSwapable} = this;\n\n    // Append matching version string to FS.\n    let fs = PASS_THROUGH_FS;\n    const vsLines = vs.split('\\n');\n    if (vsLines[0].indexOf('#version ') === 0) {\n      fs = `\\\n${vsLines[0]}\n${PASS_THROUGH_FS}\n`;\n    }\n\n    this.model = new Model(this.gl, {\n      vs,\n      fs,\n      varyings,\n      drawMode,\n      vertexCount: elementCount\n    });\n    this.transformFeedbacks[0] = new TransformFeedback(this.gl, {\n      buffers: this.destinationBuffers[0],\n      varyingMap\n    });\n    if (_buffersSwapable) {\n      this.transformFeedbacks[1] = new TransformFeedback(this.gl, {\n        buffers: this.destinationBuffers[1],\n        varyingMap: this.varyingMap\n      });\n    }\n  }\n}\n"],"file":"transform.js"}