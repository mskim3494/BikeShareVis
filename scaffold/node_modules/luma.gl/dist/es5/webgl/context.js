"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isWebGL = isWebGL;
exports.isWebGL2 = isWebGL2;
exports.assertWebGLContext = assertWebGLContext;
exports.assertWebGL2Context = assertWebGL2Context;
exports.setContextDefaults = setContextDefaults;
exports.createGLContext = createGLContext;
exports.deleteGLContext = deleteGLContext;
exports.pollContext = pollContext;
exports.ERR_WEBGL2 = exports.ERR_WEBGL = exports.ERR_CONTEXT = void 0;

var _webglUtils = require("../webgl-utils");

var _trackContextState = _interopRequireDefault(require("../webgl-utils/track-context-state"));

var _debugContext = require("../webgl-utils/debug-context");

var _contextLimits = require("./context-limits");

var _queryManager = _interopRequireDefault(require("./helpers/query-manager"));

var _utils = require("../utils");

var _assert = _interopRequireDefault(require("../utils/assert"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _instanceof(left, right) { if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) { return right[Symbol.hasInstance](left); } else { return left instanceof right; } }

// Heuristic testing of contexts (to indentify debug wrappers around gl contexts)
var GL_ARRAY_BUFFER = 0x8892;
var GL_TEXTURE_BINDING_3D = 0x806A;
var ERR_CONTEXT = 'Invalid WebGLRenderingContext';
exports.ERR_CONTEXT = ERR_CONTEXT;
var ERR_WEBGL = ERR_CONTEXT;
exports.ERR_WEBGL = ERR_WEBGL;
var ERR_WEBGL2 = 'Requires WebGL2';
exports.ERR_WEBGL2 = ERR_WEBGL2;

function isWebGL(gl) {
  return Boolean(gl && (_instanceof(gl, _webglUtils.WebGLRenderingContext) || gl.ARRAY_BUFFER === GL_ARRAY_BUFFER));
}

function isWebGL2(gl) {
  return Boolean(gl && (_instanceof(gl, _webglUtils.WebGL2RenderingContext) || gl.TEXTURE_BINDING_3D === GL_TEXTURE_BINDING_3D));
}

function assertWebGLContext(gl) {
  // Need to handle debug context
  (0, _assert.default)(isWebGL(gl), ERR_CONTEXT);
}

function assertWebGL2Context(gl) {
  // Need to handle debug context
  (0, _assert.default)(isWebGL2(gl), ERR_WEBGL2);
}

var contextDefaults = {
  // COMMON CONTEXT PARAMETERS
  // Attempt to allocate WebGL2 context
  webgl2: true,
  // Attempt to create a WebGL2 context (false to force webgl1)
  webgl1: true,
  // Attempt to create a WebGL1 context (false to fail if webgl2 not available)
  throwOnFailure: true,
  manageState: true,
  // BROWSER CONTEXT PARAMETERS
  canvas: null,
  // A canvas element or a canvas string id
  debug: false,
  // Instrument context (at the expense of performance)
  // HEADLESS CONTEXT PARAMETERS
  width: 800,
  // width are height are only used by headless gl
  height: 600 // WEBGL/HEADLESS CONTEXT PARAMETERS
  // Remaining options are passed through to context creator

};
/*
 * Change default context creation parameters.
 * Main use case is regression test suite.
 */

function setContextDefaults() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  Object.assign(contextDefaults, {
    width: 1,
    height: 1
  }, opts);
}
/*
 * Creates a context giving access to the WebGL API
 */

/* eslint-disable complexity, max-statements */


function createGLContext() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  opts = Object.assign({}, contextDefaults, opts);
  var _opts = opts,
      canvas = _opts.canvas,
      width = _opts.width,
      height = _opts.height,
      throwOnError = _opts.throwOnError,
      manageState = _opts.manageState,
      debug = _opts.debug; // Error reporting function, enables exceptions to be disabled

  function onError(message) {
    if (throwOnError) {
      throw new Error(message);
    } // log.log(0, message)();


    return null;
  }

  var gl;

  if (_utils.isBrowser) {
    // Get or create a canvas
    var targetCanvas = (0, _webglUtils.getCanvas)({
      canvas: canvas,
      width: width,
      height: height,
      onError: onError
    }); // Create a WebGL context in the canvas

    gl = (0, _webglUtils.createContext)({
      canvas: targetCanvas,
      opts: opts
    });
  } else {
    // Create a headless-gl context under Node.js
    gl = (0, _webglUtils.createHeadlessContext)({
      width: width,
      height: height,
      opts: opts,
      onError: onError
    });
  }

  if (!gl) {
    return null;
  } // Install context state tracking


  if (manageState) {
    (0, _trackContextState.default)(gl, {
      copyState: false,
      log: function log() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return _utils.log.log.apply(_utils.log, [1].concat(args))();
      }
    });
  } // Add debug instrumentation to the context


  if (_utils.isBrowser && debug) {
    gl = (0, _debugContext.makeDebugContext)(gl, {
      debug: debug
    }); // Debug forces log level to at least 1

    _utils.log.priority = Math.max(_utils.log.priority, 1); // Log some debug info about the context
  }

  logInfo(gl); // Add to seer integration

  return gl;
}

function deleteGLContext(gl) {} // Remove from seer integration
// POLLING FOR PENDING QUERIES
// Calling this function checks all pending queries for completion


function pollContext(gl) {
  _queryManager.default.poll(gl);
}

function logInfo(gl) {
  var webGL = isWebGL2(gl) ? 'WebGL2' : 'WebGL1';
  var info = (0, _contextLimits.glGetDebugInfo)(gl);
  var driver = info ? "(".concat(info.vendor, ",").concat(info.renderer, ")") : '';
  var debug = gl.debug ? ' debug' : '';

  _utils.log.once(0, "".concat(webGL).concat(debug, " context ").concat(driver))();
}
//# sourceMappingURL=context.js.map