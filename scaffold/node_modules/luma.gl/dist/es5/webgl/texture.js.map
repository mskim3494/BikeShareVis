{"version":3,"sources":["../../../src/webgl/texture.js"],"names":["NPOT_MIN_FILTERS","GL","LINEAR","NEAREST","TEXTURE_FORMATS","RGB","dataFormat","types","UNSIGNED_BYTE","UNSIGNED_SHORT_5_6_5","RGBA","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","ALPHA","LUMINANCE","LUMINANCE_ALPHA","isFormatSupported","gl","format","ERR_WEBGL","info","gl1","undefined","gl2","value","getExtension","isLinearFilteringSupported","FLOAT","HALF_FLOAT","Texture","linearFiltering","supported","opts","id","handle","target","hasFloatTexture","textureUnit","width","height","data","pixels","type","border","recreate","parameters","pixelStore","unpackFlipY","mipmaps","_deduceParameters","compressed","DEFAULT_TEXTURE_SETTINGS","UNPACK_FLIP_Y_WEBGL","glSettings","Object","assign","_isNPOT","log","warn","_updateForNPOT","setImageData","generateMipmap","setParameters","initialize","params","bindTexture","level","offset","dataType","_getDataType","texImage2D","ERR_WEBGL2","bindBuffer","PIXEL_UNPACK_BUFFER","compressedTexImage2D","x","y","ndarray","shape","Buffer","compressedTexSubImage2D","texSubImage2D","ArrayBuffer","isView","WebGLBuffer","GL_PIXEL_UNPACK_BUFFER","framebuffer","internalFormat","bind","copyTexImage2D","unbind","getParameter","ACTIVE_TEXTURE","TEXTURE0","Error","activeTexture","internalformat","depth","texImage3D","textureFormat","_deduceImageSize","size","ImageData","HTMLImageElement","naturalWidth","naturalHeight","HTMLCanvasElement","HTMLVideoElement","videoWidth","videoHeight","createTexture","deleteTexture","pname","TEXTURE_WIDTH","TEXTURE_HEIGHT","getTexParameter","param","_getNPOTParam","TEXTURE_MIN_LOD","TEXTURE_MAX_LOD","texParameterf","texParameteri","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","indexOf","Resource"],"mappings":"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","sourcesContent":["/* eslint-disable no-inline-comments, max-len */\nimport GL from './gl-constants';\nimport {WebGLBuffer} from '../webgl-utils';\nimport {isWebGL, ERR_WEBGL, isWebGL2, ERR_WEBGL2} from './context';\nimport {withParameters} from './context-state';\nimport Resource from './resource';\nimport Buffer from './buffer';\nimport {uid, isPowerOfTwo, log} from '../utils';\nimport {glKey} from './gl-constants';\nimport assert from '../utils/assert';\n// Supported min filters for NPOT texture.\nconst NPOT_MIN_FILTERS = [GL.LINEAR, GL.NEAREST];\n\n// const S3TC = 'WEBGL_compressed_texture_s3tc';\n// const PVRTC = 'WEBGL_compressed_texture_pvrtc';\n// const ES3 = 'WEBGL_compressed_texture_es3';\n// const ETC1 = 'WEBGL_compressed_texture_etc1';\n// const SRGB = 'EXT_sRGB';\n// const DEPTH = 'WEBGL_depth_texture';\n\n// Legal combinations for internalFormat, format and type\nexport const TEXTURE_FORMATS = {\n  // Unsized texture format - more performance\n  [GL.RGB]: {dataFormat: GL.RGB, types: [GL.UNSIGNED_BYTE, GL.UNSIGNED_SHORT_5_6_5]},\n  [GL.RGBA]: {dataFormat: GL.RGBA, types: [GL.UNSIGNED_BYTE, GL.UNSIGNED_SHORT_4_4_4_4, GL.UNSIGNED_SHORT_5_5_5_1]},\n  [GL.ALPHA]: {dataFormat: GL.ALPHA, types: [GL.UNSIGNED_BYTE]},\n  [GL.LUMINANCE]: {dataFormat: GL.LUMINANCE, types: [GL.UNSIGNED_BYTE]},\n  [GL.LUMINANCE_ALPHA]: {dataFormat: GL.LUMINANCE_ALPHA, types: [GL.UNSIGNED_BYTE]}\n\n  // [GL.DEPTH_COMPONENT]: {types: [GL.UNSIGNED_SHORT, GL.UNSIGNED_INT, GL.UNSIGNED_INT_24_8], gl1: DEPTH},\n  // [GL.DEPTH_STENCIL]: {gl1: DEPTH},\n\n  // Sized texture format - more performance\n  // R\n  // [GL.R8]: {dataFormat: GL.RED, types: [GL.UNSIGNED_BYTE], gl2: true},\n  // [GL.R16F]: {dataFormat: GL.RED, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true},\n  // [GL.R32F]: {dataFormat: GL.RED, types: [GL.FLOAT], gl2: true},\n  // [GL.R8UI]: {dataFormat: GL.RED_INTEGER, types: [GL.UNSIGNED_BYTE], gl2: true},\n  // // RG\n  // [GL.RG8]: {dataFormat: GL.RG, types: [GL.UNSIGNED_BYTE], gl2: true},\n  // [GL.RG16F]: {dataFormat: GL.RG, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true},\n  // [GL.RG32F]: {dataFormat: GL.RG, types: [GL.FLOAT], gl2: true},\n  // [GL.RG8UI]: {dataFormat: GL.RG_INTEGER, types: [GL.UNSIGNED_BYTE], gl2: true},\n  // // RGB\n  // [GL.RGB8]: {dataFormat: GL.RGB, types: [GL.UNSIGNED_BYTE], gl2: true, gl1: SRGB},\n  // [GL.SRGB8]: {dataFormat: GL.RGB, types: [GL.UNSIGNED_BYTE], gl2: true, gl1: SRGB},\n  // [GL.RGB565]: {dataFormat: GL.RGB, types: [GL.UNSIGNED_BYTE, GL.UNSIGNED_SHORT_5_6_5], gl2: true},\n  // [GL.R11F_G11F_B10F]: {dataFormat: GL.RGB, types: [GL.UNSIGNED_INT_10F_11F_11F_REV, GL.HALF_FLOAT, GL.FLOAT], gl2: true},\n  // [GL.RGB9_E5]: {dataFormat: GL.RGB, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true, gl1: 'WEBGL_color_buffer_half_float'},\n  // [GL.RGB16F]: {dataFormat: GL.RGB, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true, gl1: 'WEBGL_color_buffer_float'},\n  // [GL.RGB32F]: {dataFormat: GL.RGB, types: [GL.FLOAT], gl2: true},\n  // [GL.RGB8UI]: {dataFormat: GL.RGB_INTEGER, types: [GL.UNSIGNED_BYTE], gl2: true},\n  // // RGBA\n  // [GL.RGBA8]: {dataFormat: GL.RGBA, types: [GL.UNSIGNED_BYTE], gl2: true, gl1: SRGB},\n  // [GL.SRGB8_ALPHA8]: {dataFormat: GL.RGBA, types: [GL.UNSIGNED_BYTE], gl2: true, gl1: SRGB},\n  // [GL.RGB5_A1]: {dataFormat: GL.RGBA, types: [GL.UNSIGNED_BYTE, GL.UNSIGNED_SHORT_5_5_5_1], gl2: true},\n  // [GL.RGBA4]: {dataFormat: GL.RGBA, types: [GL.UNSIGNED_BYTE, GL.UNSIGNED_SHORT_4_4_4_4], gl2: true},\n  // [GL.RGBA16F]: {dataFormat: GL.RGBA, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true},\n  // [GL.RGBA32F]: {dataFormat: GL.RGBA, types: [GL.FLOAT], gl2: true},\n  // [GL.RGBA8UI]: {dataFormat: GL.RGBA_INTEGER, types: [GL.UNSIGNED_BYTE], gl2: true}\n\n  // Compressed formats\n\n  // WEBGL_compressed_texture_s3tc\n\n  // [GL.COMPRESSED_RGB_S3TC_DXT1_EXT]: {compressed: true, gl1: S3TC},\n  // [GL.COMPRESSED_RGBA_S3TC_DXT1_EXT]: {compressed: true, gl1: S3TC},\n  // [GL.COMPRESSED_RGBA_S3TC_DXT3_EXT]: {compressed: true, gl1: S3TC},\n  // [GL.COMPRESSED_RGBA_S3TC_DXT5_EXT]: {compressed: true, gl1: S3TC},\n\n  // WEBGL_compressed_texture_es3\n\n  // [GL.COMPRESSED_R11_EAC]: {compressed: true, gl1: ES3}, // RED\n  // [GL.COMPRESSED_SIGNED_R11_EAC]: {compressed: true, gl1: ES3}, // RED\n  // [GL.COMPRESSED_RG11_EAC]: {compressed: true, gl1: ES3}, // RG\n  // [GL.COMPRESSED_SIGNED_RG11_EAC]: {compressed: true, gl1: ES3}, // RG\n  // [GL.COMPRESSED_RGB8_ETC2]: {compressed: true, gl1: ES3}, // RGB\n  // [GL.COMPRESSED_RGBA8_ETC2_EAC]: {compressed: true, gl1: ES3}, // RBG\n  // [GL.COMPRESSED_SRGB8_ETC2]: {compressed: true, gl1: ES3}, // RGB\n  // [GL.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC]: {compressed: true, gl1: ES3}, // RGBA\n  // [GL.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2]: {compressed: true, gl1: ES3}, // RGBA\n  // [GL.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2]: {compressed: true, gl1: ES3}, // RGBA\n  /* WebGL2 guaranteed availability compressed formats?\n  COMPRESSED_R11_EAC RED\n  COMPRESSED_SIGNED_R11_EAC RED\n  COMPRESSED_RG11_EAC RG\n  COMPRESSED_SIGNED_RG11_EAC RG\n  COMPRESSED_RGB8_ETC2 RGB\n  COMPRESSED_SRGB8_ETC2 RGB\n  COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 RGBA\n  COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 RGBA\n  COMPRESSED_RGBA8_ETC2_EAC RGBA\n  COMPRESSED_SRGB8_ALPHA8_ETC2_EAC\n  */\n\n  // WEBGL_compressed_texture_pvrtc\n\n  // [GL.COMPRESSED_RGB_PVRTC_4BPPV1_IMG]: {compressed: true, gl1: PVRTC},\n  // [GL.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG]: {compressed: true, gl1: PVRTC},\n  // [GL.COMPRESSED_RGB_PVRTC_2BPPV1_IMG]: {compressed: true, gl1: PVRTC},\n  // [GL.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG]: {compressed: true, gl1: PVRTC},\n\n  // WEBGL_compressed_texture_etc1\n\n  // [GL.COMPRESSED_RGB_ETC1_WEBGL]: {compressed: true, gl1: ETC1},\n\n  // WEBGL_compressed_texture_atc\n\n  // [GL.COMPRESSED_RGB_ATC_WEBGL]: {compressed: true, gl1: ETC1},\n  // [GL.COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL]: {compressed: true, gl1: ETC1},\n  // [GL.COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL]: {compressed: true, gl1: ETC1}\n};\n\nfunction isFormatSupported(gl, format) {\n  assert(isWebGL(gl), ERR_WEBGL);\n  const info = TEXTURE_FORMATS[format];\n  if (!info) {\n    return false;\n  }\n  if (info.gl1 === undefined && info.gl2 === undefined) { // No info - always supported\n    return true;\n  }\n  const value = isWebGL2(gl) ? info.gl2 || info.gl1 : info.gl1;\n  return typeof value === 'string' ? gl.getExtension(value) : value;\n}\n\nfunction isLinearFilteringSupported(gl, format) {\n  const info = TEXTURE_FORMATS[format];\n  switch (info && info.types[0]) {\n  // Both WebGL1 and WebGL2?\n  case GL.FLOAT: return gl.getExtension('OES_texture_float_linear');\n  // Not in WebGL2?\n  case GL.HALF_FLOAT: return gl.getExtension('OES_texture_half_float_linear');\n  default: return true;\n  }\n}\n\nexport default class Texture extends Resource {\n\n  static isSupported(gl, {format, linearFiltering} = {}) {\n    assert(isWebGL(gl), ERR_WEBGL);\n    let supported = true;\n    if (format) {\n      supported = supported && isFormatSupported(gl, format);\n      supported = supported && (!linearFiltering || isLinearFilteringSupported(gl, format));\n    }\n    return supported;\n  }\n\n  // target cannot be modified by bind:\n  // textures are special because when you first bind them to a target,\n  // they get special information. When you first bind a texture as a\n  // GL_TEXTURE_2D, you are actually setting special state in the texture.\n  // You are saying that this texture is a 2D texture.\n  // And it will always be a 2D texture; this state cannot be changed ever.\n  // If you have a texture that was first bound as a GL_TEXTURE_2D,\n  // you must always bind it as a GL_TEXTURE_2D;\n  // attempting to bind it as GL_TEXTURE_1D will give rise to an error\n  // (while run-time).\n  constructor(gl, opts) {\n    const {\n      id = uid('texture'),\n      handle,\n      target\n      // , magFilter, minFilter, wrapS, wrapT\n    } = opts;\n\n    super(gl, {id, handle});\n\n    this.target = target;\n    this.hasFloatTexture = gl.getExtension('OES_texture_float');\n    this.textureUnit = undefined;\n  }\n\n  toString() {\n    return `Texture(${this.id},${this.width}x${this.height})`;\n  }\n\n  /* eslint-disable max-len, max-statements */\n  initialize(opts = {}) {\n    let data = opts.data;\n\n    const {\n      pixels = null,\n      format = GL.RGBA,\n      type = GL.UNSIGNED_BYTE,\n      border = 0,\n      recreate = false,\n      parameters = {},\n      pixelStore = {},\n      // Deprecated parameters\n      unpackFlipY = true\n    } = opts;\n\n    let {mipmaps = true} = opts;\n\n    // pixels variable is for API compatibility purpose\n    if (!data) {\n      // TODO - This looks backwards? Commenting out for now until we decide\n      // which prop to use\n      // log.deprecated('data', 'pixels')();\n      data = pixels;\n    }\n\n    let {width, height, dataFormat} = opts;\n\n    // Deduce width and height\n    ({width, height, dataFormat} = this._deduceParameters({\n      format, type, dataFormat, compressed: false, data, width, height\n    }));\n\n    // Store opts for accessors\n    this.width = width;\n    this.height = height;\n    this.format = format;\n    this.type = type;\n    this.dataFormat = dataFormat;\n    this.border = border;\n    this.mipmaps = mipmaps;\n\n    // Note: luma.gl defaults to GL.UNPACK_FLIP_Y_WEBGL = true;\n    // TODO - compare v4 and v3\n    const DEFAULT_TEXTURE_SETTINGS = {\n      // Pixel store\n      [GL.UNPACK_FLIP_Y_WEBGL]: unpackFlipY\n    };\n    const glSettings = Object.assign({}, DEFAULT_TEXTURE_SETTINGS, pixelStore);\n\n    if (this._isNPOT()) {\n\n      log.warn(`texture: ${this} is Non-Power-Of-Two, disabling mipmaping`)();\n      mipmaps = false;\n\n      this._updateForNPOT(parameters);\n    }\n\n    this.setImageData({data, width, height, format, type, dataFormat, border, mipmaps, parameters: glSettings});\n\n    if (mipmaps) {\n      this.generateMipmap();\n    }\n\n    // Set texture sampler parameters\n    this.setParameters(parameters);\n\n    // TODO - Store data to enable auto recreate on context loss\n    if (recreate) {\n      this.data = data;\n    }\n  }\n\n  // If size has changed, reinitializes with current format\n  // note clears image and mipmaps\n  resize({width, height}) {\n    if (width !== this.width || height !== this.height) {\n      return this.initialize({\n        width,\n        height,\n        format: this.format,\n        type: this.type,\n        dataFormat: this.dataFormat,\n        border: this.border,\n        mipmaps: false\n      });\n    }\n    return this;\n  }\n\n  // Call to regenerate mipmaps after modifying texture(s)\n  generateMipmap(params = {}) {\n    this.gl.bindTexture(this.target, this.handle);\n    withParameters(this.gl, params, () => {\n      this.gl.generateMipmap(this.target);\n    });\n    this.gl.bindTexture(this.target, null);\n    return this;\n  }\n\n  /*\n   * Allocates storage\n   * @param {*} pixels -\n   *  null - create empty texture of specified format\n   *  Typed array - init from image data in typed array\n   *  Buffer|WebGLBuffer - (WEBGL2) init from image data in WebGLBuffer\n   *  HTMLImageElement|Image - Inits with content of image. Auto width/height\n   *  HTMLCanvasElement - Inits with contents of canvas. Auto width/height\n   *  HTMLVideoElement - Creates video texture. Auto width/height\n   *\n   * @param {GLint} width -\n   * @param {GLint} height -\n   * @param {GLint} mipMapLevel -\n   * @param {GLenum} format - format of image data.\n   * @param {GLenum} type\n   *  - format of array (autodetect from type) or\n   *  - (WEBGL2) format of buffer\n   * @param {Number} offset - (WEBGL2) offset from start of buffer\n   * @param {GLint} border - must be 0.\n   * @parameters - temporary settings to be applied, can be used to supply pixel store settings.\n   */\n  /* eslint-disable max-len, max-statements, complexity */\n  setImageData({\n    target = this.target,\n    pixels = null,\n    data = null,\n    width,\n    height,\n    level = 0,\n    format = GL.RGBA,\n    type,\n    dataFormat,\n    offset = 0,\n    border = 0,\n    compressed = false,\n    parameters = {}\n  }) {\n    // pixels variable is  for API compatibility purpose\n    if (!data) {\n      data = pixels;\n    }\n\n    ({type, dataFormat, compressed, width, height} = this._deduceParameters({\n      format, type, dataFormat, compressed, data, width, height}));\n\n    const {gl} = this;\n    gl.bindTexture(this.target, this.handle);\n\n    let dataType = null;\n    ({data, dataType} = this._getDataType({data, compressed}));\n\n    withParameters(this.gl, parameters, () => {\n      switch (dataType) {\n      case 'null':\n        gl.texImage2D(target, level, format, width, height, border, dataFormat, type, data);\n        break;\n      case 'typed-array':\n        // Looks like this assert is not necessary, as offset is ignored under WebGL1\n        // assert((offset === 0 || isWebGL2(gl)), 'offset supported in WebGL2 only');\n        gl.texImage2D(target, level, format, width, height, border, dataFormat, type, data, offset);\n        break;\n      case 'buffer':\n        // WebGL2 enables creating textures directly from a WebGL buffer\n        assert(isWebGL2(gl), ERR_WEBGL2);\n        gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, data.handle || data);\n        gl.texImage2D(target, level, format, width, height, border, format, type, offset);\n        break;\n      case 'browser-object':\n        gl.texImage2D(target, level, format, format, type, data);\n        break;\n      case 'compressed':\n        gl.compressedTexImage2D(this.target, level, format, width, height, border, data);\n        break;\n      default:\n        assert(false, 'Unknown image data type');\n      }\n    });\n\n  }\n  /* eslint-enable max-len, max-statements, complexity */\n\n  /**\n   * Redefines an area of an existing texture\n   * Note: does not allocate storage\n   */\n  /*\n   * Redefines an area of an existing texture\n   * @param {*} pixels, data -\n   *  null - create empty texture of specified format\n   *  Typed array - init from image data in typed array\n   *  Buffer|WebGLBuffer - (WEBGL2) init from image data in WebGLBuffer\n   *  HTMLImageElement|Image - Inits with content of image. Auto width/height\n   *  HTMLCanvasElement - Inits with contents of canvas. Auto width/height\n   *  HTMLVideoElement - Creates video texture. Auto width/height\n   *\n   * @param {GLint} x - xOffset from where texture to be updated\n   * @param {GLint} y - yOffset from where texture to be updated\n   * @param {GLint} width - width of the sub image to be updated\n   * @param {GLint} height - height of the sub image to be updated\n   * @param {GLint} level - mip level to be updated\n   * @param {GLenum} format - internal format of image data.\n   * @param {GLenum} type\n   *  - format of array (autodetect from type) or\n   *  - (WEBGL2) format of buffer or ArrayBufferView\n   * @param {GLenum} dataFormat - format of image data.\n   * @param {Number} offset - (WEBGL2) offset from start of buffer\n   * @param {GLint} border - must be 0.\n   * @parameters - temporary settings to be applied, can be used to supply pixel store settings.\n   */\n  setSubImageData({\n    target = this.target,\n    pixels = null,\n    data = null,\n    x = 0,\n    y = 0,\n    width,\n    height,\n    level = 0,\n    format = GL.RGBA,\n    type,\n    dataFormat,\n    compressed = false,\n    offset = 0,\n    border = 0,\n    parameters = {}\n  }) {\n    ({type, dataFormat, compressed, width, height} = this._deduceParameters({\n      format, type, dataFormat, compressed, data, width, height}));\n\n    // pixels variable is  for API compatibility purpose\n    if (!data) {\n      data = pixels;\n    }\n\n    // Support ndarrays\n    if (data && data.data) {\n      const ndarray = data;\n      data = ndarray.data;\n      width = ndarray.shape[0];\n      height = ndarray.shape[1];\n    }\n\n    // Support buffers\n    if (data instanceof Buffer) {\n      data = data.handle;\n    }\n\n    this.gl.bindTexture(this.target, this.handle);\n\n    withParameters(this.gl, parameters, () => {\n      // TODO - x,y parameters\n      if (compressed) {\n        this.gl.compressedTexSubImage2D(target,\n          level, x, y, width, height, format, data);\n      } else if (data === null) {\n        this.gl.texSubImage2D(target,\n          level, format, width, height, border, dataFormat, type, null);\n      } else if (ArrayBuffer.isView(data)) {\n        this.gl.texSubImage2D(target,\n          level, x, y, width, height, format, type, data, offset);\n      } else if (data instanceof WebGLBuffer) {\n        // WebGL2 allows us to create texture directly from a WebGL buffer\n        assert(isWebGL2(this.gl), ERR_WEBGL2);\n        // This texImage2D signature uses currently bound GL_PIXEL_UNPACK_BUFFER\n        this.gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, data);\n        this.gl.texSubImage2D(target,\n          level, format, width, height, border, format, type, offset);\n        this.gl.bindBuffer(GL.GL_PIXEL_UNPACK_BUFFER, null);\n      } else {\n        // Assume data is a browser supported object (ImageData, Canvas, ...)\n        this.gl.texSubImage2D(target, level, x, y, format, type, data);\n      }\n    });\n\n    this.gl.bindTexture(this.target, null);\n  }\n  /* eslint-enable max-len, max-statements, complexity */\n\n  /**\n   * Defines a two-dimensional texture image or cube-map texture image with\n   * pixels from the current framebuffer (rather than from client memory).\n   * (gl.copyTexImage2D wrapper)\n   *\n   * Note that binding a texture into a Framebuffer's color buffer and\n   * rendering can be faster.\n   */\n  copyFramebuffer({\n    target = this.target,\n    framebuffer,\n    offset = 0,\n    x = 0,\n    y = 0,\n    width,\n    height,\n    level = 0,\n    internalFormat = GL.RGBA,\n    border = 0\n  }) {\n    if (framebuffer) {\n      framebuffer.bind();\n    }\n\n    // target\n    this.bind();\n    this.gl.copyTexImage2D(\n      this.target, level, internalFormat, x, y, width, height, border);\n    this.unbind();\n\n    if (framebuffer) {\n      framebuffer.unbind();\n    }\n  }\n\n  getActiveUnit() {\n    return this.gl.getParameter(GL.ACTIVE_TEXTURE) - GL.TEXTURE0;\n  }\n\n  // target cannot be modified by bind:\n  // textures are special because when you first bind them to a target,\n  // they get special information. When you first bind a texture as a\n  // GL_TEXTURE_2D, you are actually setting special state in the texture.\n  // You are saying that this texture is a 2D texture.\n  // And it will always be a 2D texture; this state cannot be changed ever.\n  // If you have a texture that was first bound as a GL_TEXTURE_2D,\n  // you must always bind it as a GL_TEXTURE_2D;\n  // attempting to bind it as GL_TEXTURE_1D will give rise to an error\n  // (while run-time).\n\n  bind(textureUnit = this.textureUnit) {\n    if (textureUnit === undefined) {\n      throw new Error('Texture.bind: must specify texture unit');\n    }\n    this.textureUnit = textureUnit;\n    this.gl.activeTexture(GL.TEXTURE0 + textureUnit);\n    this.gl.bindTexture(this.target, this.handle);\n    return textureUnit;\n  }\n\n  unbind() {\n    if (this.textureUnit === undefined) {\n      throw new Error('Texture.unbind: texture unit not specified');\n    }\n    this.gl.activeTexture(GL.TEXTURE0 + this.textureUnit);\n    this.gl.bindTexture(this.target, null);\n    return this.textureUnit;\n  }\n\n  // PRIVATE METHODS\n\n  _getDataType({data, compressed = false}) {\n    if (compressed) {\n      return {data, dataType: 'compressed'};\n    }\n    if (data === null) {\n      return {data, dataType: 'null'};\n    }\n    if (ArrayBuffer.isView(data)) {\n      return {data, dataType: 'typed-array'};\n    }\n    if (data instanceof Buffer) {\n      return {data: data.handle, dataType: 'buffer'};\n    }\n    if (data instanceof WebGLBuffer) {\n      return {data, dataType: 'buffer'};\n    }\n    // Assume data is a browser supported object (ImageData, Canvas, ...)\n    return {data, dataType: 'browser-object'};\n  }\n\n  // Image 3D copies from Typed Array or WebGLBuffer\n  setImage3D({\n    level = 0,\n    internalformat = GL.RGBA,\n    width,\n    height,\n    depth = 1,\n    border = 0,\n    format,\n    type = GL.UNSIGNED_BYTE,\n    offset = 0,\n    pixels\n  }) {\n    if (ArrayBuffer.isView(pixels)) {\n      this.gl.texImage3D(\n        this.target, level, internalformat,\n        width, height, depth, border, format, type, pixels);\n      return this;\n    }\n\n    if (pixels instanceof Buffer) {\n      this.gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, pixels.handle);\n      this.gl.texImage3D(\n        this.target, level, internalformat,\n        width, height, depth, border, format, type, offset);\n    }\n\n    return this;\n  }\n\n  /* Copied from texture-2d.js\n  // WebGL2\n  setPixels(opts = {}) {\n    const {\n      buffer,\n      width = null,\n      height = null,\n      mipmapLevel = 0,\n      format = GL.RGBA,\n      type = GL.UNSIGNED_BYTE,\n      border = 0\n    } = opts;\n\n    const {gl} = this;\n\n    // This signature of texImage2D uses currently bound GL_PIXEL_UNPACK_BUFFER\n    gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, buffer.target);\n    // And as always, we must also bind the texture itself\n    this.bind();\n\n    gl.texImage2D(gl.TEXTURE_2D,\n      mipmapLevel, format, width, height, border, format, type, buffer.target);\n\n    this.unbind();\n    gl.bindBuffer(GL.GL_PIXEL_UNPACK_BUFFER, null);\n    return this;\n  }\n\n  setImageDataFromCompressedBuffer(opts) {\n    const {\n      buffer,\n      // offset = 0,\n      width = null,\n      height = null,\n      mipmapLevel = 0,\n      internalFormat = GL.RGBA,\n      // format = GL.RGBA,\n      // type = GL.UNSIGNED_BYTE,\n      border = 0\n    } = opts;\n\n    const {gl} = this;\n    gl.compressedTexImage2D(this.target,\n      mipmapLevel, internalFormat, width, height, border, buffer);\n    // gl.compressedTexSubImage2D(target,\n    //   level, xoffset, yoffset, width, height, format, ArrayBufferView? pixels);\n    return this;\n  }\n\n  copySubImage(opts) {\n    const {\n      // pixels,\n      // offset = 0,\n      // x,\n      // y,\n      // width,\n      // height,\n      // mipmapLevel = 0,\n      // internalFormat = GL.RGBA,\n      // type = GL.UNSIGNED_BYTE,\n      // border = 0\n    } = opts;\n\n    // if (pixels instanceof ArrayBufferView) {\n    //   gl.texSubImage2D(target, level, x, y, width, height, format, type, pixels);\n    // }\n    // gl.texSubImage2D(target, level, x, y, format, type, ? pixels);\n    // gl.texSubImage2D(target, level, x, y, format, type, HTMLImageElement pixels);\n    // gl.texSubImage2D(target, level, x, y, format, type, HTMLCanvasElement pixels);\n    // gl.texSubImage2D(target, level, x, y, format, type, HTMLVideoElement pixels);\n    // // Additional signature in a WebGL 2 context:\n    // gl.texSubImage2D(target, level, x, y, format, type, GLintptr offset);\n  }\n  */\n\n  // HELPER METHODS\n\n  _deduceParameters(opts) {\n    const {format, data} = opts;\n    let {width, height, dataFormat, type, compressed} = opts;\n\n    // Deduce format and type from format\n    const textureFormat = TEXTURE_FORMATS[format];\n    dataFormat = dataFormat || (textureFormat && textureFormat.dataFormat);\n    type = type || (textureFormat && textureFormat.types[0]);\n\n    // Deduce compression from format\n    compressed = compressed || (textureFormat && textureFormat.compressed);\n\n    ({width, height} = this._deduceImageSize({data, width, height}));\n\n    return {dataFormat, type, compressed, width, height, format, data};\n  }\n\n  /* global ImageData, HTMLImageElement, HTMLCanvasElement, HTMLVideoElement */\n  _deduceImageSize({data, width, height}) {\n    let size;\n\n    if (typeof ImageData !== 'undefined' && data instanceof ImageData) {\n      size = {width: data.width, height: data.height};\n    } else if (typeof HTMLImageElement !== 'undefined' && data instanceof HTMLImageElement) {\n      size = {width: data.naturalWidth, height: data.naturalHeight};\n    } else if (typeof HTMLCanvasElement !== 'undefined' && data instanceof HTMLCanvasElement) {\n      size = {width: data.width, height: data.height};\n    } else if (typeof HTMLVideoElement !== 'undefined' && data instanceof HTMLVideoElement) {\n      size = {width: data.videoWidth, height: data.videoHeight};\n    } else if (!data) {\n      size = {width: width >= 0 ? width : 1, height: height >= 0 ? height : 1};\n    } else {\n      size = {width, height};\n    }\n\n    assert(size, 'Could not deduced texture size');\n    assert(width === undefined || size.width === width, 'Deduced texture width does not match supplied width');\n    assert(height === undefined || size.height === height, 'Deduced texture height does not match supplied height');\n\n    return size;\n  }\n\n  // RESOURCE METHODS\n\n  _createHandle() {\n    return this.gl.createTexture();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteTexture(this.handle);\n  }\n\n  _getParameter(pname) {\n    switch (pname) {\n    case GL.TEXTURE_WIDTH:\n      return this.width;\n    case GL.TEXTURE_HEIGHT:\n      return this.height;\n    default:\n      this.gl.bindTexture(this.target, this.handle);\n      const value = this.gl.getTexParameter(this.target, pname);\n      this.gl.bindTexture(this.target, null);\n      return value;\n    }\n  }\n\n  _setParameter(pname, param) {\n    this.gl.bindTexture(this.target, this.handle);\n\n    // NOTE: Apply NPOT workaround\n    param = this._getNPOTParam(pname, param);\n\n    // Apparently there are some integer/float conversion rules that made\n    // the WebGL committe expose two parameter setting functions in JavaScript.\n    // For now, pick the float version for parameters specified as GLfloat.\n    switch (pname) {\n    case GL.TEXTURE_MIN_LOD:\n    case GL.TEXTURE_MAX_LOD:\n      this.gl.texParameterf(this.handle, pname, param);\n      break;\n\n    case GL.TEXTURE_WIDTH:\n    case GL.TEXTURE_HEIGHT:\n      throw new Error('Cannot set emulated parameter');\n\n    default:\n      this.gl.texParameteri(this.target, pname, param);\n      break;\n    }\n\n    this.gl.bindTexture(this.target, null);\n    return this;\n  }\n\n  _isNPOT() {\n    return (!isWebGL2(this.gl) && (!isPowerOfTwo(this.width) || (!isPowerOfTwo(this.height))));\n  }\n\n  // Update default settings which are not supported by NPOT textures.\n  _updateForNPOT(parameters) {\n    if (parameters[this.gl.TEXTURE_MIN_FILTER] === undefined) {\n      log.warn(`texture: ${this} is Non-Power-Of-Two, forcing TEXTURE_MIN_FILTER to LINEAR`)();\n      parameters[this.gl.TEXTURE_MIN_FILTER] = this.gl.LINEAR;\n    }\n    if (parameters[this.gl.TEXTURE_WRAP_S] === undefined) {\n      log.warn(`texture: ${this} is Non-Power-Of-Two, forcing TEXTURE_WRAP_S to CLAMP_TO_EDGE`)();\n      parameters[this.gl.TEXTURE_WRAP_S] = this.gl.CLAMP_TO_EDGE;\n    }\n    if (parameters[this.gl.TEXTURE_WRAP_T] === undefined) {\n      log.warn(`texture: ${this} is Non-Power-Of-Two, forcing TEXTURE_WRAP_T to CLAMP_TO_EDGE`)();\n      parameters[this.gl.TEXTURE_WRAP_T] = this.gl.CLAMP_TO_EDGE;\n    }\n  }\n\n  _getNPOTParam(pname, param) {\n    if (this._isNPOT()) {\n      switch (pname) {\n      case GL.TEXTURE_MIN_FILTER:\n        if (NPOT_MIN_FILTERS.indexOf(param) === -1) {\n          log.warn(`texture: ${this} is Non-Power-Of-Two, forcing TEXTURE_MIN_FILTER to LINEAR`)();\n          param = GL.LINEAR;\n        }\n        break;\n      case GL.TEXTURE_WRAP_S:\n      case GL.TEXTURE_WRAP_T:\n        if (param !== GL.CLAMP_TO_EDGE) {\n          log.warn(`texture: ${this} is Non-Power-Of-Two, ${glKey(pname)} to CLAMP_TO_EDGE`)();\n          param = GL.CLAMP_TO_EDGE;\n        }\n        break;\n      default:\n        break;\n      }\n    }\n    return param;\n  }\n}\n"],"file":"texture.js"}