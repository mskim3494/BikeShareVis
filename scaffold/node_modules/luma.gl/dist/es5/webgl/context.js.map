{"version":3,"sources":["../../../src/webgl/context.js"],"names":["GL_ARRAY_BUFFER","GL_TEXTURE_BINDING_3D","ERR_CONTEXT","ERR_WEBGL","ERR_WEBGL2","isWebGL","gl","Boolean","WebGLRenderingContext","ARRAY_BUFFER","isWebGL2","WebGL2RenderingContext","TEXTURE_BINDING_3D","assertWebGLContext","assertWebGL2Context","contextDefaults","webgl2","webgl1","throwOnFailure","manageState","canvas","debug","width","height","setContextDefaults","opts","Object","assign","createGLContext","throwOnError","onError","message","Error","isBrowser","targetCanvas","copyState","log","args","priority","Math","max","logInfo","deleteGLContext","pollContext","queryManager","poll","webGL","info","driver","vendor","renderer","once"],"mappings":"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","sourcesContent":["/* eslint-disable quotes */\n// WebGLRenderingContext related methods\nimport {WebGLRenderingContext, WebGL2RenderingContext, createHeadlessContext} from '../webgl-utils';\nimport trackContextState from '../webgl-utils/track-context-state';\nimport {getCanvas, createContext} from '../webgl-utils';\n\nimport {makeDebugContext} from '../webgl-utils/debug-context';\nimport {glGetDebugInfo} from './context-limits';\nimport queryManager from './helpers/query-manager';\n\nimport {log, isBrowser} from '../utils';\nimport assert from '../utils/assert';\n\n// Heuristic testing of contexts (to indentify debug wrappers around gl contexts)\nconst GL_ARRAY_BUFFER = 0x8892;\nconst GL_TEXTURE_BINDING_3D = 0x806A;\n\nexport const ERR_CONTEXT = 'Invalid WebGLRenderingContext';\nexport const ERR_WEBGL = ERR_CONTEXT;\nexport const ERR_WEBGL2 = 'Requires WebGL2';\n\nexport function isWebGL(gl) {\n  return Boolean(gl && (\n    gl instanceof WebGLRenderingContext ||\n    gl.ARRAY_BUFFER === GL_ARRAY_BUFFER\n  ));\n}\n\nexport function isWebGL2(gl) {\n  return Boolean(gl && (\n    gl instanceof WebGL2RenderingContext ||\n    gl.TEXTURE_BINDING_3D === GL_TEXTURE_BINDING_3D\n  ));\n}\n\nexport function assertWebGLContext(gl) {\n  // Need to handle debug context\n  assert(isWebGL(gl), ERR_CONTEXT);\n}\n\nexport function assertWebGL2Context(gl) {\n  // Need to handle debug context\n  assert(isWebGL2(gl), ERR_WEBGL2);\n}\n\nconst contextDefaults = {\n  // COMMON CONTEXT PARAMETERS\n  // Attempt to allocate WebGL2 context\n  webgl2: true, // Attempt to create a WebGL2 context (false to force webgl1)\n  webgl1: true,  // Attempt to create a WebGL1 context (false to fail if webgl2 not available)\n  throwOnFailure: true,\n  manageState: true,\n  // BROWSER CONTEXT PARAMETERS\n  canvas: null, // A canvas element or a canvas string id\n  debug: false, // Instrument context (at the expense of performance)\n  // HEADLESS CONTEXT PARAMETERS\n  width: 800, // width are height are only used by headless gl\n  height: 600\n  // WEBGL/HEADLESS CONTEXT PARAMETERS\n  // Remaining options are passed through to context creator\n};\n\n/*\n * Change default context creation parameters.\n * Main use case is regression test suite.\n */\nexport function setContextDefaults(opts = {}) {\n  Object.assign(contextDefaults, {width: 1, height: 1}, opts);\n}\n\n/*\n * Creates a context giving access to the WebGL API\n */\n/* eslint-disable complexity, max-statements */\nexport function createGLContext(opts = {}) {\n  opts = Object.assign({}, contextDefaults, opts);\n  const {canvas, width, height, throwOnError, manageState, debug} = opts;\n\n  // Error reporting function, enables exceptions to be disabled\n  function onError(message) {\n    if (throwOnError) {\n      throw new Error(message);\n    }\n    // log.log(0, message)();\n    return null;\n  }\n\n  let gl;\n  if (isBrowser) {\n    // Get or create a canvas\n    const targetCanvas = getCanvas({canvas, width, height, onError});\n    // Create a WebGL context in the canvas\n    gl = createContext({canvas: targetCanvas, opts});\n  } else {\n    // Create a headless-gl context under Node.js\n    gl = createHeadlessContext({width, height, opts, onError});\n  }\n  if (!gl) {\n    return null;\n  }\n\n  // Install context state tracking\n  if (manageState) {\n    trackContextState(gl, {\n      copyState: false,\n      log: (...args) => log.log(1, ...args)()\n    });\n  }\n\n  // Add debug instrumentation to the context\n  if (isBrowser && debug) {\n    gl = makeDebugContext(gl, {debug});\n    // Debug forces log level to at least 1\n    log.priority = Math.max(log.priority, 1);\n    // Log some debug info about the context\n  }\n  logInfo(gl);\n\n  // Add to seer integration\n\n  return gl;\n}\n\nexport function deleteGLContext(gl) {\n  // Remove from seer integration\n}\n\n// POLLING FOR PENDING QUERIES\n// Calling this function checks all pending queries for completion\nexport function pollContext(gl) {\n  queryManager.poll(gl);\n}\n\nfunction logInfo(gl) {\n  const webGL = isWebGL2(gl) ? 'WebGL2' : 'WebGL1';\n  const info = glGetDebugInfo(gl);\n  const driver = info ? `(${info.vendor},${info.renderer})` : '';\n  const debug = gl.debug ? ' debug' : '';\n  log.once(0, `${webGL}${debug} context ${driver}`)();\n}\n"],"file":"context.js"}