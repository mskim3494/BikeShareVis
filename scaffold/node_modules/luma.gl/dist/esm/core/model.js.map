{"version":3,"sources":["../../../src/core/model.js"],"names":["GL","Buffer","Program","checkUniformValues","isWebGL","getUniformsTable","areUniformsEqual","Query","getDrawMode","Object3D","MODULAR_SHADERS","assembleShaders","addModel","removeModel","logModel","getOverrides","log","formatValue","isObjectEmpty","assert","MSG_INSTANCED_PARAM_DEPRECATED","ERR_MODEL_PARAMS","LOG_DRAW_PRIORITY","DEPRECATED_PICKING_UNIFORMS","Model","gl","opts","init","vs","fs","modules","defines","moduleSettings","defaultUniforms","program","shaderCache","isInstanced","instanced","vertexCount","undefined","instanceCount","drawMode","uniforms","attributes","geometry","pickable","pick","render","onBeforeRender","onAfterRender","varyings","bufferMode","SEPARATE_ATTRIBS","timerQueryEnabled","_initializeProgram","Object","assign","setUniforms","getModuleUniforms","console","warn","buffers","samplers","userData","drawParams","dynamic","needsRedraw","setGeometry","setAttributes","Boolean","Number","isFinite","isSupported","timer","timeElapsedQuery","lastQueryReturned","stats","accumulatedFrameTime","averageFrameTime","profileFrameCount","delete","id","redraw","clearRedrawFlags","getNeedsRedraw","getVertexCount","_createBuffersFromAttributeDescriptors","getAttributes","setNeedsRedraw","somethingChanged","key","parameters","settings","framebuffer","vertexArray","transformFeedback","deprecated","updateModuleSettings","priority","message","resolvedUniforms","addViewUniforms","group","collapsed","setProgramState","_logAttributesAndUniforms","isIndexed","indexType","_timerQueryStart","draw","_timerQueryEnd","unsetProgramState","groupEnd","use","setBuffers","checkAttributeBindings","unsetBuffers","camera","viewMatrix","modelMatrix","cameraUniforms","getUniforms","viewUniforms","getCoordinateUniforms","assembleResult","getProgram","forEach","uniform","beginTimeElapsedQuery","end","isResultAvailable","elapsedTime","getResult","lastFrameTime","attributeName","attribute","isGeneric","value","target","ELEMENT_ARRAY_BUFFER","ARRAY_BUFFER","buffer","setData","data","setDataLayout","attributeTable","_getAttributesTable","header","table","unusedTable","unusedCount","undefinedOnly","count","attributeLocations","_attributeLocations","location","_getAttributeEntry","round","Math","num","type","size","verts","bytes","layout","length","BYTES_PER_ELEMENT","constructor","name","String","replace","isInteger","indexOf","varyingMap"],"mappings":"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","sourcesContent":["/* eslint quotes: [\"error\", \"single\", { \"allowTemplateLiterals\": true }]*/\n// A scenegraph object node\nimport {GL, Buffer, Program, checkUniformValues, isWebGL} from '../webgl';\nimport {getUniformsTable, areUniformsEqual} from '../webgl/uniforms';\nimport Query from '../webgl/query';\nimport {getDrawMode} from '../geometry/geometry';\nimport Object3D from '../core/object-3d';\nimport {MODULAR_SHADERS} from '../shadertools/shaders';\nimport {assembleShaders} from '../shadertools';\nimport {addModel, removeModel, logModel, getOverrides} from '../debug/seer-integration';\nimport {log, formatValue, isObjectEmpty} from '../utils';\nimport assert from '../utils/assert';\n\nconst MSG_INSTANCED_PARAM_DEPRECATED = `\\\nWarning: Model constructor: parameter \"instanced\" renamed to \"isInstanced\".\nThis will become a hard error in a future version of luma.gl.`;\n\nconst ERR_MODEL_PARAMS = 'Model needs drawMode and vertexCount';\n\nconst LOG_DRAW_PRIORITY = 2;\n\n// These old picking uniforms should be avoided and we should use picking module\n// and set uniforms using Model class 'updateModuleSettings()'\nconst DEPRECATED_PICKING_UNIFORMS = ['renderPickingBuffer', 'pickingEnabled'];\n\n// Model abstract O3D Class\nexport default class Model extends Object3D {\n  constructor(gl, opts = {}) {\n    super(opts);\n    assert(isWebGL(gl));\n    this.gl = gl;\n    this.init(opts);\n  }\n\n  /* eslint-disable max-statements  */\n  /* eslint-disable complexity  */\n  init({\n    vs = null,\n    fs = null,\n\n    // 1: Modular shaders\n    modules = null,\n    defines = {},\n    moduleSettings = {},\n\n    // 2: Legacy shaders\n    defaultUniforms,\n\n    // 3: Pre-created program\n    program = null,\n\n    shaderCache = null,\n\n    isInstanced = false, // Enables instanced rendering\n    instanced, // deprecated\n    vertexCount = undefined,\n    instanceCount = 0,\n\n    // Extra uniforms and attributes (beyond geometry, material, camera)\n    drawMode,\n    uniforms = {},\n    attributes = {},\n    geometry = null,\n\n    // Picking\n    pickable = true,\n    pick = null,\n    render = null,\n    onBeforeRender = () => {},\n    onAfterRender = () => {},\n\n    // TransformFeedback\n    varyings = null,\n    bufferMode = GL.SEPARATE_ATTRIBS,\n\n    // Other opts\n    timerQueryEnabled = false\n  } = {}) {\n    this._initializeProgram({\n      vs,\n      fs,\n      modules,\n      defines,\n      moduleSettings,\n      defaultUniforms,\n      program,\n      shaderCache,\n      varyings,\n      bufferMode\n    });\n\n    this.uniforms = {};\n\n    // Make sure we have some reasonable default uniforms in place\n    uniforms = Object.assign({}, this.program.defaultUniforms, uniforms);\n    this.setUniforms(uniforms);\n    // Get all default uniforms\n    this.setUniforms(this.getModuleUniforms());\n    // Get unforms for supplied parameters\n    this.setUniforms(this.getModuleUniforms(moduleSettings));\n\n    if (instanced) {\n      /* global console */\n      /* eslint-disable no-console */\n      console.warn(MSG_INSTANCED_PARAM_DEPRECATED);\n      isInstanced = isInstanced || instanced;\n    }\n\n    // TODO - remove?\n    this.buffers = {};\n    this.samplers = {};\n    this.userData = {};\n    this.drawParams = {};\n    this.dynamic = false;\n    this.needsRedraw = true;\n\n    // Attributes and buffers\n    if (geometry) {\n      this.setGeometry(geometry);\n    }\n\n    this.attributes = {};\n    this.setAttributes(attributes);\n\n    // geometry might have set drawMode and vertexCount\n    if (drawMode !== undefined) {\n      this.drawMode = getDrawMode(drawMode);\n    }\n    if (vertexCount !== undefined) {\n      this.vertexCount = vertexCount;\n    }\n    this.isInstanced = isInstanced;\n    this.instanceCount = instanceCount;\n\n    // picking options\n    this.pickable = Boolean(pickable);\n    this.pick = pick || (() => false);\n\n    this.onBeforeRender = onBeforeRender;\n    this.onAfterRender = onAfterRender;\n\n    // assert(program || program instanceof Program);\n    assert(this.drawMode !== undefined && Number.isFinite(this.vertexCount), ERR_MODEL_PARAMS);\n\n    this.timerQueryEnabled = timerQueryEnabled && Query.isSupported(this.gl, {timer: true});\n    this.timeElapsedQuery = undefined;\n    this.lastQueryReturned = true;\n\n    this.stats = {\n      accumulatedFrameTime: 0,\n      averageFrameTime: 0,\n      profileFrameCount: 0\n    };\n  }\n  /* eslint-enable max-statements */\n\n  delete() {\n    this.program.delete();\n    removeModel(this.id);\n  }\n\n  destroy() {\n    this.delete();\n  }\n\n  setNeedsRedraw(redraw = true) {\n    this.needsRedraw = redraw;\n    return this;\n  }\n\n  getNeedsRedraw({clearRedrawFlags = false} = {}) {\n    let redraw = false;\n    redraw = redraw || this.needsRedraw;\n    this.needsRedraw = this.needsRedraw && !clearRedrawFlags;\n    if (this.geometry) {\n      redraw = redraw || this.geometry.getNeedsRedraw({clearRedrawFlags});\n    }\n    return redraw;\n  }\n\n  setDrawMode(drawMode) {\n    this.drawMode = getDrawMode(drawMode);\n    return this;\n  }\n\n  getDrawMode() {\n    return this.drawMode;\n  }\n\n  setVertexCount(vertexCount) {\n    assert(Number.isFinite(vertexCount));\n    this.vertexCount = vertexCount;\n    return this;\n  }\n\n  getVertexCount() {\n    return this.vertexCount;\n  }\n\n  setInstanceCount(instanceCount) {\n    assert(Number.isFinite(instanceCount));\n    this.instanceCount = instanceCount;\n    return this;\n  }\n\n  getInstanceCount() {\n    return this.instanceCount;\n  }\n\n  getProgram() {\n    return this.program;\n  }\n\n  get varyingMap() {\n    return this.program.varyingMap;\n  }\n\n  // TODO - just set attributes, don't hold on to geometry\n  setGeometry(geometry) {\n    this.geometry = geometry;\n    this.vertexCount = geometry.getVertexCount();\n    this.drawMode = geometry.drawMode;\n    this._createBuffersFromAttributeDescriptors(this.geometry.getAttributes());\n    this.setNeedsRedraw();\n    return this;\n  }\n\n  getAttributes() {\n    return this.attributes;\n  }\n\n  setAttributes(attributes = {}) {\n    // Reutrn early if no attributes to set.\n    if (isObjectEmpty(attributes)) {\n      return this;\n    }\n\n    Object.assign(this.attributes, attributes);\n    this._createBuffersFromAttributeDescriptors(attributes);\n    this.setNeedsRedraw();\n\n    return this;\n  }\n\n  getUniforms() {\n    return this.uniforms;\n  }\n\n  // TODO - should actually set the uniforms\n  setUniforms(uniforms = {}) {\n    // TODO: we are still setting these uniforms in deck.gl so we don't break any external\n    // application, these are marked deprecated in 5.0, remove them in deck.gl in 6.0.\n    // Disabling since it gets too noisy in console, these are documented as deprecated.\n    // this._checkForDeprecatedUniforms(uniforms);\n    let somethingChanged = false;\n    for (const key in uniforms) {\n      if (!areUniformsEqual(this.uniforms[key], uniforms[key])) {\n        somethingChanged = true;\n        break;\n      }\n    }\n\n    if (somethingChanged) {\n      checkUniformValues(uniforms, this.id);\n      Object.assign(this.uniforms, uniforms);\n      this.setNeedsRedraw();\n    }\n    return this;\n  }\n\n  // getModuleUniforms (already on object)\n\n  updateModuleSettings(opts) {\n    const uniforms = this.getModuleUniforms(opts);\n    return this.setUniforms(uniforms);\n  }\n\n  draw({\n    moduleSettings = null,\n    uniforms = {},\n    attributes = {},\n    samplers = {},\n    parameters = {},\n    settings,\n    framebuffer = null,\n    vertexArray = null,\n    transformFeedback = null\n  } = {}) {\n    if (settings) {\n      log.deprecated('settings', 'parameters')();\n      parameters = settings;\n    }\n\n    if (moduleSettings) {\n      this.updateModuleSettings(moduleSettings);\n    }\n\n    if (framebuffer) {\n      parameters = Object.assign(parameters, {framebuffer});\n    }\n\n    this.render(uniforms, attributes, samplers, transformFeedback, parameters, vertexArray);\n\n    if (framebuffer) {\n      framebuffer.log({priority: LOG_DRAW_PRIORITY, message: `Rendered to ${framebuffer.id}`});\n    }\n\n    return this;\n  }\n\n  /* eslint-disable max-params  */\n  render(\n    uniforms = {},\n    attributes = {},\n    samplers = {},\n    transformFeedback = null,\n    parameters = {},\n    vertexArray = null\n  ) {\n    addModel(this);\n\n    const resolvedUniforms = this.addViewUniforms(uniforms);\n    getOverrides(this.id, resolvedUniforms);\n\n    this.setUniforms(resolvedUniforms);\n    this.setAttributes(attributes);\n    Object.assign(this.samplers, samplers);\n\n    log.group(LOG_DRAW_PRIORITY,\n      `>>> RENDERING MODEL ${this.id}`, {collapsed: log.priority <= 2})();\n\n    this.setProgramState({vertexArray});\n\n    this._logAttributesAndUniforms(2, resolvedUniforms);\n\n    this.onBeforeRender();\n\n    const drawParams = this.drawParams;\n    if (drawParams.isInstanced && !this.isInstanced) {\n      log.warn('Found instanced attributes on non-instanced model')();\n    }\n    const {isIndexed, indexType} = drawParams;\n    const {isInstanced, instanceCount} = this;\n\n    this._timerQueryStart();\n\n    this.program.draw({\n      parameters,\n      drawMode: this.getDrawMode(),\n      vertexCount: this.getVertexCount(),\n      vertexArray,\n      transformFeedback,\n      isIndexed,\n      indexType,\n      isInstanced,\n      instanceCount\n    });\n\n    this._timerQueryEnd();\n\n    this.onAfterRender();\n\n    this.unsetProgramState();\n\n    this.setNeedsRedraw(false);\n\n    log.groupEnd(LOG_DRAW_PRIORITY, `>>> RENDERING MODEL ${this.id}`)();\n\n    return this;\n  }\n  /* eslint-enable max-params  */\n\n  setProgramState({vertexArray = null} = {}) {\n    const {program} = this;\n    program.use();\n    this.drawParams = {};\n    program.setBuffers(this.buffers, {drawParams: this.drawParams});\n    program.checkAttributeBindings({vertexArray});\n    program.setUniforms(this.uniforms, this.samplers);\n    return this;\n  }\n\n  unsetProgramState() {\n    // Ensures all vertex attributes are disabled and ELEMENT_ARRAY_BUFFER\n    // is unbound\n    this.program.unsetBuffers();\n    return this;\n  }\n\n  // DEPRECATED METHODS\n\n  // TODO - uniform names are too strongly linked camera <=> default shaders\n  // At least all special handling is collected here.\n  addViewUniforms(uniforms) {\n    // TODO - special treatment of these parameters should be removed\n    const {camera, viewMatrix, modelMatrix} = uniforms;\n    // Camera exposes uniforms that can be used directly in shaders\n    const cameraUniforms = camera ? camera.getUniforms() : {};\n\n    const viewUniforms = viewMatrix ?\n      this.getCoordinateUniforms(viewMatrix, modelMatrix) : {};\n\n    return Object.assign({}, uniforms, cameraUniforms, viewUniforms);\n  }\n\n  // PRIVATE METHODS\n\n  _initializeProgram({\n    vs,\n    fs,\n    modules,\n    defines,\n    moduleSettings,\n    defaultUniforms,\n    program,\n    shaderCache,\n    varyings,\n    bufferMode\n  }) {\n\n    this.getModuleUniforms = x => {};\n\n    if (!program) {\n      // Assign default shaders if none are provided\n      if (!vs) {\n        vs = MODULAR_SHADERS.vs;\n      }\n      if (!fs) {\n        fs = MODULAR_SHADERS.fs;\n      }\n\n      const assembleResult = assembleShaders(this.gl, {vs, fs, modules, defines});\n      ({vs, fs} = assembleResult);\n\n      if (shaderCache) {\n        program = shaderCache.getProgram(this.gl, {vs, fs, id: this.id});\n      } else {\n        program = new Program(this.gl, {vs, fs, varyings, bufferMode});\n      }\n\n      const {getUniforms} = assembleResult;\n      this.getModuleUniforms = getUniforms || (x => {});\n    }\n\n    this.program = program;\n    assert(this.program instanceof Program, 'Model needs a program');\n  }\n  /* eslint-enable complexity */\n\n  _checkForDeprecatedUniforms(uniforms) {\n    // deprecated picking uniforms\n    DEPRECATED_PICKING_UNIFORMS.forEach((uniform) => {\n      if (uniform in uniforms) {\n        log.deprecated(uniform,\n          'use picking shader module and Model class updateModuleSettings()')();\n      }\n    });\n  }\n\n  _timerQueryStart() {\n    if (this.timerQueryEnabled === true) {\n      if (!this.timeElapsedQuery) {\n        this.timeElapsedQuery = new Query(this.gl);\n      }\n      if (this.lastQueryReturned) {\n        this.lastQueryReturned = false;\n        this.timeElapsedQuery.beginTimeElapsedQuery();\n      }\n    }\n  }\n\n  _timerQueryEnd() {\n    if (this.timerQueryEnabled === true) {\n      this.timeElapsedQuery.end();\n      // TODO: Skip results if 'gl.getParameter(this.ext.GPU_DISJOINT_EXT)' returns false\n      // should this be incorporated into Query object?\n      if (this.timeElapsedQuery.isResultAvailable()) {\n        this.lastQueryReturned = true;\n        const elapsedTime = this.timeElapsedQuery.getResult();\n\n        // Update stats (e.g. for seer)\n        this.stats.lastFrameTime = elapsedTime;\n        this.stats.accumulatedFrameTime += elapsedTime;\n        this.stats.profileFrameCount++;\n        this.stats.averageFrameTime =\n          this.stats.accumulatedFrameTime / this.stats.profileFrameCount;\n\n        // Log stats\n        log.log(LOG_DRAW_PRIORITY, `\\\nGPU time ${this.program.id}: ${this.stats.lastFrameTime}ms \\\naverage ${this.stats.averageFrameTime}ms \\\naccumulated: ${this.stats.accumulatedFrameTime}ms \\\ncount: ${this.stats.profileFrameCount}`\n        )();\n      }\n    }\n  }\n\n  // Makes sure buffers are created for all attributes\n  // and that the program is updated with those buffers\n  // TODO - do we need the separation between \"attributes\" and \"buffers\"\n  // couldn't apps just create buffers directly?\n  _createBuffersFromAttributeDescriptors(attributes) {\n    const {program: {gl}} = this;\n\n    for (const attributeName in attributes) {\n      const attribute = attributes[attributeName];\n\n      if (attribute instanceof Buffer) {\n        this.buffers[attributeName] = attribute;\n      } else if (attribute.isGeneric) {\n        this.buffers[attributeName] = attribute.value;\n      } else {\n        // Autocreate a buffer\n        this.buffers[attributeName] =\n          this.buffers[attributeName] || new Buffer(gl, {\n            target: attribute.isIndexed ? GL.ELEMENT_ARRAY_BUFFER : GL.ARRAY_BUFFER\n          });\n\n        const buffer = this.buffers[attributeName];\n        buffer\n          .setData({data: attribute.value})\n          .setDataLayout(attribute);\n      }\n    }\n\n    return this;\n  }\n\n  _logAttributesAndUniforms(priority, uniforms = {}) {\n    if (log.priority >= priority) {\n      const attributeTable = this._getAttributesTable({\n        header: `${this.id} attributes`,\n        program: this.program,\n        attributes: Object.assign(\n          {},\n          this.geometry && this.geometry.attributes,\n          this.attributes\n        )\n      });\n      log.table(priority, attributeTable)();\n\n      const {table, unusedTable, unusedCount} = getUniformsTable({\n        header: `${this.id} uniforms`,\n        program: this.program,\n        uniforms: Object.assign({}, this.uniforms, uniforms)\n      });\n\n      log.table(priority, table)();\n      log.log(priority, `${unusedCount || 'No'} unused uniforms `, unusedTable)();\n    } else {\n      // Always log missing uniforms\n      const {table, count} = getUniformsTable({\n        header: `${this.id} uniforms`,\n        program: this.program,\n        uniforms: Object.assign({}, this.uniforms, uniforms),\n        undefinedOnly: true\n      });\n      if (count > 0) {\n        log.table(priority, table)();\n      }\n    }\n\n    logModel(this, uniforms);\n  }\n\n  // Todo move to attributes manager\n  _getAttributesTable({\n    attributes,\n    header = 'Attributes',\n    instanced,\n    program\n  } = {}) {\n    assert(program);\n    const attributeLocations = program._attributeLocations;\n    const table = {}; // {[header]: {}};\n\n    // Add used attributes\n    for (const attributeName in attributeLocations) {\n      const attribute = attributes[attributeName];\n      const location = attributeLocations[attributeName];\n      table[attributeName] = this._getAttributeEntry(attribute, location, header);\n    }\n\n    // Add any unused attributes\n    for (const attributeName in attributes) {\n      const attribute = attributes[attributeName];\n      if (!table[attributeName]) {\n        table[attributeName] = this._getAttributeEntry(attribute, null, header);\n      }\n    }\n\n    return table;\n  }\n\n  _getAttributeEntry(attribute, location, header) {\n    const round = num => Math.round(num * 10) / 10;\n\n    let type = 'NOT PROVIDED';\n    let instanced = 0;\n    let size = 'N/A';\n    let verts = 'N/A';\n    let bytes = 'N/A';\n    let value = 'N/A';\n\n    if (attribute && location === null) {\n      location = attribute.isIndexed ? 'ELEMENT_ARRAY_BUFFER' : 'NOT USED';\n    }\n\n    if (attribute instanceof Buffer) {\n      const buffer = attribute;\n      type = buffer.layout.type;\n      instanced = buffer.layout.instanced;\n      size = buffer.layout.size;\n      verts = round(buffer.data.length / buffer.layout.size);\n      bytes = buffer.data.length * buffer.data.BYTES_PER_ELEMENT;\n    } else if (attribute) {\n      type = attribute.value.constructor.name;\n      instanced = attribute.instanced;\n      size = attribute.size;\n      verts = round(attribute.value.length / attribute.size);\n      bytes = attribute.value.length * attribute.value.BYTES_PER_ELEMENT;\n      value = attribute.value;\n    }\n\n    // Generate a type name by dropping Array from Float32Array etc.\n    type = String(type).replace('Array', '');\n    // Look for 'nt' to detect integer types, e.g. Int32Array, Uint32Array\n    const isInteger = type.indexOf('nt') !== -1;\n\n    return {\n      [header]: formatValue(value, {size, isInteger}),\n      'Memory Size and Layout':\n        `${instanced ? 'I ' : 'P '} ${verts} (x${size}=${bytes}bytes ${type}) loc=${location}`\n    };\n  }\n\n  // DEPRECATED / REMOVED\n  isPickable() {\n    return this.pickable;\n  }\n\n  setPickable(pickable = true) {\n    this.pickable = Boolean(pickable);\n    return this;\n  }\n\n  getGeometry() {\n    return this.geometry;\n  }\n}\n"],"file":"model.js"}