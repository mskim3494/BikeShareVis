{"version":3,"sources":["../../../../src/core/transitions/linear-interpolator.js"],"names":["TransitionInterpolator","isValid","getEndValueByShortestPath","lerp","assert","VIEWPORT_TRANSITION_PROPS","LinearInterpolator","constructor","transitionProps","propNames","initializeProps","startProps","endProps","startViewStateProps","endViewStateProps","key","startValue","endValue","start","end","interpolateProps","t","viewport"],"mappings":"AAAA,OAAOA,sBAAP,MAAmC,2BAAnC;AACA,SAAQC,OAAR,EAAiBC,yBAAjB,QAAiD,oBAAjD;AACA,SAAQC,IAAR,QAAmB,uBAAnB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AAEA,MAAMC,4BAA4B,CAAC,WAAD,EAAc,UAAd,EAA0B,MAA1B,EAAkC,SAAlC,EAA6C,OAA7C,CAAlC;AAEA;;;;AAGA,eAAe,MAAMC,kBAAN,SAAiCN,sBAAjC,CAAwD;AACrE;;;AAGAO,cAAYC,kBAAkBH,yBAA9B,EAAyD;AACvD;AACA,SAAKI,SAAL,GAAiBD,eAAjB;AACD;;AAEDE,kBAAgBC,UAAhB,EAA4BC,QAA5B,EAAsC;AACpC,UAAMC,sBAAsB,EAA5B;AACA,UAAMC,oBAAoB,EAA1B;;AAEA,SAAK,MAAMC,GAAX,IAAkB,KAAKN,SAAvB,EAAkC;AAChC,YAAMO,aAAaL,WAAWI,GAAX,CAAnB;AACA,YAAME,WAAWL,SAASG,GAAT,CAAjB;AACAX,aAAOH,QAAQe,UAAR,KAAuBf,QAAQgB,QAAR,CAA9B,EAAkD,GAAEF,GAAI,kCAAxD;AAEAF,0BAAoBE,GAApB,IAA2BC,UAA3B;AACAF,wBAAkBC,GAAlB,IAAyBb,0BAA0Ba,GAA1B,EAA+BC,UAA/B,EAA2CC,QAA3C,CAAzB;AACD;;AAED,WAAO;AACLC,aAAOL,mBADF;AAELM,WAAKL;AAFA,KAAP;AAID;;AAEDM,mBAAiBT,UAAjB,EAA6BC,QAA7B,EAAuCS,CAAvC,EAA0C;AACxC,UAAMC,WAAW,EAAjB;;AACA,SAAK,MAAMP,GAAX,IAAkB,KAAKN,SAAvB,EAAkC;AAChCa,eAASP,GAAT,IAAgBZ,KAAKQ,WAAWI,GAAX,CAAL,EAAsBH,SAASG,GAAT,CAAtB,EAAqCM,CAArC,CAAhB;AACD;;AACD,WAAOC,QAAP;AACD;;AAlCoE","sourcesContent":["import TransitionInterpolator from './transition-interpolator';\nimport {isValid, getEndValueByShortestPath} from './transition-utils';\nimport {lerp} from './../utils/math-utils';\nimport assert from '../utils/assert';\n\nconst VIEWPORT_TRANSITION_PROPS = ['longitude', 'latitude', 'zoom', 'bearing', 'pitch'];\n\n/**\n * Performs linear interpolation of two view states.\n */\nexport default class LinearInterpolator extends TransitionInterpolator {\n  /**\n   * @param {Array} transitionProps - list of props to apply linear transition to.\n   */\n  constructor(transitionProps = VIEWPORT_TRANSITION_PROPS) {\n    super();\n    this.propNames = transitionProps;\n  }\n\n  initializeProps(startProps, endProps) {\n    const startViewStateProps = {};\n    const endViewStateProps = {};\n\n    for (const key of this.propNames) {\n      const startValue = startProps[key];\n      const endValue = endProps[key];\n      assert(isValid(startValue) && isValid(endValue), `${key} must be supplied for transition`);\n\n      startViewStateProps[key] = startValue;\n      endViewStateProps[key] = getEndValueByShortestPath(key, startValue, endValue);\n    }\n\n    return {\n      start: startViewStateProps,\n      end: endViewStateProps\n    };\n  }\n\n  interpolateProps(startProps, endProps, t) {\n    const viewport = {};\n    for (const key of this.propNames) {\n      viewport[key] = lerp(startProps[key], endProps[key], t);\n    }\n    return viewport;\n  }\n}\n"],"file":"linear-interpolator.js"}