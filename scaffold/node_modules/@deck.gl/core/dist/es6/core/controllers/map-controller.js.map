{"version":3,"sources":["../../../../src/core/controllers/map-controller.js"],"names":["MapControls","MAPBOX_LIMITS","EventManager","PREFIX","CURSOR","GRABBING","GRAB","POINTER","getDefaultCursor","isDragging","getPropTypes","PropTypes","width","number","isRequired","height","longitude","latitude","zoom","bearing","pitch","altitude","maxZoom","minZoom","maxPitch","minPitch","onViewportChange","func","onViewStateChange","scrollZoom","bool","dragPan","dragRotate","doubleClickZoom","touchZoomRotate","getCursor","controls","shape","events","arrayOf","string","handleEvent","defaultProps","Object","assign","MapController","constructor","props","state","canvas","eventManager","_eventManager","_controls","setOptions","onStateChange","_onInteractiveStateChange","bind","setProps","finalize","destroy","style","cursor","displayName"],"mappings":"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","sourcesContent":["import MapControls from '../controllers/map-controls';\nimport {MAPBOX_LIMITS} from '../controllers/map-state';\nimport {EventManager} from 'mjolnir.js';\n\nconst PREFIX = '-webkit-';\n\nconst CURSOR = {\n  GRABBING: `${PREFIX}grabbing`,\n  GRAB: `${PREFIX}grab`,\n  POINTER: 'pointer'\n};\n\nconst getDefaultCursor = ({isDragging}) => (isDragging ? CURSOR.GRABBING : CURSOR.GRAB);\n\nfunction getPropTypes(PropTypes) {\n  return {\n    width: PropTypes.number.isRequired /** The width of the map. */,\n    height: PropTypes.number.isRequired /** The height of the map. */,\n    longitude: PropTypes.number.isRequired /** The longitude of the center of the map. */,\n    latitude: PropTypes.number.isRequired /** The latitude of the center of the map. */,\n    zoom: PropTypes.number.isRequired /** The tile zoom level of the map. */,\n    bearing: PropTypes.number /** Specify the bearing of the viewport */,\n    pitch: PropTypes.number /** Specify the pitch of the viewport */,\n    // Note: Non-public API, see https://github.com/mapbox/mapbox-gl-js/issues/1137\n    altitude: PropTypes.number /** Altitude of the viewport camera. Default 1.5 \"screen heights\" */,\n\n    /** Viewport constraints */\n    maxZoom: PropTypes.number, // Max zoom level\n    minZoom: PropTypes.number, // Min zoom level\n    maxPitch: PropTypes.number, // Max pitch in degrees\n    minPitch: PropTypes.number, // Min pitch in degrees\n\n    /**\n     * `onViewportChange` callback is fired when the user interacted with the\n     * map. The object passed to the callback contains viewport properties\n     * such as `longitude`, `latitude`, `zoom` etc.\n     */\n    onViewportChange: PropTypes.func,\n    onViewStateChange: PropTypes.func,\n\n    /** Enables control event handling */\n    scrollZoom: PropTypes.bool, // Scroll to zoom\n    dragPan: PropTypes.bool, // Drag to pan\n    dragRotate: PropTypes.bool, // Drag to rotate\n    doubleClickZoom: PropTypes.bool, // Double click to zoom\n    touchZoomRotate: PropTypes.bool, // Pinch to zoom / rotate\n\n    /** Accessor that returns a cursor style to show interactive state */\n    getCursor: PropTypes.func,\n\n    // A map control instance to replace the default map controls\n    // The object must expose one property: `events` as an array of subscribed\n    // event names; and two methods: `setState(state)` and `handle(event)`\n    controls: PropTypes.shape({\n      events: PropTypes.arrayOf(PropTypes.string),\n      handleEvent: PropTypes.func\n    })\n  };\n}\n\nconst defaultProps = Object.assign({}, MAPBOX_LIMITS, {\n  scrollZoom: true,\n  dragPan: true,\n  dragRotate: true,\n  doubleClickZoom: true,\n  touchZoomRotate: true,\n  getCursor: getDefaultCursor\n});\n\nexport default class MapController {\n  constructor(props) {\n    props = Object.assign({}, defaultProps, props);\n\n    this.props = props;\n    this.state = {\n      isDragging: false // Whether the cursor is down\n    };\n\n    this.canvas = props.canvas;\n\n    const eventManager = new EventManager(this.canvas);\n\n    this._eventManager = eventManager;\n\n    // If props.controls is not provided, fallback to default MapControls instance\n    // Cannot use defaultProps here because it needs to be per map instance\n    this._controls = this.props.controls || new MapControls();\n    this._controls.setOptions(\n      Object.assign({}, this.props, {\n        onStateChange: this._onInteractiveStateChange.bind(this),\n        eventManager\n      })\n    );\n  }\n\n  setProps(props) {\n    props = Object.assign({}, this.props, props);\n    this.props = props;\n\n    this._controls.setOptions(props);\n  }\n\n  finalize() {\n    this._eventManager.destroy();\n  }\n\n  _onInteractiveStateChange({isDragging = false}) {\n    if (isDragging !== this.state.isDragging) {\n      this.state.isDragging = isDragging;\n      const {getCursor} = this.props;\n      this.canvas.style.cursor = getCursor(this.state);\n    }\n  }\n}\n\nMapController.displayName = 'MapController';\nMapController.defaultProps = defaultProps;\nMapController.getPropTypes = getPropTypes;\n"],"file":"map-controller.js"}