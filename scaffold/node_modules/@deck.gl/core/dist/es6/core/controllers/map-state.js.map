{"version":3,"sources":["../../../../src/core/controllers/map-state.js"],"names":["ViewState","WebMercatorViewport","normalizeViewportProps","assert","MAPBOX_LIMITS","minZoom","maxZoom","minPitch","maxPitch","DEFAULT_STATE","pitch","bearing","altitude","clamp","value","min","max","MapState","constructor","width","height","latitude","longitude","zoom","startPanLngLat","startZoomLngLat","startBearing","startPitch","startZoom","Number","isFinite","_interactiveState","getViewportProps","_viewportProps","getInteractiveState","panStart","pos","_getUpdatedState","_unproject","pan","startPos","_calculateNewLngLat","panEnd","rotateStart","rotate","deltaScaleX","deltaScaleY","_calculateNewPitchAndBearing","rotateEnd","zoomStart","scale","_calculateNewZoom","zoomedViewport","Object","assign","getLocationAtPoint","lngLat","zoomEnd","zoomIn","_zoomFromCenter","zoomOut","moveLeft","_panFromCenter","moveRight","moveUp","moveDown","rotateLeft","rotateRight","rotateUp","rotateDown","offset","newProps","_applyConstraints","props","viewport","unproject","getMapCenterByLngLatPosition","Math","log2"],"mappings":";;;;;;;;AAAA,OAAOA,SAAP,MAAsB,cAAtB;AACA,OAAOC,mBAAP,IAA6BC,sBAA7B,QAA0D,2BAA1D;AACA,OAAOC,MAAP,MAAmB,iBAAnB,C,CAEA;;AACA,OAAO,MAAMC,gBAAgB;AAC3BC,WAAS,CADkB;AAE3BC,WAAS,EAFkB;AAG3BC,YAAU,CAHiB;AAI3BC,YAAU;AAJiB,CAAtB;AAOP,MAAMC,gBAAgB;AACpBC,SAAO,CADa;AAEpBC,WAAS,CAFW;AAGpBC,YAAU;AAHU,CAAtB;AAMA;;AACA,SAASC,KAAT,CAAeC,KAAf,EAAsBC,GAAtB,EAA2BC,GAA3B,EAAgC;AAC9B,SAAOF,QAAQC,GAAR,GAAcA,GAAd,GAAoBD,QAAQE,GAAR,GAAcA,GAAd,GAAoBF,KAA/C;AACD;;AAED,eAAe,MAAMG,QAAN,SAAuBjB,SAAvB,CAAiC;AAC9CkB,cAAY;AACV;;AACA;AACAC,SAHU;;AAIV;AACAC,UALU;;AAMV;AACAC,YAPU;;AAQV;AACAC,aATU;;AAUV;AACAC,QAXU;;AAYV;AACAZ,cAAUF,cAAcE,OAbd;;AAcV;AACAD,YAAQD,cAAcC,KAfZ;;AAgBV;;;;;AAKAE,eAAWH,cAAcG,QArBf;;AAuBV;AACAN,cAAUF,cAAcE,OAxBd;AAyBVD,cAAUD,cAAcC,OAzBd;AA0BVG,eAAWJ,cAAcI,QA1Bf;AA2BVD,eAAWH,cAAcG,QA3Bf;;AA6BV;;AACA;AACAiB,kBA/BU;;AAgCV;AACAC,mBAjCU;;AAkCV;AACAC,gBAnCU;;AAoCV;AACAC,cArCU;;AAsCV;AACAC;AAvCU,MAwCR,EAxCJ,EAwCQ;AACNzB,WAAO0B,OAAOC,QAAP,CAAgBR,SAAhB,CAAP,EAAmC,8BAAnC;AACAnB,WAAO0B,OAAOC,QAAP,CAAgBT,QAAhB,CAAP,EAAkC,6BAAlC;AACAlB,WAAO0B,OAAOC,QAAP,CAAgBP,IAAhB,CAAP,EAA8B,yBAA9B;AAEA,UAAM;AACJJ,WADI;AAEJC,YAFI;AAGJC,cAHI;AAIJC,eAJI;AAKJC,UALI;AAMJZ,aANI;AAOJD,WAPI;AAQJE,cARI;AASJN,aATI;AAUJD,aAVI;AAWJG,cAXI;AAYJD;AAZI,KAAN;AAeA,SAAKwB,iBAAL,GAAyB;AACvBP,oBADuB;AAEvBC,qBAFuB;AAGvBC,kBAHuB;AAIvBC,gBAJuB;AAKvBC;AALuB,KAAzB;AAOD;AAED;;;AAEAI,qBAAmB;AACjB,WAAO,KAAKC,cAAZ;AACD;;AAEDC,wBAAsB;AACpB,WAAO,KAAKH,iBAAZ;AACD;AAED;;;;;;AAIAI,WAAS;AAACC;AAAD,GAAT,EAAgB;AACd,WAAO,KAAKC,gBAAL,CAAsB;AAC3Bb,sBAAgB,KAAKc,UAAL,CAAgBF,GAAhB;AADW,KAAtB,CAAP;AAGD;AAED;;;;;;;;AAMAG,MAAI;AAACH,OAAD;AAAMI;AAAN,GAAJ,EAAqB;AACnB,UAAMhB,iBAAiB,KAAKO,iBAAL,CAAuBP,cAAvB,IAAyC,KAAKc,UAAL,CAAgBE,QAAhB,CAAhE;;AAEA,QAAI,CAAChB,cAAL,EAAqB;AACnB,aAAO,IAAP;AACD;;AALkB,gCAOW,KAAKiB,mBAAL,CAAyB;AAACjB,oBAAD;AAAiBY;AAAjB,KAAzB,CAPX;AAAA;AAAA,UAOZd,SAPY;AAAA,UAODD,QAPC;;AASnB,WAAO,KAAKgB,gBAAL,CAAsB;AAC3Bf,eAD2B;AAE3BD;AAF2B,KAAtB,CAAP;AAID;AAED;;;;;;AAIAqB,WAAS;AACP,WAAO,KAAKL,gBAAL,CAAsB;AAC3Bb,sBAAgB;AADW,KAAtB,CAAP;AAGD;AAED;;;;;;AAIAmB,cAAY;AAACP;AAAD,GAAZ,EAAmB;AACjB,WAAO,KAAKC,gBAAL,CAAsB;AAC3BX,oBAAc,KAAKO,cAAL,CAAoBtB,OADP;AAE3BgB,kBAAY,KAAKM,cAAL,CAAoBvB;AAFL,KAAtB,CAAP;AAID;AAED;;;;;;;;;AAOAkC,SAAO;AAACC,kBAAc,CAAf;AAAkBC,kBAAc;AAAhC,GAAP,EAA2C;AAAA,8BACN,KAAKf,iBADC;AAAA,UAClCL,YADkC,qBAClCA,YADkC;AAAA,UACpBC,UADoB,qBACpBA,UADoB;;AAGzC,QAAI,CAACE,OAAOC,QAAP,CAAgBJ,YAAhB,CAAD,IAAkC,CAACG,OAAOC,QAAP,CAAgBH,UAAhB,CAAvC,EAAoE;AAClE,aAAO,IAAP;AACD;;AALwC,kCAOhB,KAAKoB,4BAAL,CAAkC;AACzDF,iBADyD;AAEzDC,iBAFyD;AAGzDpB,kBAHyD;AAIzDC;AAJyD,KAAlC,CAPgB;AAAA,UAOlCjB,KAPkC,yBAOlCA,KAPkC;AAAA,UAO3BC,OAP2B,yBAO3BA,OAP2B;;AAczC,WAAO,KAAK0B,gBAAL,CAAsB;AAC3B1B,aAD2B;AAE3BD;AAF2B,KAAtB,CAAP;AAID;AAED;;;;;;AAIAsC,cAAY;AACV,WAAO,KAAKX,gBAAL,CAAsB;AAC3BX,oBAAc,IADa;AAE3BC,kBAAY;AAFe,KAAtB,CAAP;AAID;AAED;;;;;;AAIAsB,YAAU;AAACb;AAAD,GAAV,EAAiB;AACf,WAAO,KAAKC,gBAAL,CAAsB;AAC3BZ,uBAAiB,KAAKa,UAAL,CAAgBF,GAAhB,CADU;AAE3BR,iBAAW,KAAKK,cAAL,CAAoBV;AAFJ,KAAtB,CAAP;AAID;AAED;;;;;;;;;;AAQAA,OAAK;AAACa,OAAD;AAAMI,YAAN;AAAgBU;AAAhB,GAAL,EAA6B;AAC3B/C,WAAO+C,QAAQ,CAAf,EAAkB,mCAAlB,EAD2B,CAG3B;;AAH2B,6BAIQ,KAAKnB,iBAJb;AAAA,QAItBH,SAJsB,sBAItBA,SAJsB;AAAA,QAIXH,eAJW,sBAIXA,eAJW;;AAM3B,QAAI,CAACI,OAAOC,QAAP,CAAgBF,SAAhB,CAAL,EAAiC;AAC/B;AACA;AACA;AACA;AACA;AACA;AACAA,kBAAY,KAAKK,cAAL,CAAoBV,IAAhC;AACAE,wBAAkB,KAAKa,UAAL,CAAgBE,QAAhB,KAA6B,KAAKF,UAAL,CAAgBF,GAAhB,CAA/C;AACD,KAf0B,CAiB3B;;;AACAjC,WACEsB,eADF,EAEE,wCACE,2DAHJ;;AAMA,UAAMF,OAAO,KAAK4B,iBAAL,CAAuB;AAACD,WAAD;AAAQtB;AAAR,KAAvB,CAAb;;AAEA,UAAMwB,iBAAiB,IAAInD,mBAAJ,CAAwBoD,OAAOC,MAAP,CAAc,EAAd,EAAkB,KAAKrB,cAAvB,EAAuC;AAACV;AAAD,KAAvC,CAAxB,CAAvB;;AA1B2B,kCA2BG6B,eAAeG,kBAAf,CAAkC;AAACC,cAAQ/B,eAAT;AAA0BW;AAA1B,KAAlC,CA3BH;AAAA;AAAA,UA2BpBd,SA3BoB;AAAA,UA2BTD,QA3BS;;AA6B3B,WAAO,KAAKgB,gBAAL,CAAsB;AAC3Bd,UAD2B;AAE3BD,eAF2B;AAG3BD;AAH2B,KAAtB,CAAP;AAKD;AAED;;;;;;AAIAoC,YAAU;AACR,WAAO,KAAKpB,gBAAL,CAAsB;AAC3BZ,uBAAiB,IADU;AAE3BG,iBAAW;AAFgB,KAAtB,CAAP;AAID;;AAED8B,WAAS;AACP,WAAO,KAAKC,eAAL,CAAqB,CAArB,CAAP;AACD;;AAEDC,YAAU;AACR,WAAO,KAAKD,eAAL,CAAqB,GAArB,CAAP;AACD;;AAEDE,aAAW;AACT,WAAO,KAAKC,cAAL,CAAoB,CAAC,GAAD,EAAM,CAAN,CAApB,CAAP;AACD;;AAEDC,cAAY;AACV,WAAO,KAAKD,cAAL,CAAoB,CAAC,CAAC,GAAF,EAAO,CAAP,CAApB,CAAP;AACD;;AAEDE,WAAS;AACP,WAAO,KAAKF,cAAL,CAAoB,CAAC,CAAD,EAAI,GAAJ,CAApB,CAAP;AACD;;AAEDG,aAAW;AACT,WAAO,KAAKH,cAAL,CAAoB,CAAC,CAAD,EAAI,CAAC,GAAL,CAApB,CAAP;AACD;;AAEDI,eAAa;AACX,WAAO,KAAK7B,gBAAL,CAAsB;AAC3B1B,eAAS,KAAKsB,cAAL,CAAoBtB,OAApB,GAA8B;AADZ,KAAtB,CAAP;AAGD;;AAEDwD,gBAAc;AACZ,WAAO,KAAK9B,gBAAL,CAAsB;AAC3B1B,eAAS,KAAKsB,cAAL,CAAoBtB,OAApB,GAA8B;AADZ,KAAtB,CAAP;AAGD;;AAEDyD,aAAW;AACT,WAAO,KAAK/B,gBAAL,CAAsB;AAC3B3B,aAAO,KAAKuB,cAAL,CAAoBvB,KAApB,GAA4B;AADR,KAAtB,CAAP;AAGD;;AAED2D,eAAa;AACX,WAAO,KAAKhC,gBAAL,CAAsB;AAC3B3B,aAAO,KAAKuB,cAAL,CAAoBvB,KAApB,GAA4B;AADR,KAAtB,CAAP;AAGD;AAED;;;AAEAiD,kBAAgBT,KAAhB,EAAuB;AAAA,2BACG,KAAKjB,cADR;AAAA,UACdd,KADc,kBACdA,KADc;AAAA,UACPC,MADO,kBACPA,MADO;AAErB,WAAO,KAAKG,IAAL,CAAU;AACfa,WAAK,CAACjB,QAAQ,CAAT,EAAYC,SAAS,CAArB,CADU;AAEf8B;AAFe,KAAV,CAAP;AAID;;AAEDY,iBAAeQ,MAAf,EAAuB;AAAA,4BACG,KAAKrC,cADR;AAAA,UACdd,KADc,mBACdA,KADc;AAAA,UACPC,MADO,mBACPA,MADO;AAErB,WAAO,KAAKmB,GAAL,CAAS;AACdC,gBAAU,CAACrB,QAAQ,CAAT,EAAYC,SAAS,CAArB,CADI;AAEdgB,WAAK,CAACjB,QAAQ,CAAR,GAAYmD,OAAO,CAAP,CAAb,EAAwBlD,SAAS,CAAT,GAAakD,OAAO,CAAP,CAArC;AAFS,KAAT,CAAP;AAID;;AAEDjC,mBAAiBkC,QAAjB,EAA2B;AACzB;AACA,WAAO,IAAItD,QAAJ,CAAaoC,OAAOC,MAAP,CAAc,EAAd,EAAkB,KAAKrB,cAAvB,EAAuC,KAAKF,iBAA5C,EAA+DwC,QAA/D,CAAb,CAAP;AACD,GAjT6C,CAmT9C;;;AACAC,oBAAkBC,KAAlB,EAAyB;AACvB;AADuB,UAEhBnE,OAFgB,GAEUmE,KAFV,CAEhBnE,OAFgB;AAAA,UAEPD,OAFO,GAEUoE,KAFV,CAEPpE,OAFO;AAAA,UAEEkB,IAFF,GAEUkD,KAFV,CAEElD,IAFF;AAGvBkD,UAAMlD,IAAN,GAAaV,MAAMU,IAAN,EAAYlB,OAAZ,EAAqBC,OAArB,CAAb,CAHuB,CAKvB;;AALuB,UAMhBE,QANgB,GAMaiE,KANb,CAMhBjE,QANgB;AAAA,UAMND,QANM,GAMakE,KANb,CAMNlE,QANM;AAAA,UAMIG,KANJ,GAMa+D,KANb,CAMI/D,KANJ;AAOvB+D,UAAM/D,KAAN,GAAcG,MAAMH,KAAN,EAAaH,QAAb,EAAuBC,QAAvB,CAAd;AAEA6C,WAAOC,MAAP,CAAcmB,KAAd,EAAqBvE,uBAAuBuE,KAAvB,CAArB;AAEA,WAAOA,KAAP;AACD;;AAEDnC,aAAWF,GAAX,EAAgB;AACd,UAAMsC,WAAW,IAAIzE,mBAAJ,CAAwB,KAAKgC,cAA7B,CAAjB;AACA,WAAOG,OAAOsC,SAASC,SAAT,CAAmBvC,GAAnB,CAAd;AACD,GArU6C,CAuU9C;;;AACAK,sBAAoB;AAACjB,kBAAD;AAAiBY;AAAjB,GAApB,EAA2C;AACzC,UAAMsC,WAAW,IAAIzE,mBAAJ,CAAwB,KAAKgC,cAA7B,CAAjB;AACA,WAAOyC,SAASE,4BAAT,CAAsC;AAACpB,cAAQhC,cAAT;AAAyBY;AAAzB,KAAtC,CAAP;AACD,GA3U6C,CA6U9C;;;AACAe,oBAAkB;AAACD,SAAD;AAAQtB;AAAR,GAAlB,EAAsC;AAAA,4BACT,KAAKK,cADI;AAAA,UAC7B3B,OAD6B,mBAC7BA,OAD6B;AAAA,UACpBD,OADoB,mBACpBA,OADoB;AAEpC,UAAMkB,OAAOK,YAAYiD,KAAKC,IAAL,CAAU5B,KAAV,CAAzB;AACA,WAAOrC,MAAMU,IAAN,EAAYlB,OAAZ,EAAqBC,OAArB,CAAP;AACD,GAlV6C,CAoV9C;;;AACAyC,+BAA6B;AAACF,eAAD;AAAcC,eAAd;AAA2BpB,gBAA3B;AAAyCC;AAAzC,GAA7B,EAAmF;AACjF;AACA;AACAmB,kBAAcjC,MAAMiC,WAAN,EAAmB,CAAC,CAApB,EAAuB,CAAvB,CAAd;AAHiF,4BAKpD,KAAKb,cAL+C;AAAA,UAK1E1B,QAL0E,mBAK1EA,QAL0E;AAAA,UAKhEC,QALgE,mBAKhEA,QALgE;AAOjF,UAAMG,UAAUe,eAAe,MAAMmB,WAArC;AACA,QAAInC,QAAQiB,UAAZ;;AACA,QAAImB,cAAc,CAAlB,EAAqB;AACnB;AACApC,cAAQiB,aAAamB,eAAetC,WAAWmB,UAA1B,CAArB;AACD,KAHD,MAGO,IAAImB,cAAc,CAAlB,EAAqB;AAC1B;AACApC,cAAQiB,aAAamB,eAAevC,WAAWoB,UAA1B,CAArB;AACD;;AAED,WAAO;AACLjB,WADK;AAELC;AAFK,KAAP;AAID;;AA1W6C","sourcesContent":["import ViewState from './view-state';\nimport WebMercatorViewport, {normalizeViewportProps} from 'viewport-mercator-project';\nimport assert from '../utils/assert';\n\n// MAPBOX LIMITS\nexport const MAPBOX_LIMITS = {\n  minZoom: 0,\n  maxZoom: 20,\n  minPitch: 0,\n  maxPitch: 60\n};\n\nconst DEFAULT_STATE = {\n  pitch: 0,\n  bearing: 0,\n  altitude: 1.5\n};\n\n/* Utils */\nfunction clamp(value, min, max) {\n  return value < min ? min : value > max ? max : value;\n}\n\nexport default class MapState extends ViewState {\n  constructor({\n    /** Mapbox viewport properties */\n    /** The width of the viewport */\n    width,\n    /** The height of the viewport */\n    height,\n    /** The latitude at the center of the viewport */\n    latitude,\n    /** The longitude at the center of the viewport */\n    longitude,\n    /** The tile zoom level of the map. */\n    zoom,\n    /** The bearing of the viewport in degrees */\n    bearing = DEFAULT_STATE.bearing,\n    /** The pitch of the viewport in degrees */\n    pitch = DEFAULT_STATE.pitch,\n    /**\n     * Specify the altitude of the viewport camera\n     * Unit: map heights, default 1.5\n     * Non-public API, see https://github.com/mapbox/mapbox-gl-js/issues/1137\n     */\n    altitude = DEFAULT_STATE.altitude,\n\n    /** Viewport constraints */\n    maxZoom = MAPBOX_LIMITS.maxZoom,\n    minZoom = MAPBOX_LIMITS.minZoom,\n    maxPitch = MAPBOX_LIMITS.maxPitch,\n    minPitch = MAPBOX_LIMITS.minPitch,\n\n    /** Interaction states, required to calculate change during transform */\n    /* The point on map being grabbed when the operation first started */\n    startPanLngLat,\n    /* Center of the zoom when the operation first started */\n    startZoomLngLat,\n    /** Bearing when current perspective rotate operation started */\n    startBearing,\n    /** Pitch when current perspective rotate operation started */\n    startPitch,\n    /** Zoom when current zoom operation started */\n    startZoom\n  } = {}) {\n    assert(Number.isFinite(longitude), '`longitude` must be supplied');\n    assert(Number.isFinite(latitude), '`latitude` must be supplied');\n    assert(Number.isFinite(zoom), '`zoom` must be supplied');\n\n    super({\n      width,\n      height,\n      latitude,\n      longitude,\n      zoom,\n      bearing,\n      pitch,\n      altitude,\n      maxZoom,\n      minZoom,\n      maxPitch,\n      minPitch\n    });\n\n    this._interactiveState = {\n      startPanLngLat,\n      startZoomLngLat,\n      startBearing,\n      startPitch,\n      startZoom\n    };\n  }\n\n  /* Public API */\n\n  getViewportProps() {\n    return this._viewportProps;\n  }\n\n  getInteractiveState() {\n    return this._interactiveState;\n  }\n\n  /**\n   * Start panning\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  panStart({pos}) {\n    return this._getUpdatedState({\n      startPanLngLat: this._unproject(pos)\n    });\n  }\n\n  /**\n   * Pan\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   * @param {[Number, Number], optional} startPos - where the pointer grabbed at\n   *   the start of the operation. Must be supplied of `panStart()` was not called\n   */\n  pan({pos, startPos}) {\n    const startPanLngLat = this._interactiveState.startPanLngLat || this._unproject(startPos);\n\n    if (!startPanLngLat) {\n      return this;\n    }\n\n    const [longitude, latitude] = this._calculateNewLngLat({startPanLngLat, pos});\n\n    return this._getUpdatedState({\n      longitude,\n      latitude\n    });\n  }\n\n  /**\n   * End panning\n   * Must call if `panStart()` was called\n   */\n  panEnd() {\n    return this._getUpdatedState({\n      startPanLngLat: null\n    });\n  }\n\n  /**\n   * Start rotating\n   * @param {[Number, Number]} pos - position on screen where the center is\n   */\n  rotateStart({pos}) {\n    return this._getUpdatedState({\n      startBearing: this._viewportProps.bearing,\n      startPitch: this._viewportProps.pitch\n    });\n  }\n\n  /**\n   * Rotate\n   * @param {Number} deltaScaleX - a number between [-1, 1] specifying the\n   *   change to bearing.\n   * @param {Number} deltaScaleY - a number between [-1, 1] specifying the\n   *   change to pitch. -1 sets to minPitch and 1 sets to maxPitch.\n   */\n  rotate({deltaScaleX = 0, deltaScaleY = 0}) {\n    const {startBearing, startPitch} = this._interactiveState;\n\n    if (!Number.isFinite(startBearing) || !Number.isFinite(startPitch)) {\n      return this;\n    }\n\n    const {pitch, bearing} = this._calculateNewPitchAndBearing({\n      deltaScaleX,\n      deltaScaleY,\n      startBearing,\n      startPitch\n    });\n\n    return this._getUpdatedState({\n      bearing,\n      pitch\n    });\n  }\n\n  /**\n   * End rotating\n   * Must call if `rotateStart()` was called\n   */\n  rotateEnd() {\n    return this._getUpdatedState({\n      startBearing: null,\n      startPitch: null\n    });\n  }\n\n  /**\n   * Start zooming\n   * @param {[Number, Number]} pos - position on screen where the center is\n   */\n  zoomStart({pos}) {\n    return this._getUpdatedState({\n      startZoomLngLat: this._unproject(pos),\n      startZoom: this._viewportProps.zoom\n    });\n  }\n\n  /**\n   * Zoom\n   * @param {[Number, Number]} pos - position on screen where the current center is\n   * @param {[Number, Number]} startPos - the center position at\n   *   the start of the operation. Must be supplied of `zoomStart()` was not called\n   * @param {Number} scale - a number between [0, 1] specifying the accumulated\n   *   relative scale.\n   */\n  zoom({pos, startPos, scale}) {\n    assert(scale > 0, '`scale` must be a positive number');\n\n    // Make sure we zoom around the current mouse position rather than map center\n    let {startZoom, startZoomLngLat} = this._interactiveState;\n\n    if (!Number.isFinite(startZoom)) {\n      // We have two modes of zoom:\n      // scroll zoom that are discrete events (transform from the current zoom level),\n      // and pinch zoom that are continuous events (transform from the zoom level when\n      // pinch started).\n      // If startZoom state is defined, then use the startZoom state;\n      // otherwise assume discrete zooming\n      startZoom = this._viewportProps.zoom;\n      startZoomLngLat = this._unproject(startPos) || this._unproject(pos);\n    }\n\n    // take the start lnglat and put it where the mouse is down.\n    assert(\n      startZoomLngLat,\n      '`startZoomLngLat` prop is required ' +\n        'for zoom behavior to calculate where to position the map.'\n    );\n\n    const zoom = this._calculateNewZoom({scale, startZoom});\n\n    const zoomedViewport = new WebMercatorViewport(Object.assign({}, this._viewportProps, {zoom}));\n    const [longitude, latitude] = zoomedViewport.getLocationAtPoint({lngLat: startZoomLngLat, pos});\n\n    return this._getUpdatedState({\n      zoom,\n      longitude,\n      latitude\n    });\n  }\n\n  /**\n   * End zooming\n   * Must call if `zoomStart()` was called\n   */\n  zoomEnd() {\n    return this._getUpdatedState({\n      startZoomLngLat: null,\n      startZoom: null\n    });\n  }\n\n  zoomIn() {\n    return this._zoomFromCenter(2);\n  }\n\n  zoomOut() {\n    return this._zoomFromCenter(0.5);\n  }\n\n  moveLeft() {\n    return this._panFromCenter([100, 0]);\n  }\n\n  moveRight() {\n    return this._panFromCenter([-100, 0]);\n  }\n\n  moveUp() {\n    return this._panFromCenter([0, 100]);\n  }\n\n  moveDown() {\n    return this._panFromCenter([0, -100]);\n  }\n\n  rotateLeft() {\n    return this._getUpdatedState({\n      bearing: this._viewportProps.bearing - 15\n    });\n  }\n\n  rotateRight() {\n    return this._getUpdatedState({\n      bearing: this._viewportProps.bearing + 15\n    });\n  }\n\n  rotateUp() {\n    return this._getUpdatedState({\n      pitch: this._viewportProps.pitch + 10\n    });\n  }\n\n  rotateDown() {\n    return this._getUpdatedState({\n      pitch: this._viewportProps.pitch - 10\n    });\n  }\n\n  /* Private methods */\n\n  _zoomFromCenter(scale) {\n    const {width, height} = this._viewportProps;\n    return this.zoom({\n      pos: [width / 2, height / 2],\n      scale\n    });\n  }\n\n  _panFromCenter(offset) {\n    const {width, height} = this._viewportProps;\n    return this.pan({\n      startPos: [width / 2, height / 2],\n      pos: [width / 2 + offset[0], height / 2 + offset[1]]\n    });\n  }\n\n  _getUpdatedState(newProps) {\n    // Update _viewportProps\n    return new MapState(Object.assign({}, this._viewportProps, this._interactiveState, newProps));\n  }\n\n  // Apply any constraints (mathematical or defined by _viewportProps) to map state\n  _applyConstraints(props) {\n    // Ensure zoom is within specified range\n    const {maxZoom, minZoom, zoom} = props;\n    props.zoom = clamp(zoom, minZoom, maxZoom);\n\n    // Ensure pitch is within specified range\n    const {maxPitch, minPitch, pitch} = props;\n    props.pitch = clamp(pitch, minPitch, maxPitch);\n\n    Object.assign(props, normalizeViewportProps(props));\n\n    return props;\n  }\n\n  _unproject(pos) {\n    const viewport = new WebMercatorViewport(this._viewportProps);\n    return pos && viewport.unproject(pos);\n  }\n\n  // Calculate a new lnglat based on pixel dragging position\n  _calculateNewLngLat({startPanLngLat, pos}) {\n    const viewport = new WebMercatorViewport(this._viewportProps);\n    return viewport.getMapCenterByLngLatPosition({lngLat: startPanLngLat, pos});\n  }\n\n  // Calculates new zoom\n  _calculateNewZoom({scale, startZoom}) {\n    const {maxZoom, minZoom} = this._viewportProps;\n    const zoom = startZoom + Math.log2(scale);\n    return clamp(zoom, minZoom, maxZoom);\n  }\n\n  // Calculates a new pitch and bearing from a position (coming from an event)\n  _calculateNewPitchAndBearing({deltaScaleX, deltaScaleY, startBearing, startPitch}) {\n    // clamp deltaScaleY to [-1, 1] so that rotation is constrained between minPitch and maxPitch.\n    // deltaScaleX does not need to be clamped as bearing does not have constraints.\n    deltaScaleY = clamp(deltaScaleY, -1, 1);\n\n    const {minPitch, maxPitch} = this._viewportProps;\n\n    const bearing = startBearing + 180 * deltaScaleX;\n    let pitch = startPitch;\n    if (deltaScaleY > 0) {\n      // Gradually increase pitch\n      pitch = startPitch + deltaScaleY * (maxPitch - startPitch);\n    } else if (deltaScaleY < 0) {\n      // Gradually decrease pitch\n      pitch = startPitch - deltaScaleY * (minPitch - startPitch);\n    }\n\n    return {\n      pitch,\n      bearing\n    };\n  }\n}\n"],"file":"map-state.js"}