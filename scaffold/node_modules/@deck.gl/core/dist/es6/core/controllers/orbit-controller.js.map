{"version":3,"sources":["../../../../src/core/controllers/orbit-controller.js"],"names":["OrbitViewport","OrbitState","ViewportControls","EventManager","PREFIX","CURSOR","GRABBING","GRAB","POINTER","getDefaultCursor","isDragging","getPropTypes","PropTypes","lookAt","arrayOf","number","distance","rotationX","rotationY","translationX","translationY","zoom","minZoom","maxZoom","fov","near","far","width","isRequired","height","bounds","object","onViewportChange","func","getCursor","orbitControls","defaultProps","Infinity","OrbitController","getViewport","viewport","constructor","props","Object","assign","state","canvas","eventManager","_eventManager","_controls","setOptions","onStateChange","_onInteractiveStateChange","bind","setProps","finalize","destroy","style","cursor","displayName"],"mappings":"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","sourcesContent":["import OrbitViewport from '../viewports/orbit-viewport';\nimport OrbitState from '../controllers/orbit-state';\nimport ViewportControls from '../controllers/viewport-controls';\nimport {EventManager} from 'mjolnir.js';\n\nconst PREFIX = '-webkit-';\n\nconst CURSOR = {\n  GRABBING: `${PREFIX}grabbing`,\n  GRAB: `${PREFIX}grab`,\n  POINTER: 'pointer'\n};\n\nconst getDefaultCursor = ({isDragging}) => (isDragging ? CURSOR.GRABBING : CURSOR.GRAB);\n\nfunction getPropTypes(PropTypes) {\n  return {\n    /* Viewport properties */\n    lookAt: PropTypes.arrayOf(PropTypes.number), // target position\n    distance: PropTypes.number, // distance from camera to the target\n    rotationX: PropTypes.number, // rotation around X axis\n    rotationY: PropTypes.number, // rotation around Y axis\n    translationX: PropTypes.number, // translation x in screen space\n    translationY: PropTypes.number, // translation y in screen space\n    zoom: PropTypes.number, // scale in screen space\n    minZoom: PropTypes.number,\n    maxZoom: PropTypes.number,\n    fov: PropTypes.number, // field of view\n    near: PropTypes.number,\n    far: PropTypes.number,\n    width: PropTypes.number.isRequired, // viewport width in pixels\n    height: PropTypes.number.isRequired, // viewport height in pixels\n\n    /* Model properties */\n    bounds: PropTypes.object, // bounds in the shape of {minX, minY, minZ, maxX, maxY, maxZ}\n\n    /* Callbacks */\n    onViewportChange: PropTypes.func.isRequired,\n\n    /** Accessor that returns a cursor style to show interactive state */\n    getCursor: PropTypes.func,\n\n    /* Controls */\n    orbitControls: PropTypes.object\n  };\n}\n\nconst defaultProps = {\n  lookAt: [0, 0, 0],\n  rotationX: 0,\n  rotationY: 0,\n  translationX: 0,\n  translationY: 0,\n  distance: 10,\n  zoom: 1,\n  minZoom: 0,\n  maxZoom: Infinity,\n  fov: 50,\n  near: 1,\n  far: 1000,\n  getCursor: getDefaultCursor\n};\n\n/*\n * Maps mouse interaction to a deck.gl Viewport\n */\nexport default class OrbitController {\n  // Returns a deck.gl Viewport instance, to be used with the DeckGL component\n  static getViewport(viewport) {\n    return new OrbitViewport(viewport);\n  }\n\n  constructor(props) {\n    props = Object.assign({}, defaultProps, props);\n\n    this.props = props;\n\n    this.state = {\n      // Whether the cursor is down\n      isDragging: false\n    };\n\n    this.canvas = props.canvas;\n\n    const eventManager = new EventManager(this.canvas);\n\n    this._eventManager = eventManager;\n\n    this._controls = props.orbitControls || new ViewportControls(OrbitState);\n    this._controls.setOptions(\n      Object.assign({}, this.props, {\n        onStateChange: this._onInteractiveStateChange.bind(this),\n        eventManager\n      })\n    );\n  }\n\n  setProps(props) {\n    props = Object.assign({}, this.props, props);\n    this.props = props;\n    this._controls.setOptions(props);\n  }\n\n  finalize() {\n    this._eventManager.destroy();\n  }\n\n  _onInteractiveStateChange({isDragging = false}) {\n    if (isDragging !== this.state.isDragging) {\n      this.state.isDragging = isDragging;\n      const {getCursor} = this.props;\n      this.canvas.style.cursor = getCursor(this.state);\n    }\n  }\n}\n\nOrbitController.displayName = 'OrbitController';\nOrbitController.defaultProps = defaultProps;\nOrbitController.getPropTypes = getPropTypes;\n"],"file":"orbit-controller.js"}