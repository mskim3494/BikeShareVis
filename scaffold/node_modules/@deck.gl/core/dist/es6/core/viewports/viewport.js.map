{"version":3,"sources":["../../../../src/core/viewports/viewport.js"],"names":["log","createMat4","extractCameraVectors","Matrix4","Vector3","equals","mat4_scale","mat4_translate","mat4_multiply","mat4_invert","getDistanceScales","getWorldPosition","getMeterZoom","worldToPixels","pixelsToWorld","assert","DEGREES_TO_RADIANS","Math","PI","IDENTITY","ZERO_VECTOR","DEFAULT_DISTANCE_SCALES","pixelsPerMeter","metersPerPixel","pixelsPerDegree","degreesPerPixel","DEFAULT_ZOOM","ERR_ARGUMENT","Viewport","constructor","opts","id","x","y","width","height","viewMatrix","projectionMatrix","orthographic","fovyRadians","fovy","near","far","focalDistance","longitude","latitude","zoom","position","modelMatrix","distanceScales","displayName","isGeospatial","Number","isFinite","log2","scale","pow","meterOffset","transformVector","viewMatrixUncentered","center","multiplyRight","translate","negate","_createProjectionMatrix","aspect","_initPixelMatrices","bind","project","unproject","projectFlat","unprojectFlat","getMatrices","viewport","xyz","topLeft","x0","y0","z0","X","Y","coord","pixelProjectionMatrix","y2","length","targetZ","z","pixelUnprojectionMatrix","_projectFlat","arguments","_unprojectFlat","getMercatorParams","lngLat","_addMetersToLngLat","isMapSynched","coordinateOrigin","highPrecision","modelViewProjectionMatrix","viewProjectionMatrix","matrices","Object","assign","getCameraPosition","cameraPosition","getCameraDirection","cameraDirection","getCameraUp","cameraUp","lngLatZ","lng","lat","Z","_metersToLngLatDelta","deltaLng","deltaLat","deltaZ","perspective","vpm","viewMatrixInverse","eye","direction","up","m","warn"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport log from '../utils/log';\nimport {createMat4, extractCameraVectors} from '../utils/math-utils';\n\nimport {Matrix4, Vector3, equals} from 'math.gl';\nimport mat4_scale from 'gl-mat4/scale';\nimport mat4_translate from 'gl-mat4/translate';\nimport mat4_multiply from 'gl-mat4/multiply';\nimport mat4_invert from 'gl-mat4/invert';\n\nimport {\n  getDistanceScales,\n  getWorldPosition,\n  getMeterZoom,\n  worldToPixels,\n  pixelsToWorld\n} from 'viewport-mercator-project';\n\nimport assert from '../utils/assert';\n\nconst DEGREES_TO_RADIANS = Math.PI / 180;\n\nconst IDENTITY = createMat4();\n\nconst ZERO_VECTOR = [0, 0, 0];\n\nconst DEFAULT_DISTANCE_SCALES = {\n  pixelsPerMeter: [1, 1, 1],\n  metersPerPixel: [1, 1, 1],\n  pixelsPerDegree: [1, 1, 1],\n  degreesPerPixel: [1, 1, 1]\n};\n\nconst DEFAULT_ZOOM = 0;\n\nconst ERR_ARGUMENT = 'Illegal argument to Viewport';\n\nexport default class Viewport {\n  /**\n   * @classdesc\n   * Manages coordinate system transformations for deck.gl.\n   *\n   * Note: The Viewport is immutable in the sense that it only has accessors.\n   * A new viewport instance should be created if any parameters have changed.\n   */\n  /* eslint-disable complexity, max-statements */\n  constructor(opts = {}) {\n    const {\n      id = null,\n\n      // Window width/height in pixels (for pixel projection)\n      x = 0,\n      y = 0,\n      width = 1,\n      height = 1,\n\n      // view matrix\n      viewMatrix = IDENTITY,\n\n      // Projection matrix\n      projectionMatrix = null,\n\n      // Projection matrix parameters, used if projectionMatrix not supplied\n      orthographic = false,\n      fovyRadians = 75 * DEGREES_TO_RADIANS,\n      fovy,\n      near = 0.1, // Distance of near clipping plane\n      far = 1000, // Distance of far clipping plane\n      focalDistance = 1, // Only needed for orthographic views\n\n      // Anchor: lng lat zoom will make this viewport work with geospatial coordinate systems\n      longitude = null,\n      latitude = null,\n      zoom = null,\n\n      // Anchor position offset (in meters for geospatial viewports)\n      position = null,\n      // A model matrix to be applied to position, to match the layer props API\n      modelMatrix = null,\n\n      distanceScales = null\n    } = opts;\n\n    this.id = id || this.constructor.displayName || 'viewport';\n\n    // Check if we have a geospatial anchor\n    this.isGeospatial = Number.isFinite(latitude) && Number.isFinite(longitude);\n\n    // Silently allow apps to send in w,h = 0,0\n    this.x = x;\n    this.y = y;\n    this.width = width || 1;\n    this.height = height || 1;\n\n    this.zoom = zoom;\n    if (!Number.isFinite(this.zoom)) {\n      this.zoom = this.isGeospatial\n        ? getMeterZoom({latitude}) + Math.log2(focalDistance)\n        : DEFAULT_ZOOM;\n    }\n    this.scale = Math.pow(2, this.zoom);\n\n    // Calculate distance scales if lng/lat/zoom are provided\n    this.distanceScales = this.isGeospatial\n      ? getDistanceScales({latitude, longitude, scale: this.scale})\n      : distanceScales || DEFAULT_DISTANCE_SCALES;\n\n    this.focalDistance = focalDistance;\n\n    this.distanceScales.metersPerPixel = new Vector3(this.distanceScales.metersPerPixel);\n    this.distanceScales.pixelsPerMeter = new Vector3(this.distanceScales.pixelsPerMeter);\n\n    this.position = ZERO_VECTOR;\n    this.meterOffset = ZERO_VECTOR;\n    if (position) {\n      // Apply model matrix if supplied\n      this.position = position;\n      this.modelMatrix = modelMatrix;\n      this.meterOffset = modelMatrix ? modelMatrix.transformVector(position) : position;\n    }\n\n    this.viewMatrixUncentered = viewMatrix;\n\n    if (this.isGeospatial) {\n      // Determine camera center\n      this.center = getWorldPosition({\n        longitude,\n        latitude,\n        scale: this.scale,\n        distanceScales: this.distanceScales,\n        meterOffset: this.meterOffset\n      });\n\n      // Make a centered version of the matrix for projection modes without an offset\n      this.viewMatrix = new Matrix4()\n        // Apply the uncentered view matrix\n        .multiplyRight(this.viewMatrixUncentered)\n        // The Mercator world coordinate system is upper left,\n        // but GL expects lower left, so we flip it around the center after all transforms are done\n        .scale([1, -1, 1])\n        // And center it\n        .translate(new Vector3(this.center || ZERO_VECTOR).negate());\n    } else {\n      this.center = position;\n      this.viewMatrix = viewMatrix;\n    }\n\n    this.projectionMatrix =\n      projectionMatrix ||\n      this._createProjectionMatrix({\n        orthographic,\n        fovyRadians: fovyRadians || fovy * DEGREES_TO_RADIANS,\n        aspect: this.width / this.height,\n        focalDistance,\n        near,\n        far\n      });\n\n    this._initPixelMatrices();\n\n    // Bind methods for easy access\n    this.equals = this.equals.bind(this);\n    this.project = this.project.bind(this);\n    this.unproject = this.unproject.bind(this);\n    this.projectFlat = this.projectFlat.bind(this);\n    this.unprojectFlat = this.unprojectFlat.bind(this);\n    this.getMatrices = this.getMatrices.bind(this);\n  }\n  /* eslint-enable complexity, max-statements */\n\n  // Two viewports are equal if width and height are identical, and if\n  // their view and projection matrices are (approximately) equal.\n  equals(viewport) {\n    if (!(viewport instanceof Viewport)) {\n      return false;\n    }\n\n    return (\n      viewport.width === this.width &&\n      viewport.height === this.height &&\n      equals(viewport.projectionMatrix, this.projectionMatrix) &&\n      equals(viewport.viewMatrix, this.viewMatrix)\n    );\n    // TODO - check distance scales?\n  }\n\n  /**\n   * Projects xyz (possibly latitude and longitude) to pixel coordinates in window\n   * using viewport projection parameters\n   * - [longitude, latitude] to [x, y]\n   * - [longitude, latitude, Z] => [x, y, z]\n   * Note: By default, returns top-left coordinates for canvas/SVG type render\n   *\n   * @param {Array} lngLatZ - [lng, lat] or [lng, lat, Z]\n   * @param {Object} opts - options\n   * @param {Object} opts.topLeft=true - Whether projected coords are top left\n   * @return {Array} - [x, y] or [x, y, z] in top left coords\n   */\n  project(xyz, {topLeft = true} = {}) {\n    const [x0, y0, z0 = 0] = xyz;\n\n    const [X, Y] = this.projectFlat([x0, y0]);\n    const coord = worldToPixels([X, Y, z0], this.pixelProjectionMatrix);\n\n    const [x, y] = coord;\n    const y2 = topLeft ? y : this.height - y;\n    return xyz.length === 2 ? [x, y2] : [x, y2, coord[2]];\n  }\n\n  /**\n   * Unproject pixel coordinates on screen onto world coordinates,\n   * (possibly [lon, lat]) on map.\n   * - [x, y] => [lng, lat]\n   * - [x, y, z] => [lng, lat, Z]\n   * @param {Array} xyz -\n   * @param {Object} opts - options\n   * @param {Object} opts.topLeft=true - Whether origin is top left\n   * @return {Array|null} - [lng, lat, Z] or [X, Y, Z]\n   */\n  unproject(xyz, {topLeft = true, targetZ} = {}) {\n    const [x, y, z] = xyz;\n\n    const y2 = topLeft ? y : this.height - y;\n    const coord = pixelsToWorld([x, y2, z], this.pixelUnprojectionMatrix, targetZ);\n    const [X, Y] = this.unprojectFlat(coord);\n\n    if (Number.isFinite(z)) {\n      // Has depth component\n      return [X, Y, coord[2]];\n    }\n\n    return Number.isFinite(targetZ) ? [X, Y, targetZ] : [X, Y];\n  }\n\n  // NON_LINEAR PROJECTION HOOKS\n  // Used for web meractor projection\n\n  /**\n   * Project [lng,lat] on sphere onto [x,y] on 512*512 Mercator Zoom 0 tile.\n   * Performs the nonlinear part of the web mercator projection.\n   * Remaining projection is done with 4x4 matrices which also handles\n   * perspective.\n   * @param {Array} lngLat - [lng, lat] coordinates\n   *   Specifies a point on the sphere to project onto the map.\n   * @return {Array} [x,y] coordinates.\n   */\n  projectFlat([x, y], scale = this.scale) {\n    return this._projectFlat(...arguments);\n  }\n\n  /**\n   * Unproject world point [x,y] on map onto {lat, lon} on sphere\n   * @param {object|Vector} xy - object with {x,y} members\n   *  representing point on projected map plane\n   * @return {GeoCoordinates} - object with {lat,lon} of point on sphere.\n   *   Has toArray method if you need a GeoJSON Array.\n   *   Per cartographic tradition, lat and lon are specified as degrees.\n   */\n  unprojectFlat(xyz, scale = this.scale) {\n    return this._unprojectFlat(...arguments);\n  }\n\n  // TODO - why do we need these?\n  _projectFlat(xyz, scale = this.scale) {\n    return xyz;\n  }\n\n  _unprojectFlat(xyz, scale = this.scale) {\n    return xyz;\n  }\n\n  getMercatorParams() {\n    const lngLat = this._addMetersToLngLat(\n      [this.longitude || 0, this.latitude || 0],\n      this.meterOffset\n    );\n    return {\n      longitude: lngLat[0],\n      latitude: lngLat[1]\n    };\n  }\n\n  isMapSynched() {\n    return false;\n  }\n\n  getDistanceScales(coordinateOrigin = null) {\n    if (coordinateOrigin) {\n      return getDistanceScales({\n        longitude: coordinateOrigin[0],\n        latitude: coordinateOrigin[1],\n        scale: this.scale,\n        highPrecision: true\n      });\n    }\n    return this.distanceScales;\n  }\n\n  getMatrices({modelMatrix = null} = {}) {\n    let modelViewProjectionMatrix = this.viewProjectionMatrix;\n    let pixelProjectionMatrix = this.pixelProjectionMatrix;\n    let pixelUnprojectionMatrix = this.pixelUnprojectionMatrix;\n\n    if (modelMatrix) {\n      modelViewProjectionMatrix = mat4_multiply([], this.viewProjectionMatrix, modelMatrix);\n      pixelProjectionMatrix = mat4_multiply([], this.pixelProjectionMatrix, modelMatrix);\n      pixelUnprojectionMatrix = mat4_invert([], pixelProjectionMatrix);\n    }\n\n    const matrices = Object.assign({\n      modelViewProjectionMatrix,\n      viewProjectionMatrix: this.viewProjectionMatrix,\n      viewMatrix: this.viewMatrix,\n      projectionMatrix: this.projectionMatrix,\n\n      // project/unproject between pixels and world\n      pixelProjectionMatrix,\n      pixelUnprojectionMatrix,\n\n      width: this.width,\n      height: this.height,\n      scale: this.scale\n    });\n\n    return matrices;\n  }\n\n  // EXPERIMENTAL METHODS\n\n  getCameraPosition() {\n    return this.cameraPosition;\n  }\n\n  getCameraDirection() {\n    return this.cameraDirection;\n  }\n\n  getCameraUp() {\n    return this.cameraUp;\n  }\n\n  // INTERNAL METHODS\n\n  // TODO - these are duplicating WebMercator methods\n  _addMetersToLngLat(lngLatZ, xyz) {\n    const [lng, lat, Z = 0] = lngLatZ;\n    const [deltaLng, deltaLat, deltaZ = 0] = this._metersToLngLatDelta(xyz);\n    return lngLatZ.length === 2\n      ? [lng + deltaLng, lat + deltaLat]\n      : [lng + deltaLng, lat + deltaLat, Z + deltaZ];\n  }\n\n  _metersToLngLatDelta(xyz) {\n    const [x, y, z = 0] = xyz;\n    assert(Number.isFinite(x) && Number.isFinite(y) && Number.isFinite(z), ERR_ARGUMENT);\n    const {pixelsPerMeter, degreesPerPixel} = this.distanceScales;\n    const deltaLng = x * pixelsPerMeter[0] * degreesPerPixel[0];\n    const deltaLat = y * pixelsPerMeter[1] * degreesPerPixel[1];\n    return xyz.length === 2 ? [deltaLng, deltaLat] : [deltaLng, deltaLat, z];\n  }\n\n  _createProjectionMatrix({orthographic, fovyRadians, aspect, focalDistance, near, far}) {\n    assert(Number.isFinite(fovyRadians));\n    return orthographic\n      ? new Matrix4().orthographic({fovy: fovyRadians, aspect, focalDistance, near, far})\n      : new Matrix4().perspective({fovy: fovyRadians, aspect, near, far});\n  }\n\n  _initPixelMatrices() {\n    // Note: As usual, matrix operations should be applied in \"reverse\" order\n    // since vectors will be multiplied in from the right during transformation\n    const vpm = createMat4();\n    mat4_multiply(vpm, vpm, this.projectionMatrix);\n    mat4_multiply(vpm, vpm, this.viewMatrix);\n    this.viewProjectionMatrix = vpm;\n\n    // console.log('VPM', this.viewMatrix, this.projectionMatrix, this.viewProjectionMatrix);\n\n    // Calculate inverse view matrix\n    this.viewMatrixInverse = mat4_invert([], this.viewMatrix) || this.viewMatrix;\n\n    // Decompose camera directions\n    const {eye, direction, up} = extractCameraVectors({\n      viewMatrix: this.viewMatrix,\n      viewMatrixInverse: this.viewMatrixInverse\n    });\n    this.cameraPosition = eye;\n    this.cameraDirection = direction;\n    this.cameraUp = up;\n\n    // console.log(this.cameraPosition, this.cameraDirection, this.cameraUp);\n\n    /*\n     * Builds matrices that converts preprojected lngLats to screen pixels\n     * and vice versa.\n     * Note: Currently returns bottom-left coordinates!\n     * Note: Starts with the GL projection matrix and adds steps to the\n     *       scale and translate that matrix onto the window.\n     * Note: WebGL controls clip space to screen projection with gl.viewport\n     *       and does not need this step.\n     */\n\n    // matrix for conversion from world location to screen (pixel) coordinates\n    const m = createMat4();\n    mat4_scale(m, m, [this.width / 2, -this.height / 2, 1]);\n    mat4_translate(m, m, [1, -1, 0]);\n    mat4_multiply(m, m, this.viewProjectionMatrix);\n    this.pixelProjectionMatrix = m;\n\n    this.pixelUnprojectionMatrix = mat4_invert(createMat4(), this.pixelProjectionMatrix);\n    if (!this.pixelUnprojectionMatrix) {\n      log.warn('Pixel project matrix not invertible')();\n      // throw new Error('Pixel project matrix not invertible');\n    }\n  }\n}\n\nViewport.displayName = 'Viewport';\n"],"file":"viewport.js"}