{"version":3,"sources":["../../../../src/core/lib/transition-manager.js"],"names":["LinearInterpolator","extractViewState","assert","noop","TRANSITION_EVENTS","BREAK","SNAP_TO_END","IGNORE","DEFAULT_PROPS","transitionDuration","transitionEasing","t","transitionInterpolator","transitionInterruption","onTransitionStart","onTransitionInterrupt","onTransitionEnd","DEFAULT_STATE","animation","propsInTransition","startProps","endProps","TransitionManager","constructor","props","state","_onTransitionFrame","bind","getViewportInTransition","processViewportChange","nextProps","transitionTriggered","currentProps","_shouldIgnoreViewportChange","isTransitionInProgress","_isTransitionInProgress","_isTransitionEnabled","Object","assign","interruption","_triggerTransition","_endTransition","_isUpdateDueToCurrentTransition","interpolator","arePropsEqual","cancelAnimationFrame","initialProps","initializeProps","duration","easing","startTime","Date","now","start","end","requestAnimationFrame","_updateViewport","currentTime","shouldEnd","viewport","interpolateProps","onViewportChange","inTransition","defaultProps"],"mappings":"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","sourcesContent":["/* global requestAnimationFrame, cancelAnimationFrame */\nimport LinearInterpolator from '../transitions/linear-interpolator';\nimport {extractViewState} from '../transitions/transition-utils';\nimport assert from '../utils/assert';\n\nconst noop = () => {};\n\nexport const TRANSITION_EVENTS = {\n  BREAK: 1,\n  SNAP_TO_END: 2,\n  IGNORE: 3\n};\n\nconst DEFAULT_PROPS = {\n  transitionDuration: 0,\n  transitionEasing: t => t,\n  transitionInterpolator: new LinearInterpolator(),\n  transitionInterruption: TRANSITION_EVENTS.BREAK,\n  onTransitionStart: noop,\n  onTransitionInterrupt: noop,\n  onTransitionEnd: noop\n};\n\nconst DEFAULT_STATE = {\n  animation: null,\n  propsInTransition: null,\n  startProps: null,\n  endProps: null\n};\n\nexport default class TransitionManager {\n  constructor(props) {\n    this.props = props;\n    this.state = DEFAULT_STATE;\n\n    this._onTransitionFrame = this._onTransitionFrame.bind(this);\n  }\n\n  // Returns current transitioned viewport.\n  getViewportInTransition() {\n    return this.state.propsInTransition;\n  }\n\n  // Process the vewiport change, either ignore or trigger a new transiton.\n  // Return true if a new transition is triggered, false otherwise.\n  processViewportChange(nextProps) {\n    let transitionTriggered = false;\n    const currentProps = this.props;\n    // Set this.props here as '_triggerTransition' calls '_updateViewport' that uses this.props.\n    this.props = nextProps;\n\n    // NOTE: Be cautious re-ordering statements in this function.\n    if (this._shouldIgnoreViewportChange(currentProps, nextProps)) {\n      return transitionTriggered;\n    }\n\n    const isTransitionInProgress = this._isTransitionInProgress();\n\n    if (this._isTransitionEnabled(nextProps)) {\n      const startProps = Object.assign(\n        {},\n        currentProps,\n        this.state.interruption === TRANSITION_EVENTS.SNAP_TO_END\n          ? this.state.endProps\n          : this.state.propsInTransition || currentProps\n      );\n\n      if (isTransitionInProgress) {\n        currentProps.onTransitionInterrupt();\n      }\n      nextProps.onTransitionStart();\n\n      this._triggerTransition(startProps, nextProps);\n\n      transitionTriggered = true;\n    } else if (isTransitionInProgress) {\n      currentProps.onTransitionInterrupt();\n      this._endTransition();\n    }\n\n    return transitionTriggered;\n  }\n\n  // Helper methods\n\n  _isTransitionInProgress() {\n    return this.state.propsInTransition;\n  }\n\n  _isTransitionEnabled(props) {\n    return props.transitionDuration > 0 && props.transitionInterpolator;\n  }\n\n  _isUpdateDueToCurrentTransition(props) {\n    if (this.state.propsInTransition) {\n      return this.state.interpolator.arePropsEqual(props, this.state.propsInTransition);\n    }\n    return false;\n  }\n\n  _shouldIgnoreViewportChange(currentProps, nextProps) {\n    if (this._isTransitionInProgress()) {\n      // Ignore update if it is requested to be ignored\n      return (\n        this.state.interruption === TRANSITION_EVENTS.IGNORE ||\n        // Ignore update if it is due to current active transition.\n        this._isUpdateDueToCurrentTransition(nextProps)\n      );\n    } else if (this._isTransitionEnabled(nextProps)) {\n      // Ignore if none of the viewport props changed.\n      return nextProps.transitionInterpolator.arePropsEqual(currentProps, nextProps);\n    }\n    return true;\n  }\n\n  _triggerTransition(startProps, endProps) {\n    assert(this._isTransitionEnabled(endProps), 'Transition is not enabled');\n\n    cancelAnimationFrame(this.state.animation);\n\n    const initialProps = endProps.transitionInterpolator.initializeProps(startProps, endProps);\n\n    this.state = {\n      // Save current transition props\n      duration: endProps.transitionDuration,\n      easing: endProps.transitionEasing,\n      interpolator: endProps.transitionInterpolator,\n      interruption: endProps.transitionInterruption,\n\n      startTime: Date.now(),\n      startProps: initialProps.start,\n      endProps: initialProps.end,\n      animation: null,\n      propsInTransition: {}\n    };\n\n    this._onTransitionFrame();\n  }\n\n  _onTransitionFrame() {\n    // _updateViewport() may cancel the animation\n    this.state.animation = requestAnimationFrame(this._onTransitionFrame);\n    this._updateViewport();\n  }\n\n  _endTransition() {\n    cancelAnimationFrame(this.state.animation);\n    this.state = DEFAULT_STATE;\n  }\n\n  _updateViewport() {\n    // NOTE: Be cautious re-ordering statements in this function.\n    const currentTime = Date.now();\n    const {startTime, duration, easing, interpolator, startProps, endProps} = this.state;\n\n    let shouldEnd = false;\n    let t = (currentTime - startTime) / duration;\n    if (t >= 1) {\n      t = 1;\n      shouldEnd = true;\n    }\n    t = easing(t);\n\n    const viewport = interpolator.interpolateProps(startProps, endProps, t);\n\n    // This extractViewState gurantees angle props (bearing, longitude) are normalized\n    // So when viewports are compared they are in same range.\n    this.state.propsInTransition = extractViewState(Object.assign({}, this.props, viewport));\n\n    if (this.props.onViewportChange) {\n      this.props.onViewportChange(this.state.propsInTransition, {inTransition: true});\n    }\n\n    if (shouldEnd) {\n      this._endTransition();\n      this.props.onTransitionEnd();\n    }\n  }\n}\n\nTransitionManager.defaultProps = DEFAULT_PROPS;\n"],"file":"transition-manager.js"}