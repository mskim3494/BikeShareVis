{"version":3,"sources":["../../../../src/core/lib/layer-manager.js"],"names":["assert","Framebuffer","ShaderCache","seer","Layer","drawLayers","pickObject","pickVisibleObjects","LIFECYCLE","deepEqual","View","MapView","Viewport","log","flatten","Stats","setPropOverrides","layerEditListener","seerInitListener","initLayerInSeer","updateLayerInSeer","LOG_PRIORITY_LIFECYCLE","LOG_PRIORITY_LIFECYCLE_MINOR","INITIAL_VIEW_STATE","latitude","longitude","zoom","INITIAL_CONTEXT","Object","seal","layerManager","gl","useDevicePixels","stats","viewport","shaderCache","pickingFBO","lastPickedInfo","index","layerId","userData","layerName","layer","LayerManager","constructor","eventManager","lastRenderedLayers","layers","context","assign","_cachePrograms","id","width","height","views","viewState","viewsChanged","viewports","layerFilter","drawPickingColors","_needsRedraw","_needsUpdate","_pickingRadius","_eventManager","_onLayerClick","_onLayerHover","_onClick","bind","_onPointerMove","_onPointerLeave","_pickAndCallback","_initSeer","_editSeer","_initEventHandling","setViews","finalize","removeListener","needsRedraw","clearRedrawFlags","_checkIfNeedsRedraw","needsUpdate","setNeedsRedraw","reason","setNeedsUpdate","getLayers","layerIds","filter","find","indexOf","getViews","getViewports","_rebuildViewportsFromViews","setParameters","parameters","_setEventHandlingParameters","setSize","setViewState","setLayers","Number","isFinite","length","Boolean","map","view","viewportInstance","_diffViews","viewStateChanged","warn","newLayers","_updateLayers","oldLayers","error","generatedLayers","updateLayers","pass","redrawReason","onViewportActive","_activateViewport","x","y","mode","radius","_getPickingBuffer","pickObjects","setViewports","deprecated","setViewport","redraw","layerNeedsRedraw","getNeedsRedraw","newViewports","makeViewport","newViews","oldViews","some","_","i","equals","on","click","pointermove","pointerleave","pickingRadius","onLayerClick","onLayerHover","isNaN","_validateEventHandling","oldViewport","viewportChanged","setChangeFlags","_updateLayer","resize","canvas","oldLayerMap","oldLayer","_updateSublayersRecursively","error2","_finalizeOldLayers","firstError","newLayer","sublayers","_initializeLayer","_transferLayerState","push","isComposite","getSubLayers","err","_finalizeLayer","_initialize","lifecycle","INITIALIZED","internalState","model","getModels","_transferState","MATCHED","AWAITING_GC","printChangeFlags","_update","AWAITING_FINALIZATION","_finalize","FINALIZED","props","pickable","event","offsetCenter","callback","leftButton","rightButton","options","pos","selectedInfos","firstInfo","info","srcEvent","forEach","payload","type","valuePath","itemKey","slice","value"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport assert from '../utils/assert';\nimport {Framebuffer, ShaderCache} from 'luma.gl';\nimport seer from 'seer';\nimport Layer from './layer';\nimport {drawLayers} from './draw-layers';\nimport {pickObject, pickVisibleObjects} from './pick-layers';\nimport {LIFECYCLE} from '../lifecycle/constants';\nimport {deepEqual} from '../utils/deep-equal';\nimport View from '../views/view';\nimport MapView from '../views/map-view';\nimport Viewport from '../viewports/viewport';\nimport log from '../utils/log';\nimport {flatten} from '../utils/flatten';\nimport {Stats} from 'probe.gl';\n\nimport {\n  setPropOverrides,\n  layerEditListener,\n  seerInitListener,\n  initLayerInSeer,\n  updateLayerInSeer\n} from './seer-integration';\n\nconst LOG_PRIORITY_LIFECYCLE = 2;\nconst LOG_PRIORITY_LIFECYCLE_MINOR = 4;\n\nconst INITIAL_VIEW_STATE = {latitude: 0, longitude: 0, zoom: 1};\n\n// CONTEXT IS EXPOSED TO LAYERS\nconst INITIAL_CONTEXT = Object.seal({\n  layerManager: null,\n  gl: null,\n\n  // Settings\n  useDevicePixels: true, // Exposed in case custom layers need to adjust sizes\n\n  // General resources\n  stats: null, // for tracking lifecycle performance\n  viewport: null, // Current viewport, exposed to layers for project* function\n\n  // GL Resources\n  shaderCache: null,\n  pickingFBO: null, // Screen-size framebuffer that layers can reuse\n\n  // State\n  lastPickedInfo: {\n    // For callback tracking and autohighlight\n    index: -1,\n    layerId: null\n  },\n\n  userData: {} // Place for any custom app `context`\n});\n\nconst layerName = layer => (layer instanceof Layer ? `${layer}` : !layer ? 'null' : 'invalid');\n\nexport default class LayerManager {\n  // eslint-disable-next-line\n  constructor(gl, {eventManager, stats} = {}) {\n    // Currently deck.gl expects the DeckGL.layers array to be different\n    // whenever React rerenders. If the same layers array is used, the\n    // LayerManager's diffing algorithm will generate a fatal error and\n    // break the rendering.\n\n    // `this.lastRenderedLayers` stores the UNFILTERED layers sent\n    // down to LayerManager, so that `layers` reference can be compared.\n    // If it's the same across two React render calls, the diffing logic\n    // will be skipped.\n    this.lastRenderedLayers = [];\n    this.layers = [];\n\n    this.context = Object.assign({}, INITIAL_CONTEXT, {\n      layerManager: this,\n\n      gl,\n      // Enabling luma.gl Program caching using private API (_cachePrograms)\n      shaderCache: new ShaderCache({gl, _cachePrograms: true}),\n      stats: stats || new Stats({id: 'deck.gl'})\n    });\n\n    // List of view descriptors, gets re-evaluated when width/height changes\n    this.width = 100;\n    this.height = 100;\n    this.views = [];\n    this.viewState = INITIAL_VIEW_STATE;\n    this.viewsChanged = true;\n    this.viewports = []; // Generated viewports\n\n    this.layerFilter = null;\n    this.drawPickingColors = false;\n\n    this._needsRedraw = 'Initial render';\n    this._needsUpdate = false;\n\n    // Event handling\n    this._pickingRadius = 0;\n\n    this._eventManager = null;\n    this._onLayerClick = null;\n    this._onLayerHover = null;\n    this._onClick = this._onClick.bind(this);\n    this._onPointerMove = this._onPointerMove.bind(this);\n    this._onPointerLeave = this._onPointerLeave.bind(this);\n    this._pickAndCallback = this._pickAndCallback.bind(this);\n\n    // Seer integration\n    this._initSeer = this._initSeer.bind(this);\n    this._editSeer = this._editSeer.bind(this);\n\n    Object.seal(this);\n\n    seerInitListener(this._initSeer);\n    layerEditListener(this._editSeer);\n\n    if (eventManager) {\n      this._initEventHandling(eventManager);\n    }\n\n    // Init with default map viewport\n    this.setViews();\n  }\n\n  /**\n   * Method to call when the layer manager is not needed anymore.\n   *\n   * Currently used in the <DeckGL> componentWillUnmount lifecycle to unbind Seer listeners.\n   */\n  finalize() {\n    seer.removeListener(this._initSeer);\n    seer.removeListener(this._editSeer);\n  }\n\n  // Check if a redraw is needed\n  needsRedraw({clearRedrawFlags = true} = {}) {\n    return this._checkIfNeedsRedraw(clearRedrawFlags);\n  }\n\n  // Check if a deep update of all layers is needed\n  needsUpdate() {\n    return this._needsUpdate;\n  }\n\n  // Layers will be redrawn (in next animation frame)\n  setNeedsRedraw(reason) {\n    this._needsRedraw = this._needsRedraw || reason;\n  }\n\n  // Layers will be updated deeply (in next animation frame)\n  // Potentially regenerating attributes and sub layers\n  setNeedsUpdate(reason) {\n    this._needsUpdate = this._needsUpdate || reason;\n  }\n\n  // Gets an (optionally) filtered list of layers\n  getLayers({layerIds = null} = {}) {\n    // Filtering by layerId compares beginning of strings, so that sublayers will be included\n    // Dependes on the convention of adding suffixes to the parent's layer name\n    return layerIds\n      ? this.layers.filter(layer => layerIds.find(layerId => layer.id.indexOf(layerId) === 0))\n      : this.layers;\n  }\n\n  getViews() {\n    return this.views;\n  }\n\n  // Get a set of viewports for a given width and height\n  // TODO - Intention is for deck.gl to autodeduce width and height and drop the need for props\n  getViewports() {\n    this._rebuildViewportsFromViews();\n    this.context.viewport = this.viewports[0];\n    return this.viewports;\n  }\n\n  /**\n   * Set parameters needed for layer rendering and picking.\n   * Parameters are to be passed as a single object, with the following values:\n   * @param {Boolean} useDevicePixels\n   */\n  /* eslint-disable complexity */\n  setParameters(parameters) {\n    if ('eventManager' in parameters) {\n      this._initEventHandling(parameters.eventManager);\n    }\n\n    if (\n      'pickingRadius' in parameters ||\n      'onLayerClick' in parameters ||\n      'onLayerHover' in parameters\n    ) {\n      this._setEventHandlingParameters(parameters);\n    }\n\n    if ('width' in parameters || 'height' in parameters) {\n      this.setSize(parameters.width, parameters.height);\n    }\n\n    if ('views' in parameters) {\n      this.setViews(parameters.views);\n    }\n\n    // TODO - support multiple view states\n    if ('viewState' in parameters) {\n      this.setViewState(parameters.viewState);\n    }\n\n    // TODO - For now we set layers before viewports to preservenchangeFlags\n    if ('layers' in parameters) {\n      this.setLayers(parameters.layers);\n    }\n\n    if ('layerFilter' in parameters) {\n      if (this.layerFilter !== parameters.layerFilter) {\n        this.layerFilter = parameters.layerFilter;\n        this.setNeedsRedraw('layerFilter changed');\n      }\n    }\n\n    if ('drawPickingColors' in parameters) {\n      if (parameters.drawPickingColors !== this.drawPickingColors) {\n        this.drawPickingColors = parameters.drawPickingColors;\n        this.setNeedsRedraw('drawPickingColors changed');\n      }\n    }\n\n    // A way for apps to add data to context that can be accessed in layers\n    if ('userData' in parameters) {\n      this.context.userData = parameters.userData;\n    }\n\n    if ('useDevicePixels' in parameters) {\n      this.context.useDevicePixels = parameters.useDevicePixels;\n    }\n  }\n  /* eslint-enable complexity */\n\n  setSize(width, height) {\n    assert(Number.isFinite(width) && Number.isFinite(height));\n    if (width !== this.width || height !== this.height) {\n      this.width = width;\n      this.height = height;\n      this.viewsChanged = true;\n      this.setNeedsRedraw('Size changed');\n    }\n  }\n\n  // Update the view descriptor list and set change flag if needed\n  // Does not actually rebuild the `Viewport`s until `getViewports` is called\n  setViews(views) {\n    // For now, we default to a full screen map view port\n    // TODO - apps may want to specify an empty view list...\n    if (!views || views.length === 0) {\n      views = [new MapView({id: 'default-view'})];\n    }\n\n    // Ensure any \"naked\" Viewports are wrapped in View instances\n    views = flatten(views, {filter: Boolean}).map(\n      view => (view instanceof Viewport ? new View({viewportInstance: view}) : view)\n    );\n\n    const viewsChanged = this._diffViews(views, this.views);\n\n    this.views = views;\n    this.viewsChanged = this.viewsChanged || viewsChanged;\n  }\n\n  setViewState(viewState) {\n    if (viewState) {\n      const viewStateChanged = deepEqual(viewState, this.viewState);\n      this.viewState = viewState;\n      this.viewsChanged = true || viewStateChanged;\n    } else {\n      log.warn('viewState is not valid')();\n    }\n  }\n\n  // Supply a new layer list, initiating sublayer generation and layer matching\n  setLayers(newLayers) {\n    this.getViewports();\n    assert(this.context.viewport, 'LayerManager.updateLayers: viewport not set');\n\n    // TODO - something is generating state updates that cause rerender of the same\n    if (newLayers === this.lastRenderedLayers) {\n      log.log(3, 'Ignoring layer update due to layer array not changed')();\n      return this;\n    }\n    this.lastRenderedLayers = newLayers;\n\n    newLayers = flatten(newLayers, {filter: Boolean});\n\n    for (const layer of newLayers) {\n      layer.context = this.context;\n    }\n\n    const {error, generatedLayers} = this._updateLayers({\n      oldLayers: this.layers,\n      newLayers\n    });\n\n    this.layers = generatedLayers;\n\n    // Throw first error found, if any\n    if (error) {\n      throw error;\n    }\n    return this;\n  }\n\n  // Update layers from last cycle if `setNeedsUpdate()` has been called\n  updateLayers() {\n    // NOTE: For now, even if only some layer has changed, we update all layers\n    // to ensure that layer id maps etc remain consistent even if different\n    // sublayers are rendered\n    const reason = this.needsUpdate();\n    if (reason) {\n      this.setNeedsRedraw(`updating layers: ${reason}`);\n      // HACK - Call with a copy of lastRenderedLayers to trigger a full update\n      this.setLayers([...this.lastRenderedLayers]);\n    }\n  }\n\n  //\n  // METHODS FOR LAYERS\n  //\n\n  // Draw all layers in all views\n  drawLayers({pass = 'render to screen', redrawReason = 'unknown reason'} = {}) {\n    const {drawPickingColors} = this;\n    const {gl, useDevicePixels} = this.context;\n\n    // render this viewport\n    drawLayers(gl, {\n      layers: this.layers,\n      viewports: this.getViewports(),\n      onViewportActive: this._activateViewport.bind(this),\n      useDevicePixels,\n      drawPickingColors,\n      pass,\n      layerFilter: this.layerFilter,\n      redrawReason\n    });\n  }\n\n  // Pick the closest info at given coordinate\n  pickObject({x, y, mode, radius = 0, layerIds, layerFilter}) {\n    const {gl, useDevicePixels} = this.context;\n\n    const layers = this.getLayers({layerIds});\n\n    return pickObject(gl, {\n      // User params\n      x,\n      y,\n      radius,\n      layers,\n      mode,\n      layerFilter,\n      // Injected params\n      viewports: this.getViewports(),\n      onViewportActive: this._activateViewport.bind(this),\n      pickingFBO: this._getPickingBuffer(),\n      lastPickedInfo: this.context.lastPickedInfo,\n      useDevicePixels\n    });\n  }\n\n  // Get all unique infos within a bounding box\n  pickObjects({x, y, width, height, layerIds, layerFilter}) {\n    const {gl, useDevicePixels} = this.context;\n\n    const layers = this.getLayers({layerIds});\n\n    return pickVisibleObjects(gl, {\n      x,\n      y,\n      width,\n      height,\n      layers,\n      layerFilter,\n      mode: 'pickObjects',\n      viewports: this.getViewports(),\n      onViewportActive: this._activateViewport.bind(this),\n      pickingFBO: this._getPickingBuffer(),\n      useDevicePixels\n    });\n  }\n\n  //\n  // DEPRECATED METHODS in V5.1\n  //\n\n  setViewports(viewports) {\n    log.deprecated('setViewport', 'setViews')();\n    this.setViews(viewports);\n    return this;\n  }\n\n  //\n  // DEPRECATED METHODS in V5\n  //\n\n  setViewport(viewport) {\n    log.deprecated('setViewport', 'setViews')();\n    this.setViews([viewport]);\n    return this;\n  }\n\n  //\n  // PRIVATE METHODS\n  //\n\n  _checkIfNeedsRedraw(clearRedrawFlags) {\n    let redraw = this._needsRedraw;\n    if (clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n\n    // This layers list doesn't include sublayers, relying on composite layers\n    for (const layer of this.layers) {\n      // Call every layer to clear their flags\n      const layerNeedsRedraw = layer.getNeedsRedraw({clearRedrawFlags});\n      redraw = redraw || layerNeedsRedraw;\n    }\n\n    return redraw;\n  }\n\n  // Rebuilds viewports from descriptors towards a certain window size\n  _rebuildViewportsFromViews() {\n    if (this.viewsChanged) {\n      const {width, height, views, viewState} = this;\n      const newViewports = views.map(view => view.makeViewport({width, height, viewState}));\n\n      this.setNeedsRedraw('Viewport(s) changed');\n\n      // Ensure one viewport is activated, layers may expect it\n      // TODO - handle empty viewport list (using dummy viewport), or assert\n      // const oldViewports = this.context.viewports;\n\n      const viewport = newViewports[0];\n      assert(viewport instanceof Viewport, 'Invalid viewport');\n\n      this.context.viewports = newViewports;\n      this._activateViewport(viewport);\n      // }\n\n      // We've just rebuilt the viewports to match the descriptors, so clear the flag\n      this.viewports = newViewports;\n      this.viewsChanged = false;\n    }\n  }\n\n  // Check if viewport array has changed, returns true if any change\n  // Note that descriptors can be the same\n  _diffViews(newViews, oldViews) {\n    if (newViews.length !== oldViews.length) {\n      return true;\n    }\n\n    return newViews.some((_, i) => !newViews[i].equals(oldViews[i]));\n  }\n\n  /**\n   * @param {Object} eventManager   A source of DOM input events\n   */\n  _initEventHandling(eventManager) {\n    this._eventManager = eventManager;\n\n    // TODO: add/remove handlers on demand at runtime, not all at once on init.\n    // Consider both top-level handlers like onLayerClick/Hover\n    // and per-layer handlers attached to individual layers.\n    // https://github.com/uber/deck.gl/issues/634\n    this._eventManager.on({\n      click: this._onClick,\n      pointermove: this._onPointerMove,\n      pointerleave: this._onPointerLeave\n    });\n  }\n\n  // Set parameters for input event handling.\n  _setEventHandlingParameters({pickingRadius, onLayerClick, onLayerHover}) {\n    if (!isNaN(pickingRadius)) {\n      this._pickingRadius = pickingRadius;\n    }\n    if (typeof onLayerClick !== 'undefined') {\n      this._onLayerClick = onLayerClick;\n    }\n    if (typeof onLayerHover !== 'undefined') {\n      this._onLayerHover = onLayerHover;\n    }\n    this._validateEventHandling();\n  }\n\n  // Make a viewport \"current\" in layer context, primed for draw\n  _activateViewport(viewport) {\n    const oldViewport = this.context.viewport;\n    const viewportChanged = !oldViewport || !viewport.equals(oldViewport);\n\n    if (viewportChanged) {\n      log.log(4, 'Viewport', viewport)();\n\n      this.context.viewport = viewport;\n\n      // Update layers states\n      // Let screen space layers update their state based on viewport\n      for (const layer of this.layers) {\n        layer.setChangeFlags({viewportChanged: 'Viewport changed'});\n        this._updateLayer(layer);\n      }\n    }\n\n    assert(this.context.viewport, 'LayerManager: viewport not set');\n\n    return this;\n  }\n\n  _getPickingBuffer() {\n    const {gl} = this.context;\n    // Create a frame buffer if not already available\n    this.context.pickingFBO = this.context.pickingFBO || new Framebuffer(gl);\n    // Resize it to current canvas size (this is a noop if size hasn't changed)\n    this.context.pickingFBO.resize({width: gl.canvas.width, height: gl.canvas.height});\n    return this.context.pickingFBO;\n  }\n\n  // Match all layers, checking for caught errors\n  // To avoid having an exception in one layer disrupt other layers\n  // TODO - mark layers with exceptions as bad and remove from rendering cycle?\n  _updateLayers({oldLayers, newLayers}) {\n    // Create old layer map\n    const oldLayerMap = {};\n    for (const oldLayer of oldLayers) {\n      if (oldLayerMap[oldLayer.id]) {\n        log.warn(`Multiple old layers with same id ${layerName(oldLayer)}`)();\n      } else {\n        oldLayerMap[oldLayer.id] = oldLayer;\n      }\n    }\n\n    // Allocate array for generated layers\n    const generatedLayers = [];\n\n    // Match sublayers\n    const error = this._updateSublayersRecursively({\n      newLayers,\n      oldLayerMap,\n      generatedLayers\n    });\n\n    // Finalize unmatched layers\n    const error2 = this._finalizeOldLayers(oldLayerMap);\n\n    this._needsUpdate = false;\n\n    const firstError = error || error2;\n    return {error: firstError, generatedLayers};\n  }\n\n  // Note: adds generated layers to `generatedLayers` array parameter\n  _updateSublayersRecursively({newLayers, oldLayerMap, generatedLayers}) {\n    let error = null;\n\n    for (const newLayer of newLayers) {\n      newLayer.context = this.context;\n\n      // Given a new coming layer, find its matching old layer (if any)\n      const oldLayer = oldLayerMap[newLayer.id];\n      if (oldLayer === null) {\n        // null, rather than undefined, means this id was originally there\n        log.warn(`Multiple new layers with same id ${layerName(newLayer)}`)();\n      }\n      // Remove the old layer from candidates, as it has been matched with this layer\n      oldLayerMap[newLayer.id] = null;\n\n      let sublayers = null;\n\n      // We must not generate exceptions until after layer matching is complete\n      try {\n        if (!oldLayer) {\n          this._initializeLayer(newLayer);\n          initLayerInSeer(newLayer); // Initializes layer in seer chrome extension (if connected)\n        } else {\n          this._transferLayerState(oldLayer, newLayer);\n          this._updateLayer(newLayer);\n          updateLayerInSeer(newLayer); // Updates layer in seer chrome extension (if connected)\n        }\n        generatedLayers.push(newLayer);\n\n        // Call layer lifecycle method: render sublayers\n        sublayers = newLayer.isComposite && newLayer.getSubLayers();\n        // End layer lifecycle method: render sublayers\n      } catch (err) {\n        log.warn(`error during matching of ${layerName(newLayer)}`, err);\n        error = error || err; // Record first exception\n      }\n\n      if (sublayers) {\n        this._updateSublayersRecursively({\n          newLayers: sublayers,\n          oldLayerMap,\n          generatedLayers\n        });\n      }\n    }\n\n    return error;\n  }\n\n  // Finalize any old layers that were not matched\n  _finalizeOldLayers(oldLayerMap) {\n    let error = null;\n    for (const layerId in oldLayerMap) {\n      const layer = oldLayerMap[layerId];\n      if (layer) {\n        error = error || this._finalizeLayer(layer);\n      }\n    }\n    return error;\n  }\n\n  // EXCEPTION SAFE LAYER ACCESS\n\n  // Initializes a single layer, calling layer methods\n  _initializeLayer(layer) {\n    log.log(LOG_PRIORITY_LIFECYCLE, `initializing ${layerName(layer)}`)();\n\n    let error = null;\n    try {\n      layer._initialize();\n      layer.lifecycle = LIFECYCLE.INITIALIZED;\n    } catch (err) {\n      log.warn(`error while initializing ${layerName(layer)}\\n`, err)();\n      error = error || err;\n      // TODO - what should the lifecycle state be here? LIFECYCLE.INITIALIZATION_FAILED?\n    }\n\n    // Set back pointer (used in picking)\n    layer.internalState.layer = layer;\n\n    // Save layer on model for picking purposes\n    // store on model.userData rather than directly on model\n    for (const model of layer.getModels()) {\n      model.userData.layer = layer;\n    }\n\n    return error;\n  }\n\n  _transferLayerState(oldLayer, newLayer) {\n    newLayer._transferState(oldLayer);\n    newLayer.lifecycle = LIFECYCLE.MATCHED;\n\n    if (newLayer !== oldLayer) {\n      log.log(\n        LOG_PRIORITY_LIFECYCLE_MINOR,\n        `matched ${layerName(newLayer)}`,\n        oldLayer,\n        '->',\n        newLayer\n      )();\n      oldLayer.lifecycle = LIFECYCLE.AWAITING_GC;\n    } else {\n      log.log(LOG_PRIORITY_LIFECYCLE_MINOR, `Matching layer is unchanged ${newLayer.id}`)();\n    }\n  }\n\n  // Updates a single layer, cleaning all flags\n  _updateLayer(layer) {\n    log.log(\n      LOG_PRIORITY_LIFECYCLE_MINOR,\n      `updating ${layer} because: ${layer.printChangeFlags()}`\n    )();\n    let error = null;\n    try {\n      layer._update();\n    } catch (err) {\n      log.warn(`error during update of ${layerName(layer)}`, err)();\n      // Save first error\n      error = err;\n    }\n    return error;\n  }\n\n  // Finalizes a single layer\n  _finalizeLayer(layer) {\n    assert(layer.lifecycle !== LIFECYCLE.AWAITING_FINALIZATION);\n    layer.lifecycle = LIFECYCLE.AWAITING_FINALIZATION;\n    let error = null;\n    this.setNeedsRedraw(`finalized ${layerName(layer)}`);\n    try {\n      layer._finalize();\n    } catch (err) {\n      log.warn(`error during finalization of ${layerName(layer)}`, err)();\n      error = err;\n    }\n    layer.lifecycle = LIFECYCLE.FINALIZED;\n    log.log(LOG_PRIORITY_LIFECYCLE, `finalizing ${layerName(layer)}`);\n    return error;\n  }\n\n  /**\n   * Warn if a deck-level mouse event has been specified,\n   * but no layers are `pickable`.\n   */\n  _validateEventHandling() {\n    if (this.onLayerClick || this.onLayerHover) {\n      if (this.layers.length && !this.layers.some(layer => layer.props.pickable)) {\n        log.warn(\n          'You have supplied a top-level input event handler (e.g. `onLayerClick`), ' +\n            'but none of your layers have set the `pickable` flag.'\n        )();\n      }\n    }\n  }\n\n  /**\n   * Route click events to layers.\n   * `pickLayer` will call the `onClick` prop of any picked layer,\n   * and `onLayerClick` is called directly from here\n   * with any picking info generated by `pickLayer`.\n   * @param {Object} event  An object encapsulating an input event,\n   *                        with the following shape:\n   *                        {Object: {x, y}} offsetCenter: center of the event\n   *                        {Object} srcEvent:             native JS Event object\n   */\n  _onClick(event) {\n    if (!event.offsetCenter) {\n      // Do not trigger onHover callbacks when click position is invalid.\n      return;\n    }\n    this._pickAndCallback({\n      callback: this._onLayerClick,\n      event,\n      mode: 'click'\n    });\n  }\n\n  /**\n   * Route click events to layers.\n   * `pickLayer` will call the `onHover` prop of any picked layer,\n   * and `onLayerHover` is called directly from here\n   * with any picking info generated by `pickLayer`.\n   * @param {Object} event  An object encapsulating an input event,\n   *                        with the following shape:\n   *                        {Object: {x, y}} offsetCenter: center of the event\n   *                        {Object} srcEvent:             native JS Event object\n   */\n  _onPointerMove(event) {\n    if (event.leftButton || event.rightButton) {\n      // Do not trigger onHover callbacks if mouse button is down.\n      return;\n    }\n    this._pickAndCallback({\n      callback: this._onLayerHover,\n      event,\n      mode: 'hover'\n    });\n  }\n\n  _onPointerLeave(event) {\n    this.pickObject({\n      x: -1,\n      y: -1,\n      radius: this._pickingRadius,\n      mode: 'hover'\n    });\n  }\n\n  _pickAndCallback(options) {\n    const pos = options.event.offsetCenter;\n    const radius = this._pickingRadius;\n    const selectedInfos = this.pickObject({x: pos.x, y: pos.y, radius, mode: options.mode});\n    if (options.callback) {\n      const firstInfo = selectedInfos.find(info => info.index >= 0) || null;\n      // As per documentation, send null value when no valid object is picked.\n      options.callback(firstInfo, selectedInfos, options.event.srcEvent);\n    }\n  }\n\n  // SEER INTEGRATION\n\n  /**\n   * Called upon Seer initialization, manually sends layers data.\n   */\n  _initSeer() {\n    this.layers.forEach(layer => {\n      initLayerInSeer(layer);\n      updateLayerInSeer(layer);\n    });\n  }\n\n  /**\n   * On Seer property edition, set override and update layers.\n   */\n  _editSeer(payload) {\n    if (payload.type !== 'edit' || payload.valuePath[0] !== 'props') {\n      return;\n    }\n\n    setPropOverrides(payload.itemKey, payload.valuePath.slice(1), payload.value);\n    const newLayers = this.layers.map(layer => new layer.constructor(layer.props));\n    this.updateLayers({newLayers});\n  }\n}\n"],"file":"layer-manager.js"}