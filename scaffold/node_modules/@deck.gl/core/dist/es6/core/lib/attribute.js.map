{"version":3,"sources":["../../../../src/core/lib/attribute.js"],"names":["assert","GL","Buffer","Attribute","constructor","id","attribute","size","value","isGeneric","isIndexed","instanced","transition","noAlloc","updater","accessor","userData","state","Object","assign","target","undefined","buffer","isExternalBuffer","needsAlloc","needsUpdate","needsRedraw","allocedInstances","seal","_validateAttributeDefinition","_validateAttributeUpdaters","finalize","clearChangedFlags","getInstanceCount","length","getBuffer","setNeedsUpdate","reason","setNeedsRedraw","setNumInstances","numInstances","instanceCount","update","allocate","allocCount","Math","max","ArrayType","glArrayFromType","type","FLOAT","data","props","context","updated","call","_checkAttributeArray","_updateBufferViaStandardAccessor","setExternalBuffer","Error","name","auto","accessorFunc","defaultValue","Array","isArray","i","object","objectValue","Number","isFinite","hasUpdater","valid","glType","clamped","Float32Array","UNSIGNED_SHORT","UNSIGNED_SHORT_5_6_5","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","Uint16Array","UNSIGNED_INT","Uint32Array","UNSIGNED_BYTE","Uint8ClampedArray","Uint8Array","BYTE","Int8Array","SHORT","Int16Array","INT","Int32Array"],"mappings":"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","sourcesContent":["/* eslint-disable complexity */\nimport assert from 'assert';\nimport {GL, Buffer} from 'luma.gl';\n\nexport default class Attribute {\n  constructor({\n    id = 'unnamed-attribute',\n    attribute,\n\n    // luma.gl fields\n    size,\n    value,\n    isGeneric = false,\n    isIndexed = false,\n    instanced = 0,\n\n    // deck.gl fields\n    transition = false,\n    noAlloc = false,\n    updater = null,\n    accessor = null\n  } = {}) {\n    this.id = id;\n    this.userData = {}; // Reserved for application\n\n    // Initialize the attribute descriptor, with WebGL and metadata fields\n    this.state = Object.assign(\n      {\n        // Ensure that fields are present before Object.seal()\n        target: undefined,\n        buffer: null,\n        userData: {}\n      },\n      {\n        transition,\n        noAlloc,\n        updater,\n        accessor\n      },\n      // Metadata\n      attribute,\n      {\n        // State\n        isExternalBuffer: false,\n        needsAlloc: false,\n        needsUpdate: false,\n        needsRedraw: false,\n\n        // Luma fields\n        isGeneric,\n        isIndexed,\n        instanced,\n        size,\n        value\n      }\n    );\n\n    this.allocedInstances = -1;\n\n    // Sanity - no app fields on our attributes. Use userData instead.\n    Object.seal(this);\n    Object.seal(this.state);\n\n    // Check all fields and generate helpful error messages\n    this._validateAttributeDefinition();\n    this._validateAttributeUpdaters();\n  }\n\n  finalize() {\n    // TODO call buffer.finalize();\n  }\n\n  // HACK to fix plot layer (temporary)\n  get value() {\n    return this.state.value;\n  }\n\n  needsUpdate() {\n    return this.state.needsUpdate;\n  }\n\n  needsRedraw({clearChangedFlags = false} = {}) {\n    const needsRedraw = this.state.needsRedraw;\n    this.state.needsRedraw = this.state.needsRedraw && !clearChangedFlags;\n    return needsRedraw;\n  }\n\n  getInstanceCount() {\n    const attribute = this.state;\n    return attribute.value !== null ? attribute.value.length / attribute.size : 0;\n  }\n\n  getBuffer() {\n    const attribute = this.state;\n    return attribute.buffer || attribute;\n  }\n\n  // Checks that typed arrays for attributes are big enough\n  // sets alloc flag if not\n  // @return {Boolean} whether any updates are needed\n  setNeedsUpdate(reason = this.id) {\n    this.state.needsUpdate = this.state.needsUpdate || reason;\n  }\n\n  setNeedsRedraw(reason = this.id) {\n    this.state.needsRedraw = this.state.needsRedraw || reason;\n  }\n\n  setNumInstances(numInstances) {\n    const attribute = this.state;\n\n    if (!attribute.isExternalBuffer) {\n      // Do we need to reallocate the attribute's typed array?\n      const instanceCount = this.getInstanceCount();\n      const needsAlloc = instanceCount === 0 || instanceCount < numInstances;\n      if (needsAlloc && (attribute.update || attribute.accessor)) {\n        attribute.needsAlloc = true;\n        this.setNeedsUpdate(this.id);\n      }\n    }\n  }\n\n  allocate(numInstances) {\n    this.setNumInstances(numInstances);\n\n    const attribute = this.state;\n\n    // Allocate a new typed array if needed\n    if (attribute.needsAlloc) {\n      // Allocate at least one element to ensure a valid buffer\n      const allocCount = Math.max(numInstances, 1);\n      const ArrayType = glArrayFromType(attribute.type || GL.FLOAT);\n\n      attribute.value = new ArrayType(attribute.size * allocCount);\n      attribute.needsAlloc = false;\n      attribute.needsUpdate = true;\n\n      this.allocedInstances = allocCount;\n      return true;\n    }\n\n    return false;\n  }\n\n  update({numInstances, data, props, context}) {\n    if (!this.needsUpdate()) {\n      return false;\n    }\n\n    const attribute = this.state;\n\n    const {update, accessor} = attribute;\n\n    let updated = true;\n    if (update) {\n      // Custom updater - typically for non-instanced layers\n      update.call(context, attribute, {data, props, numInstances});\n      this._checkAttributeArray();\n    } else if (accessor) {\n      // Standard updater\n      this._updateBufferViaStandardAccessor(data, props);\n      this._checkAttributeArray();\n    } else {\n      updated = false;\n    }\n\n    attribute.needsUpdate = false;\n    attribute.needsRedraw = true;\n\n    return updated;\n  }\n\n  setExternalBuffer(buffer, numInstances) {\n    const attribute = this.state;\n\n    if (buffer) {\n      attribute.isExternalBuffer = true;\n      attribute.needsUpdate = false;\n\n      if (buffer instanceof Buffer) {\n        attribute.value = null;\n        if (attribute.buffer !== buffer) {\n          attribute.buffer = buffer;\n          attribute.needsRedraw = true;\n        }\n      } else {\n        const ArrayType = glArrayFromType(attribute.type || GL.FLOAT);\n        if (!(buffer instanceof ArrayType)) {\n          throw new Error(`Attribute ${this.id} must be of type ${ArrayType.name}`);\n        }\n        if (attribute.auto && buffer.length <= numInstances * attribute.size) {\n          throw new Error('Attribute prop array must match length and size');\n        }\n\n        attribute.buffer = null;\n        if (attribute.value !== buffer) {\n          attribute.value = buffer;\n          attribute.needsRedraw = true;\n        }\n      }\n    } else {\n      attribute.isExternalBuffer = false;\n    }\n  }\n\n  // PRIVATE HELPER METHODS\n\n  _updateBufferViaStandardAccessor(data, props) {\n    const attribute = this.state;\n\n    const {accessor, value, size} = attribute;\n    const accessorFunc = props[accessor];\n\n    assert(typeof accessorFunc === 'function', `accessor \"${accessor}\" is not a function`);\n\n    let {defaultValue = [0, 0, 0, 0]} = attribute;\n    defaultValue = Array.isArray(defaultValue) ? defaultValue : [defaultValue];\n    let i = 0;\n    for (const object of data) {\n      let objectValue = accessorFunc(object);\n      objectValue = Array.isArray(objectValue) ? objectValue : [objectValue];\n      /* eslint-disable no-fallthrough, default-case */\n      switch (size) {\n        case 4:\n          value[i + 3] = Number.isFinite(objectValue[3]) ? objectValue[3] : defaultValue[3];\n        case 3:\n          value[i + 2] = Number.isFinite(objectValue[2]) ? objectValue[2] : defaultValue[2];\n        case 2:\n          value[i + 1] = Number.isFinite(objectValue[1]) ? objectValue[1] : defaultValue[1];\n        case 1:\n          value[i + 0] = Number.isFinite(objectValue[0]) ? objectValue[0] : defaultValue[0];\n      }\n      i += size;\n    }\n  }\n\n  // Validate luma.gl level fields\n  _validateAttributeDefinition() {\n    const attribute = this.state;\n\n    assert(\n      attribute.size >= 1 && attribute.size <= 4,\n      `Attribute definition for ${this.id} invalid size`\n    );\n  }\n\n  // Validate deck.gl level fields\n  _validateAttributeUpdaters() {\n    const attribute = this.state;\n\n    // Check that either 'accessor' or 'update' is a valid function\n    const hasUpdater =\n      attribute.noAlloc ||\n      typeof attribute.update === 'function' ||\n      typeof attribute.accessor === 'string';\n    if (!hasUpdater) {\n      throw new Error(`Attribute ${this.id} missing update or accessor`);\n    }\n  }\n\n  _checkAttributeArray() {\n    const attribute = this.state;\n\n    const {value} = attribute;\n    if (value && value.length >= 4) {\n      const valid =\n        Number.isFinite(value[0]) &&\n        Number.isFinite(value[1]) &&\n        Number.isFinite(value[2]) &&\n        Number.isFinite(value[3]);\n      if (!valid) {\n        throw new Error(`Illegal attribute generated for ${this.id}`);\n      }\n    }\n  }\n}\n\n/* eslint-disable complexity */\nexport function glArrayFromType(glType, {clamped = true} = {}) {\n  // Sorted in some order of likelihood to reduce amount of comparisons\n  switch (glType) {\n    case GL.FLOAT:\n      return Float32Array;\n    case GL.UNSIGNED_SHORT:\n    case GL.UNSIGNED_SHORT_5_6_5:\n    case GL.UNSIGNED_SHORT_4_4_4_4:\n    case GL.UNSIGNED_SHORT_5_5_5_1:\n      return Uint16Array;\n    case GL.UNSIGNED_INT:\n      return Uint32Array;\n    case GL.UNSIGNED_BYTE:\n      return clamped ? Uint8ClampedArray : Uint8Array;\n    case GL.BYTE:\n      return Int8Array;\n    case GL.SHORT:\n      return Int16Array;\n    case GL.INT:\n      return Int32Array;\n    default:\n      throw new Error('Failed to deduce type from array');\n  }\n}\n/* eslint-enable complexity */\n"],"file":"attribute.js"}