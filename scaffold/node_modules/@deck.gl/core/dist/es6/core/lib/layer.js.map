{"version":3,"sources":["../../../../src/core/lib/layer.js"],"names":["COORDINATE_SYSTEM","AttributeManager","removeLayerInSeer","LIFECYCLE","createProps","diffProps","count","log","GL","withParameters","assert","LayerState","LOG_PRIORITY_UPDATE","EMPTY_PROPS","Object","freeze","noop","defaultProps","dataComparator","updateTriggers","numInstances","undefined","visible","pickable","opacity","type","min","max","value","onHover","onClick","coordinateSystem","LNGLAT","coordinateOrigin","parameters","uniforms","framebuffer","animation","getPolygonOffset","layerIndex","highlightedObjectIndex","autoHighlight","highlightColor","counter","Layer","constructor","props","apply","arguments","id","lifecycle","NO_STATE","parentLayer","context","state","internalState","seal","clone","newProps","assign","toString","className","layerName","name","stats","setState","updateObject","setNeedsRedraw","redraw","needsRedraw","getNeedsRedraw","clearRedrawFlags","_getNeedsRedraw","needsUpdate","shouldUpdateState","_getUpdateParams","isPickable","getModels","models","model","getSingleModel","getAttributeManager","attributeManager","getCurrentLayer","layer","getFirstObject","data","object","project","lngLat","viewport","Array","isArray","unproject","xy","projectFlat","unprojectFlat","screenToDevicePixels","screenPixels","deprecated","devicePixelRatio","window","nullPickingColor","encodePickingColor","i","decodePickingColor","color","Uint8Array","i1","i2","i3","index","initializeState","Error","oldProps","changeFlags","propsOrDataChanged","updateState","dataChanged","invalidateAll","finalizeState","delete","draw","opts","getPickingInfo","info","mode","invalidateAttribute","diffReason","invalidate","updateAttributes","getNumInstances","update","transitions","buffers","ignoreUnknownAttributes","changedAttributes","getChangedAttributes","clearChangedFlags","setAttributes","updateTransition","isInTransition","transition","calculateInstancePickingColors","attribute","size","pickingColor","_initialize","gl","_initState","setChangeFlags","propsChanged","viewportChanged","_updateState","program","geometry","getAttributes","clearChangeFlags","_update","stateNeedsUpdate","updateParams","isComposite","_renderLayers","_updateBaseUniforms","_updateModuleSettings","setInstanceCount","_finalize","drawLayer","moduleParameters","picking_uActive","updateModuleSettings","offsets","polygonOffset","pickLayer","getChangeFlags","flags","updateTriggersChanged","keys","join","somethingChanged","printChangeFlags","key","_activeUpdateTrigger","attributeManagerNeedsRedraw","modelNeedsRedraw","addInstanced","instancePickingColors","UNSIGNED_BYTE","_transferState","oldLayer","userData","propName","_checkRequiredProp","propertyName","condition","Math","pow","ONE","setUniforms","settings","pickingHighlightColor","uniformMap"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* global window */\nimport {COORDINATE_SYSTEM} from './constants';\nimport AttributeManager from './attribute-manager';\nimport {removeLayerInSeer} from './seer-integration';\nimport {LIFECYCLE} from '../lifecycle/constants';\nimport {createProps} from '../lifecycle/create-props';\nimport {diffProps} from '../lifecycle/props';\nimport {count} from '../utils/count';\nimport log from '../utils/log';\nimport {GL, withParameters} from 'luma.gl';\nimport assert from '../utils/assert';\n\nimport LayerState from './layer-state';\n\nconst LOG_PRIORITY_UPDATE = 1;\nconst EMPTY_PROPS = Object.freeze({});\nconst noop = () => {};\n\nconst defaultProps = {\n  // data: Special handling for null, see below\n  dataComparator: null,\n  updateTriggers: {}, // Update triggers: a core change detection mechanism in deck.gl\n  numInstances: undefined,\n\n  visible: true,\n  pickable: false,\n  opacity: {type: 'number', min: 0, max: 1, value: 0.8},\n\n  onHover: noop,\n  onClick: noop,\n\n  coordinateSystem: COORDINATE_SYSTEM.LNGLAT,\n  coordinateOrigin: [0, 0, 0],\n\n  parameters: {},\n  uniforms: {},\n  framebuffer: null,\n\n  animation: null, // Passed prop animation functions to evaluate props\n\n  // Offset depth based on layer index to avoid z-fighting.\n  // Negative values pull layer towards the camera\n  // https://www.opengl.org/archives/resources/faq/technical/polygonoffset.htm\n  getPolygonOffset: ({layerIndex}) => [0, -layerIndex * 100],\n\n  // Selection/Highlighting\n  highlightedObjectIndex: null,\n  autoHighlight: false,\n  highlightColor: [0, 0, 128, 128]\n};\n\nlet counter = 0;\n\nexport default class Layer {\n  constructor(/* ...propObjects */) {\n    // Merge supplied props with default props and freeze them.\n    /* eslint-disable prefer-spread */\n    this.props = createProps.apply(this, arguments);\n    /* eslint-enable prefer-spread */\n\n    // Define all members before layer is sealed\n    this.id = this.props.id; // The layer's id, used for matching with layers from last render cycle\n    this.count = counter++; // Keep track of how many layer instances you are generating\n    this.lifecycle = LIFECYCLE.NO_STATE; // Helps track and debug the life cycle of the layers\n    this.parentLayer = null; // reference to the composite layer parent that rendered this layer\n    this.context = null; // Will reference layer manager's context, contains state shared by layers\n    this.state = null; // Will be set to the shared layer state object during layer matching\n    this.internalState = null;\n\n    // Seal the layer\n    Object.seal(this);\n  }\n\n  // clone this layer with modified props\n  clone(newProps) {\n    return new this.constructor(Object.assign({}, this.props, newProps));\n  }\n\n  toString() {\n    const className = this.constructor.layerName || this.constructor.name;\n    return `${className}({id: '${this.props.id}'})`;\n  }\n\n  get stats() {\n    return this.internalState.stats;\n  }\n\n  // Public API\n\n  // Updates selected state members and marks the object for redraw\n  setState(updateObject) {\n    Object.assign(this.state, updateObject);\n    this.setNeedsRedraw();\n  }\n\n  // Sets the redraw flag for this layer, will trigger a redraw next animation frame\n  setNeedsRedraw(redraw = true) {\n    if (this.internalState) {\n      this.internalState.needsRedraw = redraw;\n    }\n  }\n\n  // This layer needs a deep update\n  // TODO - Need to align with existing needsUpdate before uncommenting\n  // For now async props will call layerManager directly\n  // setNeedsUpdate() {\n  //   this.context.layerManager.setNeedsUpdate(String(this));\n  // }\n\n  // Checks state of attributes and model\n  getNeedsRedraw({clearRedrawFlags = false} = {}) {\n    return this._getNeedsRedraw(clearRedrawFlags);\n  }\n\n  // Checks if layer attributes needs updating\n  needsUpdate() {\n    // Call subclass lifecycle method\n    return this.shouldUpdateState(this._getUpdateParams());\n    // End lifecycle method\n  }\n\n  // Returns true if the layer is pickable and visible.\n  isPickable() {\n    return this.props.pickable && this.props.visible;\n  }\n\n  // Return an array of models used by this layer, can be overriden by layer subclass\n  getModels() {\n    return this.state && (this.state.models || (this.state.model ? [this.state.model] : []));\n  }\n\n  // TODO - Gradually phase out, does not support multi model layers\n  getSingleModel() {\n    return this.state && this.state.model;\n  }\n\n  getAttributeManager() {\n    return this.internalState && this.internalState.attributeManager;\n  }\n\n  // Returns the most recent layer that matched to this state\n  // (When reacting to an async event, this layer may no longer be the latest)\n  getCurrentLayer() {\n    return this.internalState && this.internalState.layer;\n  }\n\n  // Use iteration (the only required capability on data) to get first element\n  // deprecated since we are effectively only supporting Arrays\n  getFirstObject() {\n    const {data} = this.props;\n    for (const object of data) {\n      return object;\n    }\n    return null;\n  }\n\n  // PROJECTION METHODS\n\n  // Projects a point with current map state (lat, lon, zoom, pitch, bearing)\n  // TODO - need to be extended to work with COORDINATE_SYSTEM.METERS,IDENTITY\n  // TODO - need to be extended to work with multiple `views`\n  project(lngLat) {\n    const {viewport} = this.context;\n    assert(Array.isArray(lngLat));\n    return viewport.project(lngLat);\n  }\n\n  unproject(xy) {\n    const {viewport} = this.context;\n    assert(Array.isArray(xy));\n    return viewport.unproject(xy);\n  }\n\n  projectFlat(lngLat) {\n    const {viewport} = this.context;\n    assert(Array.isArray(lngLat));\n    return viewport.projectFlat(lngLat);\n  }\n\n  unprojectFlat(xy) {\n    const {viewport} = this.context;\n    assert(Array.isArray(xy));\n    return viewport.unprojectFlat(xy);\n  }\n\n  // TODO - needs to refer to context for devicePixels setting\n  screenToDevicePixels(screenPixels) {\n    log.deprecated('screenToDevicePixels', 'DeckGL prop useDevicePixels for conversion')();\n    const devicePixelRatio = typeof window !== 'undefined' ? window.devicePixelRatio : 1;\n    return screenPixels * devicePixelRatio;\n  }\n\n  // Returns the picking color that doesn't match any subfeature\n  // Use if some graphics do not belong to any pickable subfeature\n  // @return {Array} - a black color\n  nullPickingColor() {\n    return [0, 0, 0];\n  }\n\n  // Returns the picking color that doesn't match any subfeature\n  // Use if some graphics do not belong to any pickable subfeature\n  encodePickingColor(i) {\n    assert((((i + 1) >> 24) & 255) === 0, 'index out of picking color range');\n    return [(i + 1) & 255, ((i + 1) >> 8) & 255, (((i + 1) >> 8) >> 8) & 255];\n  }\n\n  // Returns the index corresponding to a picking color that doesn't match any subfeature\n  // @param {Uint8Array} color - color array to be decoded\n  // @return {Array} - the decoded picking color\n  decodePickingColor(color) {\n    assert(color instanceof Uint8Array);\n    const [i1, i2, i3] = color;\n    // 1 was added to seperate from no selection\n    const index = i1 + i2 * 256 + i3 * 65536 - 1;\n    return index;\n  }\n\n  // //////////////////////////////////////////////////\n  // LIFECYCLE METHODS, overridden by the layer subclasses\n\n  // Called once to set up the initial state\n  // App can create WebGL resources\n  initializeState() {\n    throw new Error(`Layer ${this} has not defined initializeState`);\n  }\n\n  // Let's layer control if updateState should be called\n  shouldUpdateState({oldProps, props, context, changeFlags}) {\n    return changeFlags.propsOrDataChanged;\n  }\n\n  // Default implementation, all attributes will be invalidated and updated\n  // when data changes\n  updateState({oldProps, props, context, changeFlags}) {\n    const attributeManager = this.getAttributeManager();\n    if (changeFlags.dataChanged && attributeManager) {\n      attributeManager.invalidateAll();\n    }\n  }\n\n  // Called once when layer is no longer matched and state will be discarded\n  // App can destroy WebGL resources here\n  finalizeState() {\n    for (const model of this.getModels()) {\n      model.delete();\n    }\n  }\n\n  // If state has a model, draw it with supplied uniforms\n  draw(opts) {\n    for (const model of this.getModels()) {\n      model.draw(opts);\n    }\n  }\n\n  // called to populate the info object that is passed to the event handler\n  // @return null to cancel event\n  getPickingInfo({info, mode}) {\n    const {index} = info;\n\n    if (index >= 0) {\n      // If props.data is an indexable array, get the object\n      if (Array.isArray(this.props.data)) {\n        info.object = this.props.data[index];\n      }\n    }\n\n    return info;\n  }\n\n  // END LIFECYCLE METHODS\n  // //////////////////////////////////////////////////\n\n  // INTERNAL METHODS\n\n  // Default implementation of attribute invalidation, can be redefined\n  invalidateAttribute(name = 'all', diffReason = '') {\n    const attributeManager = this.getAttributeManager();\n    if (!attributeManager) {\n      return;\n    }\n\n    if (name === 'all') {\n      log.log(LOG_PRIORITY_UPDATE, `updateTriggers invalidating all attributes: ${diffReason}`)();\n      attributeManager.invalidateAll();\n    } else {\n      log.log(\n        LOG_PRIORITY_UPDATE,\n        `updateTriggers invalidating attribute ${name}: ${diffReason}`\n      )();\n      attributeManager.invalidate(name);\n    }\n  }\n\n  // Calls attribute manager to update any WebGL attributes\n  updateAttributes(props) {\n    const attributeManager = this.getAttributeManager();\n    if (!attributeManager) {\n      return;\n    }\n\n    // Figure out data length\n    const numInstances = this.getNumInstances(props);\n\n    attributeManager.update({\n      data: props.data,\n      numInstances,\n      props,\n      transitions: props.transitions,\n      buffers: props,\n      context: this,\n      // Don't worry about non-attribute props\n      ignoreUnknownAttributes: true\n    });\n\n    const model = this.getSingleModel();\n    if (model) {\n      const changedAttributes = attributeManager.getChangedAttributes({clearChangedFlags: true});\n      model.setAttributes(changedAttributes);\n    }\n  }\n\n  // Update attribute transition\n  updateTransition() {\n    const model = this.getSingleModel();\n    const attributeManager = this.getAttributeManager();\n    const isInTransition = attributeManager && attributeManager.updateTransition();\n\n    if (model && isInTransition) {\n      model.setAttributes(attributeManager.getChangedAttributes({transition: true}));\n    }\n  }\n\n  calculateInstancePickingColors(attribute, {numInstances}) {\n    const {value, size} = attribute;\n    // add 1 to index to seperate from no selection\n    for (let i = 0; i < numInstances; i++) {\n      const pickingColor = this.encodePickingColor(i);\n      value[i * size + 0] = pickingColor[0];\n      value[i * size + 1] = pickingColor[1];\n      value[i * size + 2] = pickingColor[2];\n    }\n  }\n\n  // Deduces numer of instances. Intention is to support:\n  // - Explicit setting of numInstances\n  // - Auto-deduction for ES6 containers that define a size member\n  // - Auto-deduction for Classic Arrays via the built-in length attribute\n  // - Auto-deduction via arrays\n  getNumInstances(props) {\n    props = props || this.props;\n\n    // First check if the layer has set its own value\n    if (this.state && this.state.numInstances !== undefined) {\n      return this.state.numInstances;\n    }\n\n    // Check if app has provided an explicit value\n    if (props.numInstances !== undefined) {\n      return props.numInstances;\n    }\n\n    // Use container library to get a count for any ES6 container or object\n    const {data} = this.props;\n    return count(data);\n  }\n\n  // LAYER MANAGER API\n  // Should only be called by the deck.gl LayerManager class\n\n  // Called by layer manager when a new layer is found\n  /* eslint-disable max-statements */\n  _initialize() {\n    assert(this.context.gl);\n\n    this._initState();\n\n    // Call subclass lifecycle methods\n    this.initializeState(this.context);\n    // End subclass lifecycle methods\n\n    // TODO deprecated, for backwards compatibility with older layers\n    // in case layer resets state\n    this.state.attributeManager = this.getAttributeManager();\n\n    // initializeState callback tends to clear state\n    this.setChangeFlags({dataChanged: true, propsChanged: true, viewportChanged: true});\n\n    this.internalState.oldProps = EMPTY_PROPS;\n    this._updateState();\n\n    const model = this.getSingleModel();\n    if (model) {\n      model.id = this.props.id;\n      model.program.id = `${this.props.id}-program`;\n      model.geometry.id = `${this.props.id}-geometry`;\n      model.setAttributes(this.getAttributeManager().getAttributes());\n    }\n\n    // Clear temporary states\n    this.clearChangeFlags();\n    this.internalState.oldProps = null;\n  }\n\n  // Called by layer manager\n  // if this layer is new (not matched with an existing layer) oldProps will be empty object\n  _update() {\n    // Call subclass lifecycle method\n    const stateNeedsUpdate = this.needsUpdate();\n    // End lifecycle method\n\n    if (stateNeedsUpdate) {\n      this._updateState();\n    }\n\n    // Clear temporary states\n    this.clearChangeFlags();\n    this.internalState.oldProps = null;\n  }\n  /* eslint-enable max-statements */\n\n  _updateState() {\n    const updateParams = this._getUpdateParams();\n    // Call subclass lifecycle methods\n    this.updateState(updateParams);\n    // End subclass lifecycle methods\n\n    // Render or update previously rendered sublayers\n    if (this.isComposite) {\n      this._renderLayers();\n    }\n\n    // Add any subclass attributes\n    this.updateAttributes(this.props);\n    this._updateBaseUniforms();\n    this._updateModuleSettings();\n\n    // Note: Automatic instance count update only works for single layers\n    if (this.state.model) {\n      this.state.model.setInstanceCount(this.getNumInstances());\n    }\n  }\n\n  // Called by manager when layer is about to be disposed\n  // Note: not guaranteed to be called on application shutdown\n  _finalize() {\n    assert(this.internalState && this.state);\n\n    // Call subclass lifecycle method\n    this.finalizeState(this.context);\n    // End lifecycle method\n    removeLayerInSeer(this.id);\n  }\n\n  // Calculates uniforms\n  drawLayer({moduleParameters = null, uniforms = {}, parameters = {}}) {\n    if (!uniforms.picking_uActive) {\n      this.updateTransition();\n    }\n\n    // TODO/ib - hack move to luma Model.draw\n    if (moduleParameters) {\n      for (const model of this.getModels()) {\n        model.updateModuleSettings(moduleParameters);\n      }\n    }\n\n    // Apply polygon offset to avoid z-fighting\n    // TODO - move to draw-layers\n    const {getPolygonOffset} = this.props;\n    const offsets = (getPolygonOffset && getPolygonOffset(uniforms)) || [0, 0];\n    parameters.polygonOffset = offsets;\n\n    // Call subclass lifecycle method\n    withParameters(this.context.gl, parameters, () => {\n      this.draw({moduleParameters, uniforms, parameters, context: this.context});\n    });\n    // End lifecycle method\n  }\n\n  // {uniforms = {}, ...opts}\n  pickLayer(opts) {\n    // Call subclass lifecycle method\n    return this.getPickingInfo(opts);\n    // End lifecycle method\n  }\n\n  // Helper methods\n  getChangeFlags() {\n    return this.internalState.changeFlags;\n  }\n\n  // Dirty some change flags, will be handled by updateLayer\n  /* eslint-disable complexity */\n  setChangeFlags(flags) {\n    this.internalState.changeFlags = this.internalState.changeFlags || {};\n    const changeFlags = this.internalState.changeFlags;\n\n    // Update primary flags\n    if (flags.dataChanged && !changeFlags.dataChanged) {\n      changeFlags.dataChanged = flags.dataChanged;\n      log.log(LOG_PRIORITY_UPDATE + 1, () => `dataChanged: ${flags.dataChanged} in ${this.id}`)();\n    }\n    if (flags.updateTriggersChanged && !changeFlags.updateTriggersChanged) {\n      changeFlags.updateTriggersChanged =\n        changeFlags.updateTriggersChanged && flags.updateTriggersChanged\n          ? Object.assign({}, flags.updateTriggersChanged, changeFlags.updateTriggersChanged)\n          : flags.updateTriggersChanged || changeFlags.updateTriggersChanged;\n      log.log(\n        LOG_PRIORITY_UPDATE + 1,\n        () =>\n          'updateTriggersChanged: ' +\n          `${Object.keys(flags.updateTriggersChanged).join(', ')} in ${this.id}`\n      )();\n    }\n    if (flags.propsChanged && !changeFlags.propsChanged) {\n      changeFlags.propsChanged = flags.propsChanged;\n      log.log(LOG_PRIORITY_UPDATE + 1, () => `propsChanged: ${flags.propsChanged} in ${this.id}`)();\n    }\n    if (flags.viewportChanged && !changeFlags.viewportChanged) {\n      changeFlags.viewportChanged = flags.viewportChanged;\n      log.log(\n        LOG_PRIORITY_UPDATE + 2,\n        () => `viewportChanged: ${flags.viewportChanged} in ${this.id}`\n      )();\n    }\n\n    // Update composite flags\n    const propsOrDataChanged =\n      flags.dataChanged || flags.updateTriggersChanged || flags.propsChanged;\n    changeFlags.propsOrDataChanged = changeFlags.propsOrDataChanged || propsOrDataChanged;\n    changeFlags.somethingChanged =\n      changeFlags.somethingChanged || propsOrDataChanged || flags.viewportChanged;\n  }\n  /* eslint-enable complexity */\n\n  // Clear all changeFlags, typically after an update\n  clearChangeFlags() {\n    this.internalState.changeFlags = {\n      // Primary changeFlags, can be strings stating reason for change\n      dataChanged: false,\n      propsChanged: false,\n      updateTriggersChanged: false,\n      viewportChanged: false,\n\n      // Derived changeFlags\n      propsOrDataChanged: false,\n      somethingChanged: false\n    };\n  }\n\n  printChangeFlags() {\n    const flags = this.internalState.changeFlags;\n    return `\\\n${flags.dataChanged ? 'data ' : ''}\\\n${flags.propsChanged ? 'props ' : ''}\\\n${flags.updateTriggersChanged ? 'triggers ' : ''}\\\n${flags.viewportChanged ? 'viewport' : ''}\\\n`;\n  }\n\n  // Compares the layers props with old props from a matched older layer\n  // and extracts change flags that describe what has change so that state\n  // can be update correctly with minimal effort\n  // TODO - arguments for testing only\n  diffProps(newProps, oldProps) {\n    const changeFlags = diffProps(newProps, oldProps);\n\n    // iterate over changedTriggers\n    if (changeFlags.updateTriggersChanged) {\n      for (const key in changeFlags.updateTriggersChanged) {\n        if (changeFlags.updateTriggersChanged[key]) {\n          this._activeUpdateTrigger(key);\n        }\n      }\n    }\n\n    return this.setChangeFlags(changeFlags);\n  }\n\n  // PRIVATE METHODS\n\n  _getUpdateParams() {\n    return {\n      props: this.props,\n      oldProps: this.internalState.oldProps || this.props,\n      context: this.context,\n      changeFlags: this.internalState.changeFlags\n    };\n  }\n\n  // Checks state of attributes and model\n  _getNeedsRedraw(clearRedrawFlags) {\n    // this method may be called by the render loop as soon a the layer\n    // has been created, so guard against uninitialized state\n    if (!this.internalState) {\n      return false;\n    }\n\n    let redraw = false;\n    redraw = redraw || (this.internalState.needsRedraw && this.id);\n    this.internalState.needsRedraw = this.internalState.needsRedraw && !clearRedrawFlags;\n\n    // TODO - is attribute manager needed? - Model should be enough.\n    const attributeManager = this.getAttributeManager();\n    const attributeManagerNeedsRedraw =\n      attributeManager && attributeManager.getNeedsRedraw({clearRedrawFlags});\n    redraw = redraw || attributeManagerNeedsRedraw;\n\n    for (const model of this.getModels()) {\n      let modelNeedsRedraw = model.getNeedsRedraw({clearRedrawFlags});\n      if (modelNeedsRedraw && typeof modelNeedsRedraw !== 'string') {\n        modelNeedsRedraw = `model ${model.id}`;\n      }\n      redraw = redraw || modelNeedsRedraw;\n    }\n\n    return redraw;\n  }\n\n  _initState() {\n    assert(!this.internalState && !this.state);\n\n    const attributeManager = new AttributeManager(this.context.gl, {\n      id: this.props.id,\n      stats: this.context.stats\n    });\n\n    // All instanced layers get instancePickingColors attribute by default\n    // Their shaders can use it to render a picking scene\n    // TODO - this slightly slows down non instanced layers\n    attributeManager.addInstanced({\n      instancePickingColors: {\n        type: GL.UNSIGNED_BYTE,\n        size: 3,\n        update: this.calculateInstancePickingColors\n      }\n    });\n\n    this.internalState = new LayerState({\n      attributeManager\n    });\n    this.state = {};\n    // TODO deprecated, for backwards compatibility with older layers\n    this.state.attributeManager = this.getAttributeManager();\n  }\n\n  // Called by layer manager to transfer state from an old layer\n  _transferState(oldLayer) {\n    const {state, internalState, props} = oldLayer;\n    assert(state && internalState);\n\n    internalState.oldProps = props;\n\n    if (this === oldLayer) {\n      return;\n    }\n\n    // Move state\n    state.layer = this;\n    this.state = state;\n    this.internalState = internalState;\n    // Note: We keep the state ref on old layers to support async actions\n    // oldLayer.state = null;\n\n    // Update model layer reference\n    for (const model of this.getModels()) {\n      model.userData.layer = this;\n    }\n\n    this.diffProps(this.props, props);\n  }\n\n  // Operate on each changed triggers, will be called when an updateTrigger changes\n  _activeUpdateTrigger(propName) {\n    this.invalidateAttribute(propName);\n  }\n\n  //  Helper to check that required props are supplied\n  _checkRequiredProp(propertyName, condition) {\n    const value = this.props[propertyName];\n    if (value === undefined) {\n      throw new Error(`Property ${propertyName} undefined in layer ${this}`);\n    }\n    if (condition && !condition(value)) {\n      throw new Error(`Bad property ${propertyName} in layer ${this}`);\n    }\n  }\n\n  _updateBaseUniforms() {\n    const uniforms = {\n      // apply gamma to opacity to make it visually \"linear\"\n      opacity: Math.pow(this.props.opacity, 1 / 2.2),\n      ONE: 1.0\n    };\n    for (const model of this.getModels()) {\n      model.setUniforms(uniforms);\n    }\n\n    // TODO - set needsRedraw on the model(s)?\n    this.setNeedsRedraw();\n  }\n\n  _updateModuleSettings() {\n    const settings = {\n      pickingHighlightColor: this.props.highlightColor\n    };\n    for (const model of this.getModels()) {\n      model.updateModuleSettings(settings);\n    }\n  }\n\n  // DEPRECATED METHODS\n\n  // Updates selected state members and marks the object for redraw\n  setUniforms(uniformMap) {\n    for (const model of this.getModels()) {\n      model.setUniforms(uniformMap);\n    }\n\n    // TODO - set needsRedraw on the model(s)?\n    this.setNeedsRedraw();\n    log.deprecated('layer.setUniforms', 'model.setUniforms')();\n  }\n}\n\nLayer.layerName = 'Layer';\nLayer.defaultProps = defaultProps;\n"],"file":"layer.js"}