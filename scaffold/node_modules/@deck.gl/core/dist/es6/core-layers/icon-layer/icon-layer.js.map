{"version":3,"sources":["../../../../src/core-layers/icon-layer/icon-layer.js"],"names":["Layer","experimental","fp64LowPart","enable64bitSupport","GL","Model","Geometry","Texture2D","loadTextures","vs","fs","DEFAULT_COLOR","DEFAULT_TEXTURE_MIN_FILTER","LINEAR_MIPMAP_LINEAR","DEFAULT_TEXTURE_MAG_FILTER","LINEAR","defaultProps","iconAtlas","iconMapping","sizeScale","fp64","getPosition","x","position","getIcon","icon","getColor","color","getSize","size","getAngle","angle","IconLayer","getShaders","projectModule","props","modules","initializeState","attributeManager","getAttributeManager","addInstanced","instancePositions","transition","accessor","update","calculateInstancePositions","instancePositions64xyLow","calculateInstancePositions64xyLow","instanceSizes","calculateInstanceSizes","instanceOffsets","calculateInstanceOffsets","instanceIconFrames","calculateInstanceIconFrames","instanceColorModes","type","UNSIGNED_BYTE","calculateInstanceColorMode","instanceColors","calculateInstanceColors","instanceAngles","calculateInstanceAngles","updateState","oldProps","changeFlags","invalidate","setParameters","TEXTURE_MIN_FILTER","TEXTURE_MAG_FILTER","setState","iconsTexture","context","gl","urls","then","texture","state","model","delete","_getModel","invalidateAll","draw","uniforms","render","Object","assign","iconsTextureDim","width","height","positions","id","geometry","drawMode","TRIANGLE_FAN","attributes","Float32Array","isInstanced","shaderCache","attribute","data","value","i","object","isFP64","isGeneric","point","isNaN","rect","anchorX","anchorY","colorMode","mask","y","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport {Layer, experimental} from '../../core';\nconst {fp64LowPart, enable64bitSupport} = experimental;\nimport {GL, Model, Geometry, Texture2D, loadTextures} from 'luma.gl';\n\nimport vs from './icon-layer-vertex.glsl';\nimport fs from './icon-layer-fragment.glsl';\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\nconst DEFAULT_TEXTURE_MIN_FILTER = GL.LINEAR_MIPMAP_LINEAR;\n// GL.LINEAR is the default value but explicitly set it here\nconst DEFAULT_TEXTURE_MAG_FILTER = GL.LINEAR;\n\n/*\n * @param {object} props\n * @param {Texture2D | string} props.iconAtlas - atlas image url or texture\n * @param {object} props.iconMapping - icon names mapped to icon definitions\n * @param {object} props.iconMapping[icon_name].x - x position of icon on the atlas image\n * @param {object} props.iconMapping[icon_name].y - y position of icon on the atlas image\n * @param {object} props.iconMapping[icon_name].width - width of icon on the atlas image\n * @param {object} props.iconMapping[icon_name].height - height of icon on the atlas image\n * @param {object} props.iconMapping[icon_name].anchorX - x anchor of icon on the atlas image,\n *   default to width / 2\n * @param {object} props.iconMapping[icon_name].anchorY - y anchor of icon on the atlas image,\n *   default to height / 2\n * @param {object} props.iconMapping[icon_name].mask - whether icon is treated as a transparency\n *   mask. If true, user defined color is applied. If false, original color from the image is\n *   applied. Default to false.\n * @param {number} props.size - icon size in pixels\n * @param {func} props.getPosition - returns anchor position of the icon, in [lng, lat, z]\n * @param {func} props.getIcon - returns icon name as a string\n * @param {func} props.getSize - returns icon size multiplier as a number\n * @param {func} props.getColor - returns color of the icon in [r, g, b, a]. Only works on icons\n *   with mask: true.\n * @param {func} props.getAngle - returns rotating angle (in degree) of the icon.\n */\nconst defaultProps = {\n  iconAtlas: null,\n  iconMapping: {},\n  sizeScale: 1,\n  fp64: false,\n\n  getPosition: x => x.position,\n  getIcon: x => x.icon,\n  getColor: x => x.color || DEFAULT_COLOR,\n  getSize: x => x.size || 1,\n  getAngle: x => x.angle || 0\n};\n\nexport default class IconLayer extends Layer {\n  getShaders() {\n    const projectModule = enable64bitSupport(this.props) ? 'project64' : 'project32';\n    return {vs, fs, modules: [projectModule, 'picking']};\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      instancePositions: {\n        size: 3,\n        transition: true,\n        accessor: 'getPosition',\n        update: this.calculateInstancePositions\n      },\n      instancePositions64xyLow: {\n        size: 2,\n        accessor: 'getPosition',\n        update: this.calculateInstancePositions64xyLow\n      },\n      instanceSizes: {\n        size: 1,\n        transition: true,\n        accessor: 'getSize',\n        update: this.calculateInstanceSizes\n      },\n      instanceOffsets: {size: 2, accessor: 'getIcon', update: this.calculateInstanceOffsets},\n      instanceIconFrames: {size: 4, accessor: 'getIcon', update: this.calculateInstanceIconFrames},\n      instanceColorModes: {\n        size: 1,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getIcon',\n        update: this.calculateInstanceColorMode\n      },\n      instanceColors: {\n        size: 4,\n        type: GL.UNSIGNED_BYTE,\n        transition: true,\n        accessor: 'getColor',\n        update: this.calculateInstanceColors\n      },\n      instanceAngles: {\n        size: 1,\n        transition: true,\n        accessor: 'getAngle',\n        update: this.calculateInstanceAngles\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  updateState({oldProps, props, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n\n    const {iconAtlas, iconMapping} = props;\n\n    if (oldProps.iconMapping !== iconMapping) {\n      const attributeManager = this.getAttributeManager();\n      attributeManager.invalidate('instanceOffsets');\n      attributeManager.invalidate('instanceIconFrames');\n      attributeManager.invalidate('instanceColorModes');\n    }\n\n    if (oldProps.iconAtlas !== iconAtlas) {\n      if (iconAtlas instanceof Texture2D) {\n        iconAtlas.setParameters({\n          [GL.TEXTURE_MIN_FILTER]: DEFAULT_TEXTURE_MIN_FILTER,\n          [GL.TEXTURE_MAG_FILTER]: DEFAULT_TEXTURE_MAG_FILTER\n        });\n        this.setState({iconsTexture: iconAtlas});\n      } else if (typeof iconAtlas === 'string') {\n        loadTextures(this.context.gl, {\n          urls: [iconAtlas]\n        }).then(([texture]) => {\n          texture.setParameters({\n            [GL.TEXTURE_MIN_FILTER]: DEFAULT_TEXTURE_MIN_FILTER,\n            [GL.TEXTURE_MAG_FILTER]: DEFAULT_TEXTURE_MAG_FILTER\n          });\n          this.setState({iconsTexture: texture});\n        });\n      }\n    }\n\n    if (props.fp64 !== oldProps.fp64) {\n      const {gl} = this.context;\n      if (this.state.model) {\n        this.state.model.delete();\n      }\n      this.setState({model: this._getModel(gl)});\n      this.state.attributeManager.invalidateAll();\n    }\n  }\n\n  draw({uniforms}) {\n    const {sizeScale} = this.props;\n    const {iconsTexture} = this.state;\n\n    if (iconsTexture) {\n      this.state.model.render(\n        Object.assign({}, uniforms, {\n          iconsTexture,\n          iconsTextureDim: [iconsTexture.width, iconsTexture.height],\n          sizeScale\n        })\n      );\n    }\n  }\n\n  _getModel(gl) {\n    const positions = [-1, -1, 0, -1, 1, 0, 1, 1, 0, 1, -1, 0];\n\n    return new Model(\n      gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: GL.TRIANGLE_FAN,\n          attributes: {\n            positions: new Float32Array(positions)\n          }\n        }),\n        isInstanced: true,\n        shaderCache: this.context.shaderCache\n      })\n    );\n  }\n\n  calculateInstancePositions(attribute) {\n    const {data, getPosition} = this.props;\n    const {value} = attribute;\n    let i = 0;\n    for (const object of data) {\n      const position = getPosition(object);\n      value[i++] = position[0];\n      value[i++] = position[1];\n      value[i++] = position[2] || 0;\n    }\n  }\n\n  calculateInstancePositions64xyLow(attribute) {\n    const isFP64 = enable64bitSupport(this.props);\n    attribute.isGeneric = !isFP64;\n\n    if (!isFP64) {\n      attribute.value = new Float32Array(2);\n      return;\n    }\n\n    const {data, getPosition} = this.props;\n    const {value} = attribute;\n    let i = 0;\n    for (const point of data) {\n      const position = getPosition(point);\n      value[i++] = fp64LowPart(position[0]);\n      value[i++] = fp64LowPart(position[1]);\n    }\n  }\n\n  calculateInstanceSizes(attribute) {\n    const {data, getSize} = this.props;\n    const {value} = attribute;\n    let i = 0;\n    for (const object of data) {\n      value[i++] = getSize(object);\n    }\n  }\n\n  calculateInstanceAngles(attribute) {\n    const {data, getAngle} = this.props;\n    const {value} = attribute;\n    let i = 0;\n    for (const object of data) {\n      value[i++] = getAngle(object);\n    }\n  }\n\n  calculateInstanceColors(attribute) {\n    const {data, getColor} = this.props;\n    const {value} = attribute;\n    let i = 0;\n    for (const object of data) {\n      const color = getColor(object);\n\n      value[i++] = color[0];\n      value[i++] = color[1];\n      value[i++] = color[2];\n      value[i++] = isNaN(color[3]) ? 255 : color[3];\n    }\n  }\n\n  calculateInstanceOffsets(attribute) {\n    const {data, iconMapping, getIcon} = this.props;\n    const {value} = attribute;\n    let i = 0;\n    for (const object of data) {\n      const icon = getIcon(object);\n      const rect = iconMapping[icon] || {};\n      value[i++] = rect.width / 2 - rect.anchorX || 0;\n      value[i++] = rect.height / 2 - rect.anchorY || 0;\n    }\n  }\n\n  calculateInstanceColorMode(attribute) {\n    const {data, iconMapping, getIcon} = this.props;\n    const {value} = attribute;\n    let i = 0;\n    for (const object of data) {\n      const icon = getIcon(object);\n      const colorMode = iconMapping[icon] && iconMapping[icon].mask;\n      value[i++] = colorMode ? 1 : 0;\n    }\n  }\n\n  calculateInstanceIconFrames(attribute) {\n    const {data, iconMapping, getIcon} = this.props;\n    const {value} = attribute;\n    let i = 0;\n    for (const object of data) {\n      const icon = getIcon(object);\n      const rect = iconMapping[icon] || {};\n      value[i++] = rect.x || 0;\n      value[i++] = rect.y || 0;\n      value[i++] = rect.width || 0;\n      value[i++] = rect.height || 0;\n    }\n  }\n}\n\nIconLayer.layerName = 'IconLayer';\nIconLayer.defaultProps = defaultProps;\n"],"file":"icon-layer.js"}