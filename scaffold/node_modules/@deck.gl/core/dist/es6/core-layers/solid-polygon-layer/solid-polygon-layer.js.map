{"version":3,"sources":["../../../../src/core-layers/solid-polygon-layer/solid-polygon-layer.js"],"names":["Layer","experimental","enable64bitSupport","get","GL","Model","Geometry","hasFeature","FEATURES","PolygonTesselator","vs","fs","defaultLineColor","defaultFillColor","defaultProps","filled","extruded","wireframe","fp64","elevationScale","getPolygon","f","getElevation","getFillColor","getLineColor","lightSettings","SIDE_FILL_POSITIONS","Float32Array","SIDE_WIRE_POSITIONS","ATTRIBUTE_MAPS","TOP","indices","instanced","positions","positions64xyLow","elevations","fillColors","name","pickingColors","SIDE","nextPositions","nextPositions64xyLow","WIRE","lineColors","SolidPolygonLayer","getShaders","projectModule","props","modules","initializeState","gl","context","setState","numInstances","IndexType","ELEMENT_INDEX_UINT32","Uint32Array","Uint16Array","attributeManager","getAttributeManager","noAlloc","add","size","isIndexed","update","calculateIndices","accessor","calculatePositions","calculatePositionsLow","calculateNextPositions","calculateNextPositionsLow","calculateElevations","alias","type","UNSIGNED_BYTE","calculateFillColors","calculateLineColors","calculatePickingColors","draw","uniforms","renderUniforms","Object","assign","state","models","forEach","model","render","updateState","updateParams","updateGeometry","oldProps","regenerateModels","delete","modelsChanged","_getModels","invalidate","changeFlags","geometryConfigChanged","dataChanged","updateTriggersChanged","all","polygons","data","map","polygonTesselator","invalidateAll","updatePositions","updateAttributes","buffers","ignoreUnknownAttributes","_updateAttributes","getAttributes","changedAttributes","getChangedAttributes","clearChangedFlags","attributes","modelsByName","modelName","setVertexCount","numVertex","setInstanceCount","attributeMap","newAttributes","attributeName","attribute","attributeOverride","setAttributes","id","geometry","drawMode","TRIANGLES","vertexPositions","isGeneric","value","isSideVertex","vertexCount","shaderCache","TRIANGLE_STRIP","isInstanced","LINE_STRIP","filter","Boolean","target","ELEMENT_ARRAY_BUFFER","length","isFP64","polygonIndex","colors","key","getColor","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, experimental} from '../../core';\nconst {enable64bitSupport, get} = experimental;\nimport {GL, Model, Geometry, hasFeature, FEATURES} from 'luma.gl';\n\n// Polygon geometry generation is managed by the polygon tesselator\nimport {PolygonTesselator} from './polygon-tesselator';\n\nimport vs from './solid-polygon-layer-vertex.glsl';\nimport fs from './solid-polygon-layer-fragment.glsl';\n\nconst defaultLineColor = [0x0, 0x0, 0x0, 0xff];\nconst defaultFillColor = [0x0, 0x0, 0x0, 0xff];\n\nconst defaultProps = {\n  filled: true,\n  // Whether to extrude\n  extruded: false,\n  // Whether to draw a GL.LINES wireframe of the polygon\n  wireframe: false,\n  fp64: false,\n\n  // elevation multiplier\n  elevationScale: 1,\n\n  // Accessor for polygon geometry\n  getPolygon: f => get(f, 'polygon') || get(f, 'geometry.coordinates'),\n  // Accessor for extrusion height\n  getElevation: f => get(f, 'elevation') || get(f, 'properties.height') || 0,\n  // Accessor for colors\n  getFillColor: f => get(f, 'fillColor') || get(f, 'properties.color') || defaultFillColor,\n  getLineColor: f => get(f, 'lineColor') || get(f, 'properties.color') || defaultLineColor,\n\n  // Optional settings for 'lighting' shader module\n  lightSettings: {}\n};\n\n// Side model attributes\nconst SIDE_FILL_POSITIONS = new Float32Array([\n  // top left corner\n  0,\n  1,\n  // bottom left corner\n  0,\n  0,\n  // top right corner\n  1,\n  1,\n  // bottom right corner\n  1,\n  0\n]);\nconst SIDE_WIRE_POSITIONS = new Float32Array([\n  // top right corner\n  1,\n  1,\n  // top left corner\n  0,\n  1,\n  // bottom left corner\n  0,\n  0,\n  // bottom right corner\n  1,\n  0\n]);\n\n// Model types\nconst ATTRIBUTE_MAPS = {\n  TOP: {\n    indices: {instanced: 0},\n    positions: {instanced: 0},\n    positions64xyLow: {instanced: 0},\n    elevations: {instanced: 0},\n    fillColors: {name: 'colors', instanced: 0},\n    pickingColors: {instanced: 0}\n  },\n  SIDE: {\n    positions: {instanced: 1},\n    positions64xyLow: {instanced: 1},\n    nextPositions: {instanced: 1},\n    nextPositions64xyLow: {instanced: 1},\n    elevations: {instanced: 1},\n    fillColors: {name: 'colors', instanced: 1},\n    pickingColors: {instanced: 1}\n  },\n  WIRE: {\n    positions: {instanced: 1},\n    positions64xyLow: {instanced: 1},\n    nextPositions: {instanced: 1},\n    nextPositions64xyLow: {instanced: 1},\n    elevations: {instanced: 1},\n    lineColors: {name: 'colors', instanced: 1},\n    pickingColors: {instanced: 1}\n  }\n};\n\nexport default class SolidPolygonLayer extends Layer {\n  getShaders() {\n    const projectModule = enable64bitSupport(this.props) ? 'project64' : 'project32';\n    return {vs, fs, modules: [projectModule, 'lighting', 'picking']};\n  }\n\n  initializeState() {\n    const {gl} = this.context;\n    this.setState({\n      numInstances: 0,\n      IndexType: hasFeature(gl, FEATURES.ELEMENT_INDEX_UINT32) ? Uint32Array : Uint16Array\n    });\n\n    const attributeManager = this.getAttributeManager();\n    const noAlloc = true;\n    /* eslint-disable max-len */\n    attributeManager.add({\n      indices: {size: 1, isIndexed: true, update: this.calculateIndices, noAlloc},\n      positions: {\n        size: 3,\n        accessor: ['extruded', 'fp64'],\n        update: this.calculatePositions,\n        noAlloc\n      },\n      positions64xyLow: {size: 2, accessor: 'fp64', update: this.calculatePositionsLow},\n      nextPositions: {\n        size: 3,\n        accessor: ['extruded', 'fp64'],\n        update: this.calculateNextPositions,\n        noAlloc\n      },\n      nextPositions64xyLow: {size: 2, accessor: 'fp64', update: this.calculateNextPositionsLow},\n      elevations: {\n        size: 1,\n        accessor: ['extruded', 'getElevation'],\n        update: this.calculateElevations,\n        noAlloc\n      },\n      fillColors: {\n        alias: 'colors',\n        size: 4,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getFillColor',\n        update: this.calculateFillColors,\n        noAlloc\n      },\n      lineColors: {\n        alias: 'colors',\n        size: 4,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getLineColor',\n        update: this.calculateLineColors,\n        noAlloc\n      },\n      pickingColors: {size: 3, type: GL.UNSIGNED_BYTE, update: this.calculatePickingColors, noAlloc}\n    });\n    /* eslint-enable max-len */\n  }\n\n  draw({uniforms}) {\n    const {extruded, elevationScale} = this.props;\n\n    const renderUniforms = Object.assign({}, uniforms, {\n      extruded: extruded ? 1.0 : 0.0,\n      elevationScale\n    });\n\n    this.state.models.forEach(model => {\n      model.render(renderUniforms);\n    });\n  }\n\n  updateState(updateParams) {\n    super.updateState(updateParams);\n\n    this.updateGeometry(updateParams);\n\n    const {props, oldProps} = updateParams;\n\n    const regenerateModels =\n      props.fp64 !== oldProps.fp64 ||\n      props.filled !== oldProps.filled ||\n      props.extruded !== oldProps.extruded ||\n      props.wireframe !== oldProps.wireframe;\n\n    if (regenerateModels) {\n      if (this.state.models) {\n        this.state.models.forEach(model => model.delete());\n      }\n\n      this.setState(\n        Object.assign(\n          {\n            // Set a flag to set attributes to new models\n            modelsChanged: true\n          },\n          this._getModels(this.context.gl)\n        )\n      );\n    }\n\n    if (props.extruded !== oldProps.extruded) {\n      this.state.attributeManager.invalidate('extruded');\n    }\n    if (props.fp64 !== oldProps.fp64) {\n      this.state.attributeManager.invalidate('fp64');\n    }\n  }\n\n  updateGeometry({props, oldProps, changeFlags}) {\n    const geometryConfigChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPolygon));\n\n    // When the geometry config  or the data is changed,\n    // tessellator needs to be invoked\n    if (geometryConfigChanged) {\n      // TODO - avoid creating a temporary array here: let the tesselator iterate\n      const polygons = props.data.map(props.getPolygon);\n\n      this.setState({\n        polygonTesselator: new PolygonTesselator({polygons, IndexType: this.state.IndexType})\n      });\n\n      this.state.attributeManager.invalidateAll();\n    }\n\n    if (\n      geometryConfigChanged ||\n      props.extruded !== oldProps.extruded ||\n      props.fp64 !== oldProps.fp64\n    ) {\n      this.state.polygonTesselator.updatePositions({\n        fp64: props.fp64,\n        extruded: props.extruded\n      });\n    }\n  }\n\n  updateAttributes(props) {\n    const {attributeManager, modelsChanged} = this.state;\n\n    // Figure out data length\n    attributeManager.update({\n      data: props.data,\n      numInstances: 0,\n      props,\n      buffers: props,\n      context: this,\n      // Don't worry about non-attribute props\n      ignoreUnknownAttributes: true\n    });\n\n    if (modelsChanged) {\n      this._updateAttributes(attributeManager.getAttributes());\n      // clear the flag\n      this.setState({modelsChanged: false});\n    } else {\n      const changedAttributes = attributeManager.getChangedAttributes({clearChangedFlags: true});\n      this._updateAttributes(changedAttributes);\n    }\n  }\n\n  _updateAttributes(attributes) {\n    const {modelsByName} = this.state;\n\n    for (const modelName in modelsByName) {\n      const model = modelsByName[modelName];\n\n      if (modelName === 'TOP') {\n        model.setVertexCount(this.state.numVertex);\n      } else {\n        model.setInstanceCount(this.state.numInstances);\n      }\n\n      const attributeMap = ATTRIBUTE_MAPS[modelName];\n      const newAttributes = {};\n      for (const attributeName in attributes) {\n        const attribute = attributes[attributeName];\n        const attributeOverride = attributeMap[attributeName];\n\n        if (attributeOverride) {\n          attribute.instanced = attributeOverride.instanced;\n          newAttributes[attributeOverride.name || attributeName] = attribute;\n        }\n      }\n      model.setAttributes(newAttributes);\n    }\n  }\n\n  _getModels(gl) {\n    const {id, filled, extruded, wireframe} = this.props;\n\n    const models = {};\n\n    if (filled) {\n      models.TOP = new Model(\n        gl,\n        Object.assign({}, this.getShaders(), {\n          id: `${id}-top`,\n          geometry: new Geometry({\n            drawMode: GL.TRIANGLES,\n            attributes: {\n              vertexPositions: {size: 2, isGeneric: true, value: new Float32Array([0, 1])},\n              nextPositions: {size: 3, isGeneric: true, value: new Float32Array(3)},\n              nextPositions64xyLow: {size: 2, isGeneric: true, value: new Float32Array(2)}\n            }\n          }),\n          uniforms: {\n            isSideVertex: 0\n          },\n          vertexCount: 0,\n          isIndexed: true,\n          shaderCache: this.context.shaderCache\n        })\n      );\n    }\n    if (filled && extruded) {\n      models.SIDE = new Model(\n        gl,\n        Object.assign({}, this.getShaders(), {\n          id: `${id}-side`,\n          geometry: new Geometry({\n            drawMode: GL.TRIANGLE_STRIP,\n            vertexCount: 4,\n            attributes: {\n              vertexPositions: {size: 2, value: SIDE_FILL_POSITIONS}\n            }\n          }),\n          uniforms: {\n            isSideVertex: 1\n          },\n          isInstanced: 1,\n          shaderCache: this.context.shaderCache\n        })\n      );\n    }\n    if (extruded && wireframe) {\n      models.WIRE = new Model(\n        gl,\n        Object.assign({}, this.getShaders(), {\n          id: `${id}-wire`,\n          geometry: new Geometry({\n            drawMode: GL.LINE_STRIP,\n            vertexCount: 4,\n            attributes: {\n              vertexPositions: {size: 2, value: SIDE_WIRE_POSITIONS}\n            }\n          }),\n          uniforms: {\n            isSideVertex: 1\n          },\n          isInstanced: 1,\n          shaderCache: this.context.shaderCache\n        })\n      );\n    }\n\n    return {\n      models: [models.WIRE, models.SIDE, models.TOP].filter(Boolean),\n      modelsByName: models\n    };\n  }\n\n  calculateIndices(attribute) {\n    attribute.value = this.state.polygonTesselator.indices();\n    attribute.target = GL.ELEMENT_ARRAY_BUFFER;\n    const numVertex = attribute.value.length / attribute.size;\n    this.setState({numVertex});\n  }\n\n  calculatePositions(attribute) {\n    attribute.value = this.state.polygonTesselator.positions();\n    const numInstances = attribute.value.length / attribute.size;\n    this.setState({numInstances});\n  }\n  calculatePositionsLow(attribute) {\n    const isFP64 = enable64bitSupport(this.props);\n    attribute.isGeneric = !isFP64;\n\n    if (!isFP64) {\n      attribute.value = new Float32Array(2);\n      return;\n    }\n\n    attribute.value = this.state.polygonTesselator.positions64xyLow();\n  }\n\n  calculateNextPositions(attribute) {\n    attribute.value = this.state.polygonTesselator.nextPositions();\n  }\n  calculateNextPositionsLow(attribute) {\n    const isFP64 = enable64bitSupport(this.props);\n    attribute.isGeneric = !isFP64;\n\n    if (!isFP64) {\n      attribute.value = new Float32Array(2);\n      return;\n    }\n\n    attribute.value = this.state.polygonTesselator.nextPositions64xyLow();\n  }\n\n  calculateElevations(attribute) {\n    if (this.props.extruded) {\n      attribute.isGeneric = false;\n      attribute.value = this.state.polygonTesselator.elevations({\n        getElevation: polygonIndex => this.props.getElevation(this.props.data[polygonIndex])\n      });\n    } else {\n      attribute.isGeneric = true;\n      attribute.value = new Float32Array(1);\n    }\n  }\n\n  calculateFillColors(attribute) {\n    attribute.value = this.state.polygonTesselator.colors({\n      key: 'fillColors',\n      getColor: polygonIndex => this.props.getFillColor(this.props.data[polygonIndex])\n    });\n  }\n  calculateLineColors(attribute) {\n    attribute.value = this.state.polygonTesselator.colors({\n      key: 'lineColors',\n      getColor: polygonIndex => this.props.getLineColor(this.props.data[polygonIndex])\n    });\n  }\n\n  // Override the default picking colors calculation\n  calculatePickingColors(attribute) {\n    attribute.value = this.state.polygonTesselator.pickingColors();\n  }\n}\n\nSolidPolygonLayer.layerName = 'SolidPolygonLayer';\nSolidPolygonLayer.defaultProps = defaultProps;\n"],"file":"solid-polygon-layer.js"}