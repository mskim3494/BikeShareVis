// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
import { CompositeLayer, experimental } from '../../core';
const log = experimental.log;
import MultiIconLayer from './multi-icon-layer/multi-icon-layer';
import { makeFontAtlas, DEFAULT_CHAR_SET } from './font-atlas';
const TEXT_ANCHOR = {
  start: 1,
  middle: 0,
  end: -1
};
const ALIGNMENT_BASELINE = {
  top: 1,
  center: 0,
  bottom: -1
};
const DEFAULT_FONT_FAMILY = 'Monaco, monospace';
const DEFAULT_COLOR = [0, 0, 0, 255];
const MISSING_CHAR_WIDTH = 32;
const defaultProps = {
  fp64: false,
  sizeScale: 1,
  fontFamily: DEFAULT_FONT_FAMILY,
  characterSet: DEFAULT_CHAR_SET,
  getText: x => x.text,
  getPosition: x => x.position,
  getColor: x => x.color || DEFAULT_COLOR,
  getSize: x => x.size || 32,
  getAngle: x => x.angle || 0,
  getTextAnchor: x => x.textAnchor || 'middle',
  getAlignmentBaseline: x => x.alignmentBaseline || 'center',
  getPixelOffset: x => x.offset || x.pixelOffset || [0, 0]
};
export default class TextLayer extends CompositeLayer {
  updateState({
    props,
    oldProps,
    changeFlags
  }) {
    const fontChanged = oldProps.fontFamily !== props.fontFamily || oldProps.characterSet !== props.characterSet;

    if (fontChanged) {
      this.updateFontAtlas(props.fontFamily, props.characterSet);
    }

    if (changeFlags.dataChanged || fontChanged || changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getText)) {
      this.transformStringToLetters();
    }
  }

  updateFontAtlas(fontFamily, characterSet) {
    const gl = this.context.gl;

    const _makeFontAtlas = makeFontAtlas(gl, {
      fontFamily,
      characterSet
    }),
          scale = _makeFontAtlas.scale,
          mapping = _makeFontAtlas.mapping,
          texture = _makeFontAtlas.texture;

    this.setState({
      scale,
      iconAtlas: texture,
      iconMapping: mapping
    });
  }

  getPickingInfo({
    info
  }) {
    return Object.assign(info, {
      // override object with original data
      object: info.object && info.object.object
    });
  }

  transformStringToLetters() {
    const _props = this.props,
          data = _props.data,
          getText = _props.getText;
    const iconMapping = this.state.iconMapping;

    if (!data || data.length === 0) {
      return;
    }

    const transformedData = [];
    data.forEach(val => {
      const text = getText(val);

      if (text) {
        const letters = Array.from(text);
        const offsets = [0];
        let offsetLeft = 0;
        letters.forEach((letter, i) => {
          const datum = {
            text: letter,
            index: i,
            offsets,
            len: text.length,
            object: val
          };
          const frame = iconMapping[letter];

          if (frame) {
            offsetLeft += frame.width;
          } else {
            log.warn(`Missing character: ${letter}`)();
            offsetLeft += MISSING_CHAR_WIDTH;
          }

          offsets.push(offsetLeft);
          transformedData.push(datum);
        });
      }
    });
    this.setState({
      data: transformedData
    });
  }

  getLetterOffset(datum) {
    return datum.offsets[datum.index];
  }

  getTextLength(datum) {
    return datum.offsets[datum.offsets.length - 1];
  }

  getAnchorXFromTextAnchor(textAnchor) {
    if (!TEXT_ANCHOR.hasOwnProperty(textAnchor)) {
      throw new Error(`Invalid text anchor parameter: ${textAnchor}`);
    }

    return TEXT_ANCHOR[textAnchor];
  }

  getAnchorYFromAlignmentBaseline(alignmentBaseline) {
    if (!ALIGNMENT_BASELINE.hasOwnProperty(alignmentBaseline)) {
      throw new Error(`Invalid alignment baseline parameter: ${alignmentBaseline}`);
    }

    return ALIGNMENT_BASELINE[alignmentBaseline];
  }

  renderLayers() {
    const _state = this.state,
          data = _state.data,
          scale = _state.scale,
          iconAtlas = _state.iconAtlas,
          iconMapping = _state.iconMapping;

    if (!iconMapping || !iconAtlas || !data) {
      return null;
    }

    const _props2 = this.props,
          _getPosition = _props2.getPosition,
          _getColor = _props2.getColor,
          _getSize = _props2.getSize,
          _getAngle = _props2.getAngle,
          getTextAnchor = _props2.getTextAnchor,
          getAlignmentBaseline = _props2.getAlignmentBaseline,
          _getPixelOffset = _props2.getPixelOffset,
          fp64 = _props2.fp64,
          sizeScale = _props2.sizeScale,
          updateTriggers = _props2.updateTriggers;
    return [new MultiIconLayer(this.getSubLayerProps({
      id: 'text-multi-icon-layer',
      data,
      iconAtlas,
      iconMapping,
      getIcon: d => d.text,
      getPosition: d => _getPosition(d.object),
      getShiftInQueue: d => this.getLetterOffset(d),
      getLengthOfQueue: d => this.getTextLength(d),
      getColor: d => _getColor(d.object),
      getSize: d => _getSize(d.object),
      getAngle: d => _getAngle(d.object),
      getAnchorX: d => this.getAnchorXFromTextAnchor(getTextAnchor(d.object)),
      getAnchorY: d => this.getAnchorYFromAlignmentBaseline(getAlignmentBaseline(d.object)),
      getPixelOffset: d => _getPixelOffset(d.object),
      fp64,
      sizeScale: sizeScale * scale,
      updateTriggers: {
        getPosition: updateTriggers.getPosition,
        getAngle: updateTriggers.getAngle,
        getColor: updateTriggers.getColor,
        getSize: updateTriggers.getSize,
        getPixelOffset: updateTriggers.getPixelOffset,
        getAnchorX: updateTriggers.getTextAnchor,
        getAnchorY: updateTriggers.getAlignmentBaseline
      }
    }))];
  }

}
TextLayer.layerName = 'TextLayer';
TextLayer.defaultProps = defaultProps;
//# sourceMappingURL=text-layer.js.map