{"version":3,"sources":["../../../../src/core-layers/grid-cell-layer/grid-cell-layer.js"],"names":["fp64LowPart","experimental","enable64bitSupport","DEFAULT_COLOR","defaultProps","cellSize","type","min","max","value","coverage","elevationScale","extruded","fp64","getPosition","x","position","getElevation","elevation","getColor","color","lightSettings","GridCellLayer","projectModule","props","vs","fs","modules","attributeManager","getAttributeManager","addInstanced","instancePositions","size","transition","accessor","update","calculateInstancePositions","instancePositions64xyLow","calculateInstancePositions64xyLow","instanceColors","GL","UNSIGNED_BYTE","calculateInstanceColors","oldProps","changeFlags","gl","context","state","model","delete","setState","_getModel","invalidateAll","Model","Object","assign","getShaders","id","geometry","CubeGeometry","isInstanced","shaderCache","uniforms","render","attribute","data","i","object","isFP64","isGeneric","Float32Array","point","Number","isFinite","Layer","layerName"],"mappings":";;;;;;;AAoBA;;AAEA;;AAEA;;AACA;;;;;;;;;;;;;;;;;;;;;;IAJOA,W,GAAmCC,kB,CAAnCD,W;IAAaE,kB,GAAsBD,kB,CAAtBC,kB;AAMpB,IAAMC,gBAAgB,CAAC,GAAD,EAAM,CAAN,EAAS,GAAT,EAAc,GAAd,CAAtB;AAEA,IAAMC,eAAe;AACnBC,YAAU;AAACC,UAAM,QAAP;AAAiBC,SAAK,CAAtB;AAAyBC,SAAK,IAA9B;AAAoCC,WAAO;AAA3C,GADS;AAEnBC,YAAU;AAACJ,UAAM,QAAP;AAAiBC,SAAK,CAAtB;AAAyBC,SAAK,CAA9B;AAAiCC,WAAO;AAAxC,GAFS;AAGnBE,kBAAgB;AAACL,UAAM,QAAP;AAAiBC,SAAK,CAAtB;AAAyBE,WAAO;AAAhC,GAHG;AAInBG,YAAU,IAJS;AAKnBC,QAAM,KALa;AAOnBC,eAAa;AAAA,WAAKC,EAAEC,QAAP;AAAA,GAPM;AAQnBC,gBAAc;AAAA,WAAKF,EAAEG,SAAP;AAAA,GARK;AASnBC,YAAU;AAAA,WAAKJ,EAAEK,KAAP;AAAA,GATS;AAWnBC,iBAAe;AAXI,CAArB;;IAcqBC,a;;;;;;;;;;;;;;AACnB;;;;;;;;;;;;iCAaa;AACX,UAAMC,gBAAgBrB,mBAAmB,KAAKsB,KAAxB,IAAiC,WAAjC,GAA+C,WAArE;AACA,aAAO;AAACC,wCAAD;AAAKC,0CAAL;AAASC,iBAAS,CAACJ,aAAD,EAAgB,UAAhB,EAA4B,SAA5B;AAAlB,OAAP;AACD;;;sCAEiB;AAChB,UAAMK,mBAAmB,KAAKC,mBAAL,EAAzB;AACA;;AACAD,uBAAiBE,YAAjB,CAA8B;AAC5BC,2BAAmB;AACjBC,gBAAM,CADW;AAEjBC,sBAAY,IAFK;AAGjBC,oBAAU,CAAC,aAAD,EAAgB,cAAhB,CAHO;AAIjBC,kBAAQ,KAAKC;AAJI,SADS;AAO5BC,kCAA0B;AACxBL,gBAAM,CADkB;AAExBE,oBAAU,aAFc;AAGxBC,kBAAQ,KAAKG;AAHW,SAPE;AAY5BC,wBAAgB;AACdP,gBAAM,CADQ;AAEd1B,gBAAMkC,SAAGC,aAFK;AAGdR,sBAAY,IAHE;AAIdC,oBAAU,UAJI;AAKdC,kBAAQ,KAAKO;AALC;AAZY,OAA9B;AAoBA;AACD;;;sCAE2C;AAAA,UAA/BlB,KAA+B,QAA/BA,KAA+B;AAAA,UAAxBmB,QAAwB,QAAxBA,QAAwB;AAAA,UAAdC,WAAc,QAAdA,WAAc;;AAC1C,gIAAkB;AAACpB,oBAAD;AAAQmB,0BAAR;AAAkBC;AAAlB,OAAlB,EAD0C,CAE1C;;;AACA,UAAIpB,MAAMX,IAAN,KAAe8B,SAAS9B,IAA5B,EAAkC;AAAA,YACzBgC,EADyB,GACnB,KAAKC,OADc,CACzBD,EADyB;;AAEhC,YAAI,KAAKE,KAAL,CAAWC,KAAf,EAAsB;AACpB,eAAKD,KAAL,CAAWC,KAAX,CAAiBC,MAAjB;AACD;;AACD,aAAKC,QAAL,CAAc;AAACF,iBAAO,KAAKG,SAAL,CAAeN,EAAf;AAAR,SAAd;AACA,aAAKE,KAAL,CAAWnB,gBAAX,CAA4BwB,aAA5B;AACD;AACF;;;8BAESP,E,EAAI;AACZ,aAAO,IAAIQ,WAAJ,CACLR,EADK,EAELS,OAAOC,MAAP,CAAc,EAAd,EAAkB,KAAKC,UAAL,EAAlB,EAAqC;AACnCC,YAAI,KAAKjC,KAAL,CAAWiC,EADoB;AAEnCC,kBAAU,IAAIC,kBAAJ,EAFyB;AAGnCC,qBAAa,IAHsB;AAInCC,qBAAa,KAAKf,OAAL,CAAae;AAJS,OAArC,CAFK,CAAP;AASD;;;gCAEgB;AAAA,UAAXC,QAAW,SAAXA,QAAW;AAAA,mBACwC,KAAKtC,KAD7C;AAAA,UACRnB,QADQ,UACRA,QADQ;AAAA,UACEO,QADF,UACEA,QADF;AAAA,UACYD,cADZ,UACYA,cADZ;AAAA,UAC4BD,QAD5B,UAC4BA,QAD5B;AAGf,WAAKqC,KAAL,CAAWC,KAAX,CAAiBe,MAAjB,CACET,OAAOC,MAAP,CAAc,EAAd,EAAkBO,QAAlB,EAA4B;AAC1BzD,0BAD0B;AAE1BO,0BAF0B;AAG1BD,sCAH0B;AAI1BD;AAJ0B,OAA5B,CADF;AAQD;;;+CAE0BsD,S,EAAW;AAAA,oBACM,KAAKxC,KADX;AAAA,UAC7ByC,IAD6B,WAC7BA,IAD6B;AAAA,UACvBnD,WADuB,WACvBA,WADuB;AAAA,UACVG,YADU,WACVA,YADU;AAAA,UAE7BR,KAF6B,GAEduD,SAFc,CAE7BvD,KAF6B;AAAA,UAEtBuB,IAFsB,GAEdgC,SAFc,CAEtBhC,IAFsB;AAGpC,UAAIkC,IAAI,CAAR;AAHoC;AAAA;AAAA;;AAAA;AAIpC,6BAAqBD,IAArB,8HAA2B;AAAA,cAAhBE,MAAgB;AACzB,cAAMnD,WAAWF,YAAYqD,MAAZ,CAAjB;AACA,cAAMjD,YAAYD,aAAakD,MAAb,KAAwB,CAA1C;AACA1D,gBAAMyD,IAAI,CAAV,IAAelD,SAAS,CAAT,CAAf;AACAP,gBAAMyD,IAAI,CAAV,IAAelD,SAAS,CAAT,CAAf;AACAP,gBAAMyD,IAAI,CAAV,IAAe,CAAf;AACAzD,gBAAMyD,IAAI,CAAV,IAAehD,SAAf;AACAgD,eAAKlC,IAAL;AACD;AAZmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAarC;;;sDAEiCgC,S,EAAW;AAC3C,UAAMI,SAASlE,mBAAmB,KAAKsB,KAAxB,CAAf;AACAwC,gBAAUK,SAAV,GAAsB,CAACD,MAAvB;;AAEA,UAAI,CAACA,MAAL,EAAa;AACXJ,kBAAUvD,KAAV,GAAkB,IAAI6D,YAAJ,CAAiB,CAAjB,CAAlB;AACA;AACD;;AAP0C,oBASf,KAAK9C,KATU;AAAA,UASpCyC,IAToC,WASpCA,IAToC;AAAA,UAS9BnD,WAT8B,WAS9BA,WAT8B;AAAA,UAUpCL,KAVoC,GAU3BuD,SAV2B,CAUpCvD,KAVoC;AAW3C,UAAIyD,IAAI,CAAR;AAX2C;AAAA;AAAA;;AAAA;AAY3C,8BAAoBD,IAApB,mIAA0B;AAAA,cAAfM,KAAe;AACxB,cAAMvD,WAAWF,YAAYyD,KAAZ,CAAjB;AACA9D,gBAAMyD,GAAN,IAAalE,YAAYgB,SAAS,CAAT,CAAZ,CAAb;AACAP,gBAAMyD,GAAN,IAAalE,YAAYgB,SAAS,CAAT,CAAZ,CAAb;AACD;AAhB0C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiB5C;;;4CAEuBgD,S,EAAW;AAAA,oBACR,KAAKxC,KADG;AAAA,UAC1ByC,IAD0B,WAC1BA,IAD0B;AAAA,UACpB9C,QADoB,WACpBA,QADoB;AAAA,UAE1BV,KAF0B,GAEXuD,SAFW,CAE1BvD,KAF0B;AAAA,UAEnBuB,IAFmB,GAEXgC,SAFW,CAEnBhC,IAFmB;AAGjC,UAAIkC,IAAI,CAAR;AAHiC;AAAA;AAAA;;AAAA;AAIjC,8BAAqBD,IAArB,mIAA2B;AAAA,cAAhBE,MAAgB;AACzB,cAAM/C,QAAQD,SAASgD,MAAT,KAAoBhE,aAAlC;AACAM,gBAAMyD,IAAI,CAAV,IAAe9C,MAAM,CAAN,CAAf;AACAX,gBAAMyD,IAAI,CAAV,IAAe9C,MAAM,CAAN,CAAf;AACAX,gBAAMyD,IAAI,CAAV,IAAe9C,MAAM,CAAN,CAAf;AACAX,gBAAMyD,IAAI,CAAV,IAAeM,OAAOC,QAAP,CAAgBrD,MAAM,CAAN,CAAhB,IAA4BA,MAAM,CAAN,CAA5B,GAAuCjB,cAAc,CAAd,CAAtD;AACA+D,eAAKlC,IAAL;AACD;AAXgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYlC;;;;EAjIwC0C,W;;;AAoI3CpD,cAAcqD,SAAd,GAA0B,eAA1B;AACArD,cAAclB,YAAd,GAA6BA,YAA7B","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, experimental} from '../../core';\nconst {fp64LowPart, enable64bitSupport} = experimental;\nimport {GL, Model, CubeGeometry} from 'luma.gl';\n\nimport vs from './grid-cell-layer-vertex.glsl';\nimport fs from './grid-cell-layer-fragment.glsl';\n\nconst DEFAULT_COLOR = [255, 0, 255, 255];\n\nconst defaultProps = {\n  cellSize: {type: 'number', min: 0, max: 1000, value: 1000},\n  coverage: {type: 'number', min: 0, max: 1, value: 1},\n  elevationScale: {type: 'number', min: 0, value: 1},\n  extruded: true,\n  fp64: false,\n\n  getPosition: x => x.position,\n  getElevation: x => x.elevation,\n  getColor: x => x.color,\n\n  lightSettings: {}\n};\n\nexport default class GridCellLayer extends Layer {\n  /**\n   * A generic GridLayer that takes latitude longitude delta of cells as a uniform\n   * and the min lat lng of cells. grid can be 3d when pass in a height\n   * and set enable3d to true\n   *\n   * @param {array} props.data -\n   * @param {boolean} props.extruded - enable grid elevation\n   * @param {number} props.cellSize - grid cell size in meters\n   * @param {function} props.getPosition - position accessor, returned as [minLng, minLat]\n   * @param {function} props.getElevation - elevation accessor\n   * @param {function} props.getColor - color accessor, returned as [r, g, b, a]\n   */\n\n  getShaders() {\n    const projectModule = enable64bitSupport(this.props) ? 'project64' : 'project32';\n    return {vs, fs, modules: [projectModule, 'lighting', 'picking']};\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      instancePositions: {\n        size: 4,\n        transition: true,\n        accessor: ['getPosition', 'getElevation'],\n        update: this.calculateInstancePositions\n      },\n      instancePositions64xyLow: {\n        size: 2,\n        accessor: 'getPosition',\n        update: this.calculateInstancePositions64xyLow\n      },\n      instanceColors: {\n        size: 4,\n        type: GL.UNSIGNED_BYTE,\n        transition: true,\n        accessor: 'getColor',\n        update: this.calculateInstanceColors\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n    // Re-generate model if geometry changed\n    if (props.fp64 !== oldProps.fp64) {\n      const {gl} = this.context;\n      if (this.state.model) {\n        this.state.model.delete();\n      }\n      this.setState({model: this._getModel(gl)});\n      this.state.attributeManager.invalidateAll();\n    }\n  }\n\n  _getModel(gl) {\n    return new Model(\n      gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new CubeGeometry(),\n        isInstanced: true,\n        shaderCache: this.context.shaderCache\n      })\n    );\n  }\n\n  draw({uniforms}) {\n    const {cellSize, extruded, elevationScale, coverage} = this.props;\n\n    this.state.model.render(\n      Object.assign({}, uniforms, {\n        cellSize,\n        extruded,\n        elevationScale,\n        coverage\n      })\n    );\n  }\n\n  calculateInstancePositions(attribute) {\n    const {data, getPosition, getElevation} = this.props;\n    const {value, size} = attribute;\n    let i = 0;\n    for (const object of data) {\n      const position = getPosition(object);\n      const elevation = getElevation(object) || 0;\n      value[i + 0] = position[0];\n      value[i + 1] = position[1];\n      value[i + 2] = 0;\n      value[i + 3] = elevation;\n      i += size;\n    }\n  }\n\n  calculateInstancePositions64xyLow(attribute) {\n    const isFP64 = enable64bitSupport(this.props);\n    attribute.isGeneric = !isFP64;\n\n    if (!isFP64) {\n      attribute.value = new Float32Array(2);\n      return;\n    }\n\n    const {data, getPosition} = this.props;\n    const {value} = attribute;\n    let i = 0;\n    for (const point of data) {\n      const position = getPosition(point);\n      value[i++] = fp64LowPart(position[0]);\n      value[i++] = fp64LowPart(position[1]);\n    }\n  }\n\n  calculateInstanceColors(attribute) {\n    const {data, getColor} = this.props;\n    const {value, size} = attribute;\n    let i = 0;\n    for (const object of data) {\n      const color = getColor(object) || DEFAULT_COLOR;\n      value[i + 0] = color[0];\n      value[i + 1] = color[1];\n      value[i + 2] = color[2];\n      value[i + 3] = Number.isFinite(color[3]) ? color[3] : DEFAULT_COLOR[3];\n      i += size;\n    }\n  }\n}\n\nGridCellLayer.layerName = 'GridCellLayer';\nGridCellLayer.defaultProps = defaultProps;\n"],"file":"grid-cell-layer.js"}