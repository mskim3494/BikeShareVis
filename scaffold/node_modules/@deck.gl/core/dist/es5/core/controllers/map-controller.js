"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _mapControls = _interopRequireDefault(require("../controllers/map-controls"));

var _mapState = require("../controllers/map-state");

var _mjolnir = require("mjolnir.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _instanceof(left, right) { if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) { return right[Symbol.hasInstance](left); } else { return left instanceof right; } }

function _classCallCheck(instance, Constructor) { if (!_instanceof(instance, Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var PREFIX = '-webkit-';
var CURSOR = {
  GRABBING: "".concat(PREFIX, "grabbing"),
  GRAB: "".concat(PREFIX, "grab"),
  POINTER: 'pointer'
};

var getDefaultCursor = function getDefaultCursor(_ref) {
  var isDragging = _ref.isDragging;
  return isDragging ? CURSOR.GRABBING : CURSOR.GRAB;
};

function getPropTypes(PropTypes) {
  return {
    width: PropTypes.number.isRequired
    /** The width of the map. */
    ,
    height: PropTypes.number.isRequired
    /** The height of the map. */
    ,
    longitude: PropTypes.number.isRequired
    /** The longitude of the center of the map. */
    ,
    latitude: PropTypes.number.isRequired
    /** The latitude of the center of the map. */
    ,
    zoom: PropTypes.number.isRequired
    /** The tile zoom level of the map. */
    ,
    bearing: PropTypes.number
    /** Specify the bearing of the viewport */
    ,
    pitch: PropTypes.number
    /** Specify the pitch of the viewport */
    ,
    // Note: Non-public API, see https://github.com/mapbox/mapbox-gl-js/issues/1137
    altitude: PropTypes.number
    /** Altitude of the viewport camera. Default 1.5 "screen heights" */
    ,

    /** Viewport constraints */
    maxZoom: PropTypes.number,
    // Max zoom level
    minZoom: PropTypes.number,
    // Min zoom level
    maxPitch: PropTypes.number,
    // Max pitch in degrees
    minPitch: PropTypes.number,
    // Min pitch in degrees

    /**
     * `onViewportChange` callback is fired when the user interacted with the
     * map. The object passed to the callback contains viewport properties
     * such as `longitude`, `latitude`, `zoom` etc.
     */
    onViewportChange: PropTypes.func,
    onViewStateChange: PropTypes.func,

    /** Enables control event handling */
    scrollZoom: PropTypes.bool,
    // Scroll to zoom
    dragPan: PropTypes.bool,
    // Drag to pan
    dragRotate: PropTypes.bool,
    // Drag to rotate
    doubleClickZoom: PropTypes.bool,
    // Double click to zoom
    touchZoomRotate: PropTypes.bool,
    // Pinch to zoom / rotate

    /** Accessor that returns a cursor style to show interactive state */
    getCursor: PropTypes.func,
    // A map control instance to replace the default map controls
    // The object must expose one property: `events` as an array of subscribed
    // event names; and two methods: `setState(state)` and `handle(event)`
    controls: PropTypes.shape({
      events: PropTypes.arrayOf(PropTypes.string),
      handleEvent: PropTypes.func
    })
  };
}

var defaultProps = Object.assign({}, _mapState.MAPBOX_LIMITS, {
  scrollZoom: true,
  dragPan: true,
  dragRotate: true,
  doubleClickZoom: true,
  touchZoomRotate: true,
  getCursor: getDefaultCursor
});

var MapController =
/*#__PURE__*/
function () {
  function MapController(props) {
    _classCallCheck(this, MapController);

    props = Object.assign({}, defaultProps, props);
    this.props = props;
    this.state = {
      isDragging: false // Whether the cursor is down

    };
    this.canvas = props.canvas;
    var eventManager = new _mjolnir.EventManager(this.canvas);
    this._eventManager = eventManager; // If props.controls is not provided, fallback to default MapControls instance
    // Cannot use defaultProps here because it needs to be per map instance

    this._controls = this.props.controls || new _mapControls.default();

    this._controls.setOptions(Object.assign({}, this.props, {
      onStateChange: this._onInteractiveStateChange.bind(this),
      eventManager: eventManager
    }));
  }

  _createClass(MapController, [{
    key: "setProps",
    value: function setProps(props) {
      props = Object.assign({}, this.props, props);
      this.props = props;

      this._controls.setOptions(props);
    }
  }, {
    key: "finalize",
    value: function finalize() {
      this._eventManager.destroy();
    }
  }, {
    key: "_onInteractiveStateChange",
    value: function _onInteractiveStateChange(_ref2) {
      var _ref2$isDragging = _ref2.isDragging,
          isDragging = _ref2$isDragging === void 0 ? false : _ref2$isDragging;

      if (isDragging !== this.state.isDragging) {
        this.state.isDragging = isDragging;
        var getCursor = this.props.getCursor;
        this.canvas.style.cursor = getCursor(this.state);
      }
    }
  }]);

  return MapController;
}();

exports.default = MapController;
MapController.displayName = 'MapController';
MapController.defaultProps = defaultProps;
MapController.getPropTypes = getPropTypes;
//# sourceMappingURL=map-controller.js.map