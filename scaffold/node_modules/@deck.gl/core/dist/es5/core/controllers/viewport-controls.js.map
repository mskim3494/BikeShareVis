{"version":3,"sources":["../../../../src/core/controllers/viewport-controls.js"],"names":["NO_TRANSITION_PROPS","transitionDuration","LINEAR_TRANSITION_PROPS","transitionEasing","t","transitionInterpolator","LinearInterpolator","transitionInterruption","TRANSITION_EVENTS","BREAK","PITCH_MOUSE_THRESHOLD","PITCH_ACCEL","ZOOM_ACCEL","EVENT_TYPES","WHEEL","PAN","PINCH","DOUBLE_TAP","KEYBOARD","ViewportControls","ViewportState","options","viewportState","viewportStateProps","eventManager","_events","_state","isDragging","events","onViewportChange","onViewStateChange","handleEvent","bind","setOptions","constructor","Object","seal","event","assign","type","_onPanStart","_onPan","_onPanEnd","_onPinchStart","_onPinch","_onPinchEnd","_onDoubleTap","_onWheel","_onKeyDown","offsetCenter","x","y","srcEvent","Boolean","metaKey","altKey","ctrlKey","shiftKey","onStateChange","scrollZoom","dragPan","dragRotate","doubleClickZoom","touchZoom","touchRotate","keyboard","viewState","toggleEvents","isInteractive","eventNames","enabled","forEach","eventName","on","off","newViewportState","extraProps","interactionState","getViewportProps","changed","viewport","getViewport","getInteractiveState","pos","getCenter","panStart","rotateStart","updateViewport","isFunctionKeyPressed","rightButton","_onPanMove","_onPanRotate","panEnd","rotateEnd","pan","MapState","_onPanRotateMap","_onPanRotateStandard","deltaX","deltaY","width","height","deltaScaleX","deltaScaleY","rotate","centerY","startY","Math","abs","min","max","delta","scale","exp","zoom","zoomStart","startPinchRotation","rotation","zoomEnd","isZoomOut","funcKey","keyCode","zoomOut","zoomIn","rotateLeft","moveLeft","rotateRight","moveRight","rotateUp","moveUp","rotateDown","moveDown"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 Uber Technologies, Inc.\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport MapState from './map-state';\nimport LinearInterpolator from '../transitions/linear-interpolator';\nimport {TRANSITION_EVENTS} from '../lib/transition-manager';\nimport assert from '../utils/assert';\n\nconst NO_TRANSITION_PROPS = {\n  transitionDuration: 0\n};\nconst LINEAR_TRANSITION_PROPS = {\n  transitionDuration: 300,\n  transitionEasing: t => t,\n  transitionInterpolator: new LinearInterpolator(),\n  transitionInterruption: TRANSITION_EVENTS.BREAK\n};\n\n// EVENT HANDLING PARAMETERS\nconst PITCH_MOUSE_THRESHOLD = 5;\nconst PITCH_ACCEL = 1.2;\nconst ZOOM_ACCEL = 0.01;\n\nconst EVENT_TYPES = {\n  WHEEL: ['wheel'],\n  PAN: ['panstart', 'panmove', 'panend'],\n  PINCH: ['pinchstart', 'pinchmove', 'pinchend'],\n  DOUBLE_TAP: ['doubletap'],\n  KEYBOARD: ['keydown']\n};\n\nexport default class ViewportControls {\n  /**\n   * @classdesc\n   * A class that handles events and updates mercator style viewport parameters\n   */\n  constructor(ViewportState, options = {}) {\n    assert(ViewportState);\n    this.ViewportState = ViewportState;\n    this.viewportState = null;\n    this.viewportStateProps = null;\n    this.eventManager = null;\n    this._events = null;\n    this._state = {\n      isDragging: false\n    };\n    this.events = [];\n    this.onViewportChange = null;\n    this.onViewStateChange = null;\n\n    this.handleEvent = this.handleEvent.bind(this);\n\n    this.setOptions(options);\n\n    if (this.constructor === ViewportControls) {\n      Object.seal(this);\n    }\n  }\n\n  /**\n   * Callback for events\n   * @param {hammer.Event} event\n   */\n  handleEvent(event) {\n    const {ViewportState} = this;\n    this.viewportState = new ViewportState(Object.assign({}, this.viewportStateProps, this._state));\n\n    switch (event.type) {\n      case 'panstart':\n        return this._onPanStart(event);\n      case 'panmove':\n        return this._onPan(event);\n      case 'panend':\n        return this._onPanEnd(event);\n      case 'pinchstart':\n        return this._onPinchStart(event);\n      case 'pinchmove':\n        return this._onPinch(event);\n      case 'pinchend':\n        return this._onPinchEnd(event);\n      case 'doubletap':\n        return this._onDoubleTap(event);\n      case 'wheel':\n        return this._onWheel(event);\n      case 'keydown':\n        return this._onKeyDown(event);\n      default:\n        return false;\n    }\n  }\n\n  /* Event utils */\n  // Event object: http://hammerjs.github.io/api/#event-object\n  getCenter(event) {\n    const {offsetCenter: {x, y}} = event;\n    return [x, y];\n  }\n\n  isFunctionKeyPressed(event) {\n    const {srcEvent} = event;\n    return Boolean(srcEvent.metaKey || srcEvent.altKey || srcEvent.ctrlKey || srcEvent.shiftKey);\n  }\n\n  isDragging() {\n    return this._state.isDragging;\n  }\n\n  /**\n   * Extract interactivity options\n   */\n  /* eslint-disable complexity */\n  setOptions(options) {\n    const {\n      onStateChange = this.onStateChange,\n      eventManager = this.eventManager,\n      scrollZoom = true,\n      dragPan = true,\n      dragRotate = true,\n      doubleClickZoom = true,\n      touchZoom = true,\n      touchRotate = false,\n      keyboard = true\n    } = options;\n\n    if ('onViewportChange' in options) {\n      this.onViewportChange = options.onViewportChange;\n    }\n    if ('onViewStateChange' in options) {\n      this.onViewStateChange = options.onViewStateChange;\n    }\n    this.onStateChange = onStateChange;\n    this.viewportStateProps = options.viewState\n      ? Object.assign({}, options, options.viewState)\n      : options;\n\n    if (this.eventManager !== eventManager) {\n      // EventManager has changed\n      this.eventManager = eventManager;\n      this._events = {};\n      this.toggleEvents(this.events, true);\n    }\n\n    // Register/unregister events\n    const isInteractive = Boolean(this.onViewportChange || this.onViewStateChange);\n    this.toggleEvents(EVENT_TYPES.WHEEL, isInteractive && scrollZoom);\n    this.toggleEvents(EVENT_TYPES.PAN, isInteractive && (dragPan || dragRotate));\n    this.toggleEvents(EVENT_TYPES.PINCH, isInteractive && (touchZoom || touchRotate));\n    this.toggleEvents(EVENT_TYPES.DOUBLE_TAP, isInteractive && doubleClickZoom);\n    this.toggleEvents(EVENT_TYPES.KEYBOARD, isInteractive && keyboard);\n\n    // Interaction toggles\n    this.scrollZoom = scrollZoom;\n    this.dragPan = dragPan;\n    this.dragRotate = dragRotate;\n    this.doubleClickZoom = doubleClickZoom;\n    this.touchZoom = touchZoom;\n    this.touchRotate = touchRotate;\n    this.keyboard = keyboard;\n  }\n  /* eslint-enable complexity */\n\n  toggleEvents(eventNames, enabled) {\n    if (this.eventManager) {\n      eventNames.forEach(eventName => {\n        if (this._events[eventName] !== enabled) {\n          this._events[eventName] = enabled;\n          if (enabled) {\n            this.eventManager.on(eventName, this.handleEvent);\n          } else {\n            this.eventManager.off(eventName, this.handleEvent);\n          }\n        }\n      });\n    }\n  }\n\n  // Private Methods\n\n  /* Callback util */\n  // formats map state and invokes callback function\n  updateViewport(newViewportState, extraProps = {}, interactionState = {}) {\n    const viewState = Object.assign({}, newViewportState.getViewportProps(), extraProps);\n\n    // TODO - to restore diffing, we need to include interactionState\n    const changed = true;\n    // const oldViewState = this.viewportState.getViewportProps();\n    // const changed = Object.keys(viewState).some(key => oldViewState[key] !== viewState[key]);\n\n    if (changed) {\n      if (this.onViewportChange) {\n        const viewport = this.viewportState.getViewport ? this.viewportState.getViewport() : null;\n        this.onViewportChange(viewState, interactionState, viewport);\n      }\n      if (this.onViewStateChange) {\n        this.onViewStateChange({viewState, interactionState});\n      }\n    }\n\n    Object.assign(\n      this._state,\n      Object.assign({}, newViewportState.getInteractiveState(), interactionState)\n    );\n    if (this.onStateChange) {\n      this.onStateChange(this._state);\n    }\n    // this.setState(Object.assign({}, newViewportState.getInteractiveState(), extraState));\n  }\n\n  /* Event handlers */\n  // Default handler for the `panstart` event.\n  _onPanStart(event) {\n    const pos = this.getCenter(event);\n    const newViewportState = this.viewportState.panStart({pos}).rotateStart({pos});\n    return this.updateViewport(newViewportState, NO_TRANSITION_PROPS, {isDragging: true});\n  }\n\n  // Default handler for the `panmove` event.\n  _onPan(event) {\n    return this.isFunctionKeyPressed(event) || event.rightButton\n      ? this._onPanMove(event)\n      : this._onPanRotate(event);\n  }\n\n  // Default handler for the `panend` event.\n  _onPanEnd(event) {\n    const newViewportState = this.viewportState.panEnd().rotateEnd();\n    return this.updateViewport(newViewportState, null, {isDragging: false});\n  }\n\n  // Default handler for panning to move.\n  // Called by `_onPan` when panning without function key pressed.\n  _onPanMove(event) {\n    if (!this.dragPan) {\n      return false;\n    }\n    const pos = this.getCenter(event);\n    const newViewportState = this.viewportState.pan({pos});\n    return this.updateViewport(newViewportState, NO_TRANSITION_PROPS, {isDragging: true});\n  }\n\n  // Default handler for panning to rotate.\n  // Called by `_onPan` when panning with function key pressed.\n  _onPanRotate(event) {\n    if (!this.dragRotate) {\n      return false;\n    }\n\n    return this.viewportState instanceof MapState\n      ? this._onPanRotateMap(event)\n      : this._onPanRotateStandard(event);\n  }\n\n  // Normal pan to rotate\n  _onPanRotateStandard(event) {\n    const {deltaX, deltaY} = event;\n    const {width, height} = this.viewportState.getViewportProps();\n\n    const deltaScaleX = deltaX / width;\n    const deltaScaleY = deltaY / height;\n\n    const newViewportState = this.viewportState.rotate({deltaScaleX, deltaScaleY});\n    return this.updateViewport(newViewportState, NO_TRANSITION_PROPS, {isDragging: true});\n  }\n\n  _onPanRotateMap(event) {\n    const {deltaX, deltaY} = event;\n    const [, centerY] = this.getCenter(event);\n    const startY = centerY - deltaY;\n    const {width, height} = this.viewportState.getViewportProps();\n\n    const deltaScaleX = deltaX / width;\n    let deltaScaleY = 0;\n\n    if (deltaY > 0) {\n      if (Math.abs(height - startY) > PITCH_MOUSE_THRESHOLD) {\n        // Move from 0 to -1 as we drag upwards\n        deltaScaleY = deltaY / (startY - height) * PITCH_ACCEL;\n      }\n    } else if (deltaY < 0) {\n      if (startY > PITCH_MOUSE_THRESHOLD) {\n        // Move from 0 to 1 as we drag upwards\n        deltaScaleY = 1 - centerY / startY;\n      }\n    }\n    deltaScaleY = Math.min(1, Math.max(-1, deltaScaleY));\n\n    const newViewportState = this.viewportState.rotate({deltaScaleX, deltaScaleY});\n    return this.updateViewport(newViewportState, NO_TRANSITION_PROPS, {isDragging: true});\n  }\n\n  // Default handler for the `wheel` event.\n  _onWheel(event) {\n    if (!this.scrollZoom) {\n      return false;\n    }\n\n    const pos = this.getCenter(event);\n    const {delta} = event;\n\n    // Map wheel delta to relative scale\n    let scale = 2 / (1 + Math.exp(-Math.abs(delta * ZOOM_ACCEL)));\n    if (delta < 0 && scale !== 0) {\n      scale = 1 / scale;\n    }\n\n    const newViewportState = this.viewportState.zoom({pos, scale});\n    return this.updateViewport(newViewportState, NO_TRANSITION_PROPS);\n  }\n\n  // Default handler for the `pinchstart` event.\n  _onPinchStart(event) {\n    const pos = this.getCenter(event);\n    const newViewportState = this.viewportState.zoomStart({pos}).rotateStart({pos});\n    // hack - hammer's `rotation` field doesn't seem to produce the correct angle\n    this._state.startPinchRotation = event.rotation;\n    return this.updateViewport(newViewportState, NO_TRANSITION_PROPS, {isDragging: true});\n  }\n\n  // Default handler for the `pinch` event.\n  _onPinch(event) {\n    if (!this.touchZoom && !this.touchRotate) {\n      return false;\n    }\n\n    let newViewportState = this.viewportState;\n    if (this.touchZoom) {\n      const {scale} = event;\n      const pos = this.getCenter(event);\n      newViewportState = newViewportState.zoom({pos, scale});\n    }\n    if (this.touchRotate) {\n      const {rotation} = event;\n      const {startPinchRotation} = this._state;\n      newViewportState = newViewportState.rotate({\n        deltaScaleX: -(rotation - startPinchRotation) / 180\n      });\n    }\n\n    return this.updateViewport(newViewportState, NO_TRANSITION_PROPS, {isDragging: true});\n  }\n\n  // Default handler for the `pinchend` event.\n  _onPinchEnd(event) {\n    const newViewportState = this.viewportState.zoomEnd().rotateEnd();\n    this._state.startPinchRotation = 0;\n    return this.updateViewport(newViewportState, null, {isDragging: false});\n  }\n\n  // Default handler for the `doubletap` event.\n  _onDoubleTap(event) {\n    if (!this.doubleClickZoom) {\n      return false;\n    }\n    const pos = this.getCenter(event);\n    const isZoomOut = this.isFunctionKeyPressed(event);\n\n    const newViewportState = this.viewportState.zoom({pos, scale: isZoomOut ? 0.5 : 2});\n    return this.updateViewport(newViewportState, LINEAR_TRANSITION_PROPS);\n  }\n\n  /* eslint-disable complexity */\n  // Default handler for the `keydown` event\n  _onKeyDown(event) {\n    if (!this.keyboard) {\n      return false;\n    }\n    const funcKey = this.isFunctionKeyPressed(event);\n    const {viewportState} = this;\n    let newViewportState;\n\n    switch (event.srcEvent.keyCode) {\n      case 189: // -\n        newViewportState = funcKey ? viewportState.zoomOut().zoomOut() : viewportState.zoomOut();\n        break;\n      case 187: // +\n        newViewportState = funcKey ? viewportState.zoomIn().zoomIn() : viewportState.zoomIn();\n        break;\n      case 37: // left\n        newViewportState = funcKey ? viewportState.rotateLeft() : viewportState.moveLeft();\n        break;\n      case 39: // right\n        newViewportState = funcKey ? viewportState.rotateRight() : viewportState.moveRight();\n        break;\n      case 38: // up\n        newViewportState = funcKey ? viewportState.rotateUp() : viewportState.moveUp();\n        break;\n      case 40: // down\n        newViewportState = funcKey ? viewportState.rotateDown() : viewportState.moveDown();\n        break;\n      default:\n        return false;\n    }\n    return this.updateViewport(newViewportState, LINEAR_TRANSITION_PROPS);\n  }\n  /* eslint-enable complexity */\n}\n"],"file":"viewport-controls.js"}