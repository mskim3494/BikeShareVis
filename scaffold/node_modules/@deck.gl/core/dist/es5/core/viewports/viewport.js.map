{"version":3,"sources":["../../../../src/core/viewports/viewport.js"],"names":["DEGREES_TO_RADIANS","Math","PI","IDENTITY","ZERO_VECTOR","DEFAULT_DISTANCE_SCALES","pixelsPerMeter","metersPerPixel","pixelsPerDegree","degreesPerPixel","DEFAULT_ZOOM","ERR_ARGUMENT","Viewport","opts","id","x","y","width","height","viewMatrix","projectionMatrix","orthographic","fovyRadians","fovy","near","far","focalDistance","longitude","latitude","zoom","position","modelMatrix","distanceScales","constructor","displayName","isGeospatial","Number","isFinite","log2","scale","pow","Vector3","meterOffset","transformVector","viewMatrixUncentered","center","Matrix4","multiplyRight","translate","negate","_createProjectionMatrix","aspect","_initPixelMatrices","equals","bind","project","unproject","projectFlat","unprojectFlat","getMatrices","viewport","xyz","topLeft","x0","y0","z0","X","Y","coord","pixelProjectionMatrix","y2","length","targetZ","z","pixelUnprojectionMatrix","_projectFlat","arguments","_unprojectFlat","lngLat","_addMetersToLngLat","coordinateOrigin","highPrecision","modelViewProjectionMatrix","viewProjectionMatrix","matrices","Object","assign","cameraPosition","cameraDirection","cameraUp","lngLatZ","lng","lat","Z","_metersToLngLatDelta","deltaLng","deltaLat","deltaZ","perspective","vpm","viewMatrixInverse","eye","direction","up","m","log","warn"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport log from '../utils/log';\nimport {createMat4, extractCameraVectors} from '../utils/math-utils';\n\nimport {Matrix4, Vector3, equals} from 'math.gl';\nimport mat4_scale from 'gl-mat4/scale';\nimport mat4_translate from 'gl-mat4/translate';\nimport mat4_multiply from 'gl-mat4/multiply';\nimport mat4_invert from 'gl-mat4/invert';\n\nimport {\n  getDistanceScales,\n  getWorldPosition,\n  getMeterZoom,\n  worldToPixels,\n  pixelsToWorld\n} from 'viewport-mercator-project';\n\nimport assert from '../utils/assert';\n\nconst DEGREES_TO_RADIANS = Math.PI / 180;\n\nconst IDENTITY = createMat4();\n\nconst ZERO_VECTOR = [0, 0, 0];\n\nconst DEFAULT_DISTANCE_SCALES = {\n  pixelsPerMeter: [1, 1, 1],\n  metersPerPixel: [1, 1, 1],\n  pixelsPerDegree: [1, 1, 1],\n  degreesPerPixel: [1, 1, 1]\n};\n\nconst DEFAULT_ZOOM = 0;\n\nconst ERR_ARGUMENT = 'Illegal argument to Viewport';\n\nexport default class Viewport {\n  /**\n   * @classdesc\n   * Manages coordinate system transformations for deck.gl.\n   *\n   * Note: The Viewport is immutable in the sense that it only has accessors.\n   * A new viewport instance should be created if any parameters have changed.\n   */\n  /* eslint-disable complexity, max-statements */\n  constructor(opts = {}) {\n    const {\n      id = null,\n\n      // Window width/height in pixels (for pixel projection)\n      x = 0,\n      y = 0,\n      width = 1,\n      height = 1,\n\n      // view matrix\n      viewMatrix = IDENTITY,\n\n      // Projection matrix\n      projectionMatrix = null,\n\n      // Projection matrix parameters, used if projectionMatrix not supplied\n      orthographic = false,\n      fovyRadians = 75 * DEGREES_TO_RADIANS,\n      fovy,\n      near = 0.1, // Distance of near clipping plane\n      far = 1000, // Distance of far clipping plane\n      focalDistance = 1, // Only needed for orthographic views\n\n      // Anchor: lng lat zoom will make this viewport work with geospatial coordinate systems\n      longitude = null,\n      latitude = null,\n      zoom = null,\n\n      // Anchor position offset (in meters for geospatial viewports)\n      position = null,\n      // A model matrix to be applied to position, to match the layer props API\n      modelMatrix = null,\n\n      distanceScales = null\n    } = opts;\n\n    this.id = id || this.constructor.displayName || 'viewport';\n\n    // Check if we have a geospatial anchor\n    this.isGeospatial = Number.isFinite(latitude) && Number.isFinite(longitude);\n\n    // Silently allow apps to send in w,h = 0,0\n    this.x = x;\n    this.y = y;\n    this.width = width || 1;\n    this.height = height || 1;\n\n    this.zoom = zoom;\n    if (!Number.isFinite(this.zoom)) {\n      this.zoom = this.isGeospatial\n        ? getMeterZoom({latitude}) + Math.log2(focalDistance)\n        : DEFAULT_ZOOM;\n    }\n    this.scale = Math.pow(2, this.zoom);\n\n    // Calculate distance scales if lng/lat/zoom are provided\n    this.distanceScales = this.isGeospatial\n      ? getDistanceScales({latitude, longitude, scale: this.scale})\n      : distanceScales || DEFAULT_DISTANCE_SCALES;\n\n    this.focalDistance = focalDistance;\n\n    this.distanceScales.metersPerPixel = new Vector3(this.distanceScales.metersPerPixel);\n    this.distanceScales.pixelsPerMeter = new Vector3(this.distanceScales.pixelsPerMeter);\n\n    this.position = ZERO_VECTOR;\n    this.meterOffset = ZERO_VECTOR;\n    if (position) {\n      // Apply model matrix if supplied\n      this.position = position;\n      this.modelMatrix = modelMatrix;\n      this.meterOffset = modelMatrix ? modelMatrix.transformVector(position) : position;\n    }\n\n    this.viewMatrixUncentered = viewMatrix;\n\n    if (this.isGeospatial) {\n      // Determine camera center\n      this.center = getWorldPosition({\n        longitude,\n        latitude,\n        scale: this.scale,\n        distanceScales: this.distanceScales,\n        meterOffset: this.meterOffset\n      });\n\n      // Make a centered version of the matrix for projection modes without an offset\n      this.viewMatrix = new Matrix4()\n        // Apply the uncentered view matrix\n        .multiplyRight(this.viewMatrixUncentered)\n        // The Mercator world coordinate system is upper left,\n        // but GL expects lower left, so we flip it around the center after all transforms are done\n        .scale([1, -1, 1])\n        // And center it\n        .translate(new Vector3(this.center || ZERO_VECTOR).negate());\n    } else {\n      this.center = position;\n      this.viewMatrix = viewMatrix;\n    }\n\n    this.projectionMatrix =\n      projectionMatrix ||\n      this._createProjectionMatrix({\n        orthographic,\n        fovyRadians: fovyRadians || fovy * DEGREES_TO_RADIANS,\n        aspect: this.width / this.height,\n        focalDistance,\n        near,\n        far\n      });\n\n    this._initPixelMatrices();\n\n    // Bind methods for easy access\n    this.equals = this.equals.bind(this);\n    this.project = this.project.bind(this);\n    this.unproject = this.unproject.bind(this);\n    this.projectFlat = this.projectFlat.bind(this);\n    this.unprojectFlat = this.unprojectFlat.bind(this);\n    this.getMatrices = this.getMatrices.bind(this);\n  }\n  /* eslint-enable complexity, max-statements */\n\n  // Two viewports are equal if width and height are identical, and if\n  // their view and projection matrices are (approximately) equal.\n  equals(viewport) {\n    if (!(viewport instanceof Viewport)) {\n      return false;\n    }\n\n    return (\n      viewport.width === this.width &&\n      viewport.height === this.height &&\n      equals(viewport.projectionMatrix, this.projectionMatrix) &&\n      equals(viewport.viewMatrix, this.viewMatrix)\n    );\n    // TODO - check distance scales?\n  }\n\n  /**\n   * Projects xyz (possibly latitude and longitude) to pixel coordinates in window\n   * using viewport projection parameters\n   * - [longitude, latitude] to [x, y]\n   * - [longitude, latitude, Z] => [x, y, z]\n   * Note: By default, returns top-left coordinates for canvas/SVG type render\n   *\n   * @param {Array} lngLatZ - [lng, lat] or [lng, lat, Z]\n   * @param {Object} opts - options\n   * @param {Object} opts.topLeft=true - Whether projected coords are top left\n   * @return {Array} - [x, y] or [x, y, z] in top left coords\n   */\n  project(xyz, {topLeft = true} = {}) {\n    const [x0, y0, z0 = 0] = xyz;\n\n    const [X, Y] = this.projectFlat([x0, y0]);\n    const coord = worldToPixels([X, Y, z0], this.pixelProjectionMatrix);\n\n    const [x, y] = coord;\n    const y2 = topLeft ? y : this.height - y;\n    return xyz.length === 2 ? [x, y2] : [x, y2, coord[2]];\n  }\n\n  /**\n   * Unproject pixel coordinates on screen onto world coordinates,\n   * (possibly [lon, lat]) on map.\n   * - [x, y] => [lng, lat]\n   * - [x, y, z] => [lng, lat, Z]\n   * @param {Array} xyz -\n   * @param {Object} opts - options\n   * @param {Object} opts.topLeft=true - Whether origin is top left\n   * @return {Array|null} - [lng, lat, Z] or [X, Y, Z]\n   */\n  unproject(xyz, {topLeft = true, targetZ} = {}) {\n    const [x, y, z] = xyz;\n\n    const y2 = topLeft ? y : this.height - y;\n    const coord = pixelsToWorld([x, y2, z], this.pixelUnprojectionMatrix, targetZ);\n    const [X, Y] = this.unprojectFlat(coord);\n\n    if (Number.isFinite(z)) {\n      // Has depth component\n      return [X, Y, coord[2]];\n    }\n\n    return Number.isFinite(targetZ) ? [X, Y, targetZ] : [X, Y];\n  }\n\n  // NON_LINEAR PROJECTION HOOKS\n  // Used for web meractor projection\n\n  /**\n   * Project [lng,lat] on sphere onto [x,y] on 512*512 Mercator Zoom 0 tile.\n   * Performs the nonlinear part of the web mercator projection.\n   * Remaining projection is done with 4x4 matrices which also handles\n   * perspective.\n   * @param {Array} lngLat - [lng, lat] coordinates\n   *   Specifies a point on the sphere to project onto the map.\n   * @return {Array} [x,y] coordinates.\n   */\n  projectFlat([x, y], scale = this.scale) {\n    return this._projectFlat(...arguments);\n  }\n\n  /**\n   * Unproject world point [x,y] on map onto {lat, lon} on sphere\n   * @param {object|Vector} xy - object with {x,y} members\n   *  representing point on projected map plane\n   * @return {GeoCoordinates} - object with {lat,lon} of point on sphere.\n   *   Has toArray method if you need a GeoJSON Array.\n   *   Per cartographic tradition, lat and lon are specified as degrees.\n   */\n  unprojectFlat(xyz, scale = this.scale) {\n    return this._unprojectFlat(...arguments);\n  }\n\n  // TODO - why do we need these?\n  _projectFlat(xyz, scale = this.scale) {\n    return xyz;\n  }\n\n  _unprojectFlat(xyz, scale = this.scale) {\n    return xyz;\n  }\n\n  getMercatorParams() {\n    const lngLat = this._addMetersToLngLat(\n      [this.longitude || 0, this.latitude || 0],\n      this.meterOffset\n    );\n    return {\n      longitude: lngLat[0],\n      latitude: lngLat[1]\n    };\n  }\n\n  isMapSynched() {\n    return false;\n  }\n\n  getDistanceScales(coordinateOrigin = null) {\n    if (coordinateOrigin) {\n      return getDistanceScales({\n        longitude: coordinateOrigin[0],\n        latitude: coordinateOrigin[1],\n        scale: this.scale,\n        highPrecision: true\n      });\n    }\n    return this.distanceScales;\n  }\n\n  getMatrices({modelMatrix = null} = {}) {\n    let modelViewProjectionMatrix = this.viewProjectionMatrix;\n    let pixelProjectionMatrix = this.pixelProjectionMatrix;\n    let pixelUnprojectionMatrix = this.pixelUnprojectionMatrix;\n\n    if (modelMatrix) {\n      modelViewProjectionMatrix = mat4_multiply([], this.viewProjectionMatrix, modelMatrix);\n      pixelProjectionMatrix = mat4_multiply([], this.pixelProjectionMatrix, modelMatrix);\n      pixelUnprojectionMatrix = mat4_invert([], pixelProjectionMatrix);\n    }\n\n    const matrices = Object.assign({\n      modelViewProjectionMatrix,\n      viewProjectionMatrix: this.viewProjectionMatrix,\n      viewMatrix: this.viewMatrix,\n      projectionMatrix: this.projectionMatrix,\n\n      // project/unproject between pixels and world\n      pixelProjectionMatrix,\n      pixelUnprojectionMatrix,\n\n      width: this.width,\n      height: this.height,\n      scale: this.scale\n    });\n\n    return matrices;\n  }\n\n  // EXPERIMENTAL METHODS\n\n  getCameraPosition() {\n    return this.cameraPosition;\n  }\n\n  getCameraDirection() {\n    return this.cameraDirection;\n  }\n\n  getCameraUp() {\n    return this.cameraUp;\n  }\n\n  // INTERNAL METHODS\n\n  // TODO - these are duplicating WebMercator methods\n  _addMetersToLngLat(lngLatZ, xyz) {\n    const [lng, lat, Z = 0] = lngLatZ;\n    const [deltaLng, deltaLat, deltaZ = 0] = this._metersToLngLatDelta(xyz);\n    return lngLatZ.length === 2\n      ? [lng + deltaLng, lat + deltaLat]\n      : [lng + deltaLng, lat + deltaLat, Z + deltaZ];\n  }\n\n  _metersToLngLatDelta(xyz) {\n    const [x, y, z = 0] = xyz;\n    assert(Number.isFinite(x) && Number.isFinite(y) && Number.isFinite(z), ERR_ARGUMENT);\n    const {pixelsPerMeter, degreesPerPixel} = this.distanceScales;\n    const deltaLng = x * pixelsPerMeter[0] * degreesPerPixel[0];\n    const deltaLat = y * pixelsPerMeter[1] * degreesPerPixel[1];\n    return xyz.length === 2 ? [deltaLng, deltaLat] : [deltaLng, deltaLat, z];\n  }\n\n  _createProjectionMatrix({orthographic, fovyRadians, aspect, focalDistance, near, far}) {\n    assert(Number.isFinite(fovyRadians));\n    return orthographic\n      ? new Matrix4().orthographic({fovy: fovyRadians, aspect, focalDistance, near, far})\n      : new Matrix4().perspective({fovy: fovyRadians, aspect, near, far});\n  }\n\n  _initPixelMatrices() {\n    // Note: As usual, matrix operations should be applied in \"reverse\" order\n    // since vectors will be multiplied in from the right during transformation\n    const vpm = createMat4();\n    mat4_multiply(vpm, vpm, this.projectionMatrix);\n    mat4_multiply(vpm, vpm, this.viewMatrix);\n    this.viewProjectionMatrix = vpm;\n\n    // console.log('VPM', this.viewMatrix, this.projectionMatrix, this.viewProjectionMatrix);\n\n    // Calculate inverse view matrix\n    this.viewMatrixInverse = mat4_invert([], this.viewMatrix) || this.viewMatrix;\n\n    // Decompose camera directions\n    const {eye, direction, up} = extractCameraVectors({\n      viewMatrix: this.viewMatrix,\n      viewMatrixInverse: this.viewMatrixInverse\n    });\n    this.cameraPosition = eye;\n    this.cameraDirection = direction;\n    this.cameraUp = up;\n\n    // console.log(this.cameraPosition, this.cameraDirection, this.cameraUp);\n\n    /*\n     * Builds matrices that converts preprojected lngLats to screen pixels\n     * and vice versa.\n     * Note: Currently returns bottom-left coordinates!\n     * Note: Starts with the GL projection matrix and adds steps to the\n     *       scale and translate that matrix onto the window.\n     * Note: WebGL controls clip space to screen projection with gl.viewport\n     *       and does not need this step.\n     */\n\n    // matrix for conversion from world location to screen (pixel) coordinates\n    const m = createMat4();\n    mat4_scale(m, m, [this.width / 2, -this.height / 2, 1]);\n    mat4_translate(m, m, [1, -1, 0]);\n    mat4_multiply(m, m, this.viewProjectionMatrix);\n    this.pixelProjectionMatrix = m;\n\n    this.pixelUnprojectionMatrix = mat4_invert(createMat4(), this.pixelProjectionMatrix);\n    if (!this.pixelUnprojectionMatrix) {\n      log.warn('Pixel project matrix not invertible')();\n      // throw new Error('Pixel project matrix not invertible');\n    }\n  }\n}\n\nViewport.displayName = 'Viewport';\n"],"file":"viewport.js"}