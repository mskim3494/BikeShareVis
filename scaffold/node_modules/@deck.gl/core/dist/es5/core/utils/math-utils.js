"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.transformVector = transformVector;
exports.createMat4 = createMat4;
exports.extractCameraVectors = extractCameraVectors;
exports.mod = mod;
exports.lerp = lerp;
exports.createOrthographicMatrix = createOrthographicMatrix;
exports.getProjectionParameters = getProjectionParameters;

var _multiply = _interopRequireDefault(require("gl-vec4/multiply"));

var _transformMat = _interopRequireDefault(require("gl-vec4/transformMat4"));

var _assert = _interopRequireDefault(require("../utils/assert"));

var _math = require("math.gl");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Extensions to math.gl library. Intended to be folded back.
function transformVector(matrix, vector) {
  // Handle non-invertible matrix
  if (!matrix) {
    return null;
  }

  var result = (0, _transformMat.default)([0, 0, 0, 0], vector, matrix);
  var scale = 1 / result[3];
  (0, _multiply.default)(result, result, [scale, scale, scale, scale]);
  return result;
} // Helper, avoids low-precision 32 bit matrices from gl-matrix mat4.create()


function createMat4() {
  return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
} // Extract camera vectors (move to math library?)


function extractCameraVectors(_ref) {
  var viewMatrix = _ref.viewMatrix,
      viewMatrixInverse = _ref.viewMatrixInverse;
  // Read the translation from the inverse view matrix
  return {
    eye: [viewMatrixInverse[12], viewMatrixInverse[13], viewMatrixInverse[14]],
    direction: [viewMatrix[2], viewMatrix[6], viewMatrix[10]],
    up: [viewMatrix[1], viewMatrix[5], viewMatrix[9]]
  };
}

function mod(value, divisor) {
  (0, _assert.default)(Number.isFinite(value) && Number.isFinite(divisor));
  var modulus = value % divisor;
  return modulus < 0 ? divisor + modulus : modulus;
}

function lerp(start, end, step) {
  if (Array.isArray(start)) {
    return start.map(function (element, index) {
      return lerp(element, end[index], step);
    });
  }

  return step * end + (1 - step) * start;
} // TODO - this method is being added to math.gl, remove when published


function createOrthographicMatrix(_ref2) {
  var fovY = _ref2.fovY,
      aspect = _ref2.aspect,
      focalDistance = _ref2.focalDistance,
      near = _ref2.near,
      far = _ref2.far;
  var halfY = fovY / 2;
  var top = focalDistance * Math.tan(halfY); // focus_plane is the distance from the camera

  var right = top * aspect;
  return new _math.Matrix4().ortho({
    left: -right,
    right: right,
    bottom: -top,
    top: top,
    near: near,
    far: far
  });
} // TODO - this function is being added to viewport-mercator-project, remove when published
// PROJECTION MATRIX PARAMETERS
// This is a "Mapbox" projection matrix - matches mapbox exactly if farZMultiplier === 1
// Variable fov (in radians)


function getProjectionParameters(_ref3) {
  var width = _ref3.width,
      height = _ref3.height,
      _ref3$altitude = _ref3.altitude,
      altitude = _ref3$altitude === void 0 ? 1.5 : _ref3$altitude,
      _ref3$pitch = _ref3.pitch,
      pitch = _ref3$pitch === void 0 ? 0 : _ref3$pitch,
      _ref3$farZMultiplier = _ref3.farZMultiplier,
      farZMultiplier = _ref3$farZMultiplier === void 0 ? 1 : _ref3$farZMultiplier;
  // Find the distance from the center point to the center top
  // in altitude units using law of sines.
  var pitchRadians = (0, _math.radians)(pitch);
  var halfFov = Math.atan(0.5 / altitude);
  var topHalfSurfaceDistance = Math.sin(halfFov) * altitude / Math.sin(Math.PI / 2 - pitchRadians - halfFov); // Calculate z value of the farthest fragment that should be rendered.

  var farZ = Math.cos(Math.PI / 2 - pitchRadians) * topHalfSurfaceDistance + altitude;
  return {
    fov: 2 * Math.atan(height / 2 / altitude),
    aspect: width / height,
    focalDistance: altitude,
    near: 0.1,
    far: farZ * farZMultiplier
  };
}
//# sourceMappingURL=math-utils.js.map