{"version":3,"sources":["../../../../src/core/lib/layer-manager.js"],"names":["LOG_PRIORITY_LIFECYCLE","LOG_PRIORITY_LIFECYCLE_MINOR","INITIAL_VIEW_STATE","latitude","longitude","zoom","INITIAL_CONTEXT","Object","seal","layerManager","gl","useDevicePixels","stats","viewport","shaderCache","pickingFBO","lastPickedInfo","index","layerId","userData","layerName","Layer","layer","LayerManager","eventManager","lastRenderedLayers","layers","context","assign","ShaderCache","_cachePrograms","Stats","id","width","height","views","viewState","viewsChanged","viewports","layerFilter","drawPickingColors","_needsRedraw","_needsUpdate","_pickingRadius","_eventManager","_onLayerClick","_onLayerHover","_onClick","bind","_onPointerMove","_onPointerLeave","_pickAndCallback","_initSeer","_editSeer","_initEventHandling","setViews","seer","removeListener","clearRedrawFlags","_checkIfNeedsRedraw","reason","layerIds","filter","find","indexOf","_rebuildViewportsFromViews","parameters","_setEventHandlingParameters","setSize","setViewState","setLayers","setNeedsRedraw","Number","isFinite","length","MapView","Boolean","map","Viewport","View","viewportInstance","view","_diffViews","viewStateChanged","log","warn","newLayers","getViewports","_updateLayers","oldLayers","error","generatedLayers","needsUpdate","pass","redrawReason","onViewportActive","_activateViewport","x","y","mode","radius","getLayers","_getPickingBuffer","deprecated","redraw","layerNeedsRedraw","getNeedsRedraw","newViewports","makeViewport","newViews","oldViews","some","_","i","equals","on","click","pointermove","pointerleave","pickingRadius","onLayerClick","onLayerHover","isNaN","_validateEventHandling","oldViewport","viewportChanged","setChangeFlags","_updateLayer","Framebuffer","resize","canvas","oldLayerMap","oldLayer","_updateSublayersRecursively","error2","_finalizeOldLayers","firstError","newLayer","sublayers","_initializeLayer","_transferLayerState","push","isComposite","getSubLayers","err","_finalizeLayer","_initialize","lifecycle","LIFECYCLE","INITIALIZED","internalState","getModels","model","_transferState","MATCHED","AWAITING_GC","printChangeFlags","_update","AWAITING_FINALIZATION","_finalize","FINALIZED","props","pickable","event","offsetCenter","callback","leftButton","rightButton","pickObject","options","pos","selectedInfos","firstInfo","info","srcEvent","forEach","payload","type","valuePath","itemKey","slice","value","constructor","updateLayers"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport assert from '../utils/assert';\nimport {Framebuffer, ShaderCache} from 'luma.gl';\nimport seer from 'seer';\nimport Layer from './layer';\nimport {drawLayers} from './draw-layers';\nimport {pickObject, pickVisibleObjects} from './pick-layers';\nimport {LIFECYCLE} from '../lifecycle/constants';\nimport {deepEqual} from '../utils/deep-equal';\nimport View from '../views/view';\nimport MapView from '../views/map-view';\nimport Viewport from '../viewports/viewport';\nimport log from '../utils/log';\nimport {flatten} from '../utils/flatten';\nimport {Stats} from 'probe.gl';\n\nimport {\n  setPropOverrides,\n  layerEditListener,\n  seerInitListener,\n  initLayerInSeer,\n  updateLayerInSeer\n} from './seer-integration';\n\nconst LOG_PRIORITY_LIFECYCLE = 2;\nconst LOG_PRIORITY_LIFECYCLE_MINOR = 4;\n\nconst INITIAL_VIEW_STATE = {latitude: 0, longitude: 0, zoom: 1};\n\n// CONTEXT IS EXPOSED TO LAYERS\nconst INITIAL_CONTEXT = Object.seal({\n  layerManager: null,\n  gl: null,\n\n  // Settings\n  useDevicePixels: true, // Exposed in case custom layers need to adjust sizes\n\n  // General resources\n  stats: null, // for tracking lifecycle performance\n  viewport: null, // Current viewport, exposed to layers for project* function\n\n  // GL Resources\n  shaderCache: null,\n  pickingFBO: null, // Screen-size framebuffer that layers can reuse\n\n  // State\n  lastPickedInfo: {\n    // For callback tracking and autohighlight\n    index: -1,\n    layerId: null\n  },\n\n  userData: {} // Place for any custom app `context`\n});\n\nconst layerName = layer => (layer instanceof Layer ? `${layer}` : !layer ? 'null' : 'invalid');\n\nexport default class LayerManager {\n  // eslint-disable-next-line\n  constructor(gl, {eventManager, stats} = {}) {\n    // Currently deck.gl expects the DeckGL.layers array to be different\n    // whenever React rerenders. If the same layers array is used, the\n    // LayerManager's diffing algorithm will generate a fatal error and\n    // break the rendering.\n\n    // `this.lastRenderedLayers` stores the UNFILTERED layers sent\n    // down to LayerManager, so that `layers` reference can be compared.\n    // If it's the same across two React render calls, the diffing logic\n    // will be skipped.\n    this.lastRenderedLayers = [];\n    this.layers = [];\n\n    this.context = Object.assign({}, INITIAL_CONTEXT, {\n      layerManager: this,\n\n      gl,\n      // Enabling luma.gl Program caching using private API (_cachePrograms)\n      shaderCache: new ShaderCache({gl, _cachePrograms: true}),\n      stats: stats || new Stats({id: 'deck.gl'})\n    });\n\n    // List of view descriptors, gets re-evaluated when width/height changes\n    this.width = 100;\n    this.height = 100;\n    this.views = [];\n    this.viewState = INITIAL_VIEW_STATE;\n    this.viewsChanged = true;\n    this.viewports = []; // Generated viewports\n\n    this.layerFilter = null;\n    this.drawPickingColors = false;\n\n    this._needsRedraw = 'Initial render';\n    this._needsUpdate = false;\n\n    // Event handling\n    this._pickingRadius = 0;\n\n    this._eventManager = null;\n    this._onLayerClick = null;\n    this._onLayerHover = null;\n    this._onClick = this._onClick.bind(this);\n    this._onPointerMove = this._onPointerMove.bind(this);\n    this._onPointerLeave = this._onPointerLeave.bind(this);\n    this._pickAndCallback = this._pickAndCallback.bind(this);\n\n    // Seer integration\n    this._initSeer = this._initSeer.bind(this);\n    this._editSeer = this._editSeer.bind(this);\n\n    Object.seal(this);\n\n    seerInitListener(this._initSeer);\n    layerEditListener(this._editSeer);\n\n    if (eventManager) {\n      this._initEventHandling(eventManager);\n    }\n\n    // Init with default map viewport\n    this.setViews();\n  }\n\n  /**\n   * Method to call when the layer manager is not needed anymore.\n   *\n   * Currently used in the <DeckGL> componentWillUnmount lifecycle to unbind Seer listeners.\n   */\n  finalize() {\n    seer.removeListener(this._initSeer);\n    seer.removeListener(this._editSeer);\n  }\n\n  // Check if a redraw is needed\n  needsRedraw({clearRedrawFlags = true} = {}) {\n    return this._checkIfNeedsRedraw(clearRedrawFlags);\n  }\n\n  // Check if a deep update of all layers is needed\n  needsUpdate() {\n    return this._needsUpdate;\n  }\n\n  // Layers will be redrawn (in next animation frame)\n  setNeedsRedraw(reason) {\n    this._needsRedraw = this._needsRedraw || reason;\n  }\n\n  // Layers will be updated deeply (in next animation frame)\n  // Potentially regenerating attributes and sub layers\n  setNeedsUpdate(reason) {\n    this._needsUpdate = this._needsUpdate || reason;\n  }\n\n  // Gets an (optionally) filtered list of layers\n  getLayers({layerIds = null} = {}) {\n    // Filtering by layerId compares beginning of strings, so that sublayers will be included\n    // Dependes on the convention of adding suffixes to the parent's layer name\n    return layerIds\n      ? this.layers.filter(layer => layerIds.find(layerId => layer.id.indexOf(layerId) === 0))\n      : this.layers;\n  }\n\n  getViews() {\n    return this.views;\n  }\n\n  // Get a set of viewports for a given width and height\n  // TODO - Intention is for deck.gl to autodeduce width and height and drop the need for props\n  getViewports() {\n    this._rebuildViewportsFromViews();\n    this.context.viewport = this.viewports[0];\n    return this.viewports;\n  }\n\n  /**\n   * Set parameters needed for layer rendering and picking.\n   * Parameters are to be passed as a single object, with the following values:\n   * @param {Boolean} useDevicePixels\n   */\n  /* eslint-disable complexity */\n  setParameters(parameters) {\n    if ('eventManager' in parameters) {\n      this._initEventHandling(parameters.eventManager);\n    }\n\n    if (\n      'pickingRadius' in parameters ||\n      'onLayerClick' in parameters ||\n      'onLayerHover' in parameters\n    ) {\n      this._setEventHandlingParameters(parameters);\n    }\n\n    if ('width' in parameters || 'height' in parameters) {\n      this.setSize(parameters.width, parameters.height);\n    }\n\n    if ('views' in parameters) {\n      this.setViews(parameters.views);\n    }\n\n    // TODO - support multiple view states\n    if ('viewState' in parameters) {\n      this.setViewState(parameters.viewState);\n    }\n\n    // TODO - For now we set layers before viewports to preservenchangeFlags\n    if ('layers' in parameters) {\n      this.setLayers(parameters.layers);\n    }\n\n    if ('layerFilter' in parameters) {\n      if (this.layerFilter !== parameters.layerFilter) {\n        this.layerFilter = parameters.layerFilter;\n        this.setNeedsRedraw('layerFilter changed');\n      }\n    }\n\n    if ('drawPickingColors' in parameters) {\n      if (parameters.drawPickingColors !== this.drawPickingColors) {\n        this.drawPickingColors = parameters.drawPickingColors;\n        this.setNeedsRedraw('drawPickingColors changed');\n      }\n    }\n\n    // A way for apps to add data to context that can be accessed in layers\n    if ('userData' in parameters) {\n      this.context.userData = parameters.userData;\n    }\n\n    if ('useDevicePixels' in parameters) {\n      this.context.useDevicePixels = parameters.useDevicePixels;\n    }\n  }\n  /* eslint-enable complexity */\n\n  setSize(width, height) {\n    assert(Number.isFinite(width) && Number.isFinite(height));\n    if (width !== this.width || height !== this.height) {\n      this.width = width;\n      this.height = height;\n      this.viewsChanged = true;\n      this.setNeedsRedraw('Size changed');\n    }\n  }\n\n  // Update the view descriptor list and set change flag if needed\n  // Does not actually rebuild the `Viewport`s until `getViewports` is called\n  setViews(views) {\n    // For now, we default to a full screen map view port\n    // TODO - apps may want to specify an empty view list...\n    if (!views || views.length === 0) {\n      views = [new MapView({id: 'default-view'})];\n    }\n\n    // Ensure any \"naked\" Viewports are wrapped in View instances\n    views = flatten(views, {filter: Boolean}).map(\n      view => (view instanceof Viewport ? new View({viewportInstance: view}) : view)\n    );\n\n    const viewsChanged = this._diffViews(views, this.views);\n\n    this.views = views;\n    this.viewsChanged = this.viewsChanged || viewsChanged;\n  }\n\n  setViewState(viewState) {\n    if (viewState) {\n      const viewStateChanged = deepEqual(viewState, this.viewState);\n      this.viewState = viewState;\n      this.viewsChanged = true || viewStateChanged;\n    } else {\n      log.warn('viewState is not valid')();\n    }\n  }\n\n  // Supply a new layer list, initiating sublayer generation and layer matching\n  setLayers(newLayers) {\n    this.getViewports();\n    assert(this.context.viewport, 'LayerManager.updateLayers: viewport not set');\n\n    // TODO - something is generating state updates that cause rerender of the same\n    if (newLayers === this.lastRenderedLayers) {\n      log.log(3, 'Ignoring layer update due to layer array not changed')();\n      return this;\n    }\n    this.lastRenderedLayers = newLayers;\n\n    newLayers = flatten(newLayers, {filter: Boolean});\n\n    for (const layer of newLayers) {\n      layer.context = this.context;\n    }\n\n    const {error, generatedLayers} = this._updateLayers({\n      oldLayers: this.layers,\n      newLayers\n    });\n\n    this.layers = generatedLayers;\n\n    // Throw first error found, if any\n    if (error) {\n      throw error;\n    }\n    return this;\n  }\n\n  // Update layers from last cycle if `setNeedsUpdate()` has been called\n  updateLayers() {\n    // NOTE: For now, even if only some layer has changed, we update all layers\n    // to ensure that layer id maps etc remain consistent even if different\n    // sublayers are rendered\n    const reason = this.needsUpdate();\n    if (reason) {\n      this.setNeedsRedraw(`updating layers: ${reason}`);\n      // HACK - Call with a copy of lastRenderedLayers to trigger a full update\n      this.setLayers([...this.lastRenderedLayers]);\n    }\n  }\n\n  //\n  // METHODS FOR LAYERS\n  //\n\n  // Draw all layers in all views\n  drawLayers({pass = 'render to screen', redrawReason = 'unknown reason'} = {}) {\n    const {drawPickingColors} = this;\n    const {gl, useDevicePixels} = this.context;\n\n    // render this viewport\n    drawLayers(gl, {\n      layers: this.layers,\n      viewports: this.getViewports(),\n      onViewportActive: this._activateViewport.bind(this),\n      useDevicePixels,\n      drawPickingColors,\n      pass,\n      layerFilter: this.layerFilter,\n      redrawReason\n    });\n  }\n\n  // Pick the closest info at given coordinate\n  pickObject({x, y, mode, radius = 0, layerIds, layerFilter}) {\n    const {gl, useDevicePixels} = this.context;\n\n    const layers = this.getLayers({layerIds});\n\n    return pickObject(gl, {\n      // User params\n      x,\n      y,\n      radius,\n      layers,\n      mode,\n      layerFilter,\n      // Injected params\n      viewports: this.getViewports(),\n      onViewportActive: this._activateViewport.bind(this),\n      pickingFBO: this._getPickingBuffer(),\n      lastPickedInfo: this.context.lastPickedInfo,\n      useDevicePixels\n    });\n  }\n\n  // Get all unique infos within a bounding box\n  pickObjects({x, y, width, height, layerIds, layerFilter}) {\n    const {gl, useDevicePixels} = this.context;\n\n    const layers = this.getLayers({layerIds});\n\n    return pickVisibleObjects(gl, {\n      x,\n      y,\n      width,\n      height,\n      layers,\n      layerFilter,\n      mode: 'pickObjects',\n      viewports: this.getViewports(),\n      onViewportActive: this._activateViewport.bind(this),\n      pickingFBO: this._getPickingBuffer(),\n      useDevicePixels\n    });\n  }\n\n  //\n  // DEPRECATED METHODS in V5.1\n  //\n\n  setViewports(viewports) {\n    log.deprecated('setViewport', 'setViews')();\n    this.setViews(viewports);\n    return this;\n  }\n\n  //\n  // DEPRECATED METHODS in V5\n  //\n\n  setViewport(viewport) {\n    log.deprecated('setViewport', 'setViews')();\n    this.setViews([viewport]);\n    return this;\n  }\n\n  //\n  // PRIVATE METHODS\n  //\n\n  _checkIfNeedsRedraw(clearRedrawFlags) {\n    let redraw = this._needsRedraw;\n    if (clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n\n    // This layers list doesn't include sublayers, relying on composite layers\n    for (const layer of this.layers) {\n      // Call every layer to clear their flags\n      const layerNeedsRedraw = layer.getNeedsRedraw({clearRedrawFlags});\n      redraw = redraw || layerNeedsRedraw;\n    }\n\n    return redraw;\n  }\n\n  // Rebuilds viewports from descriptors towards a certain window size\n  _rebuildViewportsFromViews() {\n    if (this.viewsChanged) {\n      const {width, height, views, viewState} = this;\n      const newViewports = views.map(view => view.makeViewport({width, height, viewState}));\n\n      this.setNeedsRedraw('Viewport(s) changed');\n\n      // Ensure one viewport is activated, layers may expect it\n      // TODO - handle empty viewport list (using dummy viewport), or assert\n      // const oldViewports = this.context.viewports;\n\n      const viewport = newViewports[0];\n      assert(viewport instanceof Viewport, 'Invalid viewport');\n\n      this.context.viewports = newViewports;\n      this._activateViewport(viewport);\n      // }\n\n      // We've just rebuilt the viewports to match the descriptors, so clear the flag\n      this.viewports = newViewports;\n      this.viewsChanged = false;\n    }\n  }\n\n  // Check if viewport array has changed, returns true if any change\n  // Note that descriptors can be the same\n  _diffViews(newViews, oldViews) {\n    if (newViews.length !== oldViews.length) {\n      return true;\n    }\n\n    return newViews.some((_, i) => !newViews[i].equals(oldViews[i]));\n  }\n\n  /**\n   * @param {Object} eventManager   A source of DOM input events\n   */\n  _initEventHandling(eventManager) {\n    this._eventManager = eventManager;\n\n    // TODO: add/remove handlers on demand at runtime, not all at once on init.\n    // Consider both top-level handlers like onLayerClick/Hover\n    // and per-layer handlers attached to individual layers.\n    // https://github.com/uber/deck.gl/issues/634\n    this._eventManager.on({\n      click: this._onClick,\n      pointermove: this._onPointerMove,\n      pointerleave: this._onPointerLeave\n    });\n  }\n\n  // Set parameters for input event handling.\n  _setEventHandlingParameters({pickingRadius, onLayerClick, onLayerHover}) {\n    if (!isNaN(pickingRadius)) {\n      this._pickingRadius = pickingRadius;\n    }\n    if (typeof onLayerClick !== 'undefined') {\n      this._onLayerClick = onLayerClick;\n    }\n    if (typeof onLayerHover !== 'undefined') {\n      this._onLayerHover = onLayerHover;\n    }\n    this._validateEventHandling();\n  }\n\n  // Make a viewport \"current\" in layer context, primed for draw\n  _activateViewport(viewport) {\n    const oldViewport = this.context.viewport;\n    const viewportChanged = !oldViewport || !viewport.equals(oldViewport);\n\n    if (viewportChanged) {\n      log.log(4, 'Viewport', viewport)();\n\n      this.context.viewport = viewport;\n\n      // Update layers states\n      // Let screen space layers update their state based on viewport\n      for (const layer of this.layers) {\n        layer.setChangeFlags({viewportChanged: 'Viewport changed'});\n        this._updateLayer(layer);\n      }\n    }\n\n    assert(this.context.viewport, 'LayerManager: viewport not set');\n\n    return this;\n  }\n\n  _getPickingBuffer() {\n    const {gl} = this.context;\n    // Create a frame buffer if not already available\n    this.context.pickingFBO = this.context.pickingFBO || new Framebuffer(gl);\n    // Resize it to current canvas size (this is a noop if size hasn't changed)\n    this.context.pickingFBO.resize({width: gl.canvas.width, height: gl.canvas.height});\n    return this.context.pickingFBO;\n  }\n\n  // Match all layers, checking for caught errors\n  // To avoid having an exception in one layer disrupt other layers\n  // TODO - mark layers with exceptions as bad and remove from rendering cycle?\n  _updateLayers({oldLayers, newLayers}) {\n    // Create old layer map\n    const oldLayerMap = {};\n    for (const oldLayer of oldLayers) {\n      if (oldLayerMap[oldLayer.id]) {\n        log.warn(`Multiple old layers with same id ${layerName(oldLayer)}`)();\n      } else {\n        oldLayerMap[oldLayer.id] = oldLayer;\n      }\n    }\n\n    // Allocate array for generated layers\n    const generatedLayers = [];\n\n    // Match sublayers\n    const error = this._updateSublayersRecursively({\n      newLayers,\n      oldLayerMap,\n      generatedLayers\n    });\n\n    // Finalize unmatched layers\n    const error2 = this._finalizeOldLayers(oldLayerMap);\n\n    this._needsUpdate = false;\n\n    const firstError = error || error2;\n    return {error: firstError, generatedLayers};\n  }\n\n  // Note: adds generated layers to `generatedLayers` array parameter\n  _updateSublayersRecursively({newLayers, oldLayerMap, generatedLayers}) {\n    let error = null;\n\n    for (const newLayer of newLayers) {\n      newLayer.context = this.context;\n\n      // Given a new coming layer, find its matching old layer (if any)\n      const oldLayer = oldLayerMap[newLayer.id];\n      if (oldLayer === null) {\n        // null, rather than undefined, means this id was originally there\n        log.warn(`Multiple new layers with same id ${layerName(newLayer)}`)();\n      }\n      // Remove the old layer from candidates, as it has been matched with this layer\n      oldLayerMap[newLayer.id] = null;\n\n      let sublayers = null;\n\n      // We must not generate exceptions until after layer matching is complete\n      try {\n        if (!oldLayer) {\n          this._initializeLayer(newLayer);\n          initLayerInSeer(newLayer); // Initializes layer in seer chrome extension (if connected)\n        } else {\n          this._transferLayerState(oldLayer, newLayer);\n          this._updateLayer(newLayer);\n          updateLayerInSeer(newLayer); // Updates layer in seer chrome extension (if connected)\n        }\n        generatedLayers.push(newLayer);\n\n        // Call layer lifecycle method: render sublayers\n        sublayers = newLayer.isComposite && newLayer.getSubLayers();\n        // End layer lifecycle method: render sublayers\n      } catch (err) {\n        log.warn(`error during matching of ${layerName(newLayer)}`, err);\n        error = error || err; // Record first exception\n      }\n\n      if (sublayers) {\n        this._updateSublayersRecursively({\n          newLayers: sublayers,\n          oldLayerMap,\n          generatedLayers\n        });\n      }\n    }\n\n    return error;\n  }\n\n  // Finalize any old layers that were not matched\n  _finalizeOldLayers(oldLayerMap) {\n    let error = null;\n    for (const layerId in oldLayerMap) {\n      const layer = oldLayerMap[layerId];\n      if (layer) {\n        error = error || this._finalizeLayer(layer);\n      }\n    }\n    return error;\n  }\n\n  // EXCEPTION SAFE LAYER ACCESS\n\n  // Initializes a single layer, calling layer methods\n  _initializeLayer(layer) {\n    log.log(LOG_PRIORITY_LIFECYCLE, `initializing ${layerName(layer)}`)();\n\n    let error = null;\n    try {\n      layer._initialize();\n      layer.lifecycle = LIFECYCLE.INITIALIZED;\n    } catch (err) {\n      log.warn(`error while initializing ${layerName(layer)}\\n`, err)();\n      error = error || err;\n      // TODO - what should the lifecycle state be here? LIFECYCLE.INITIALIZATION_FAILED?\n    }\n\n    // Set back pointer (used in picking)\n    layer.internalState.layer = layer;\n\n    // Save layer on model for picking purposes\n    // store on model.userData rather than directly on model\n    for (const model of layer.getModels()) {\n      model.userData.layer = layer;\n    }\n\n    return error;\n  }\n\n  _transferLayerState(oldLayer, newLayer) {\n    newLayer._transferState(oldLayer);\n    newLayer.lifecycle = LIFECYCLE.MATCHED;\n\n    if (newLayer !== oldLayer) {\n      log.log(\n        LOG_PRIORITY_LIFECYCLE_MINOR,\n        `matched ${layerName(newLayer)}`,\n        oldLayer,\n        '->',\n        newLayer\n      )();\n      oldLayer.lifecycle = LIFECYCLE.AWAITING_GC;\n    } else {\n      log.log(LOG_PRIORITY_LIFECYCLE_MINOR, `Matching layer is unchanged ${newLayer.id}`)();\n    }\n  }\n\n  // Updates a single layer, cleaning all flags\n  _updateLayer(layer) {\n    log.log(\n      LOG_PRIORITY_LIFECYCLE_MINOR,\n      `updating ${layer} because: ${layer.printChangeFlags()}`\n    )();\n    let error = null;\n    try {\n      layer._update();\n    } catch (err) {\n      log.warn(`error during update of ${layerName(layer)}`, err)();\n      // Save first error\n      error = err;\n    }\n    return error;\n  }\n\n  // Finalizes a single layer\n  _finalizeLayer(layer) {\n    assert(layer.lifecycle !== LIFECYCLE.AWAITING_FINALIZATION);\n    layer.lifecycle = LIFECYCLE.AWAITING_FINALIZATION;\n    let error = null;\n    this.setNeedsRedraw(`finalized ${layerName(layer)}`);\n    try {\n      layer._finalize();\n    } catch (err) {\n      log.warn(`error during finalization of ${layerName(layer)}`, err)();\n      error = err;\n    }\n    layer.lifecycle = LIFECYCLE.FINALIZED;\n    log.log(LOG_PRIORITY_LIFECYCLE, `finalizing ${layerName(layer)}`);\n    return error;\n  }\n\n  /**\n   * Warn if a deck-level mouse event has been specified,\n   * but no layers are `pickable`.\n   */\n  _validateEventHandling() {\n    if (this.onLayerClick || this.onLayerHover) {\n      if (this.layers.length && !this.layers.some(layer => layer.props.pickable)) {\n        log.warn(\n          'You have supplied a top-level input event handler (e.g. `onLayerClick`), ' +\n            'but none of your layers have set the `pickable` flag.'\n        )();\n      }\n    }\n  }\n\n  /**\n   * Route click events to layers.\n   * `pickLayer` will call the `onClick` prop of any picked layer,\n   * and `onLayerClick` is called directly from here\n   * with any picking info generated by `pickLayer`.\n   * @param {Object} event  An object encapsulating an input event,\n   *                        with the following shape:\n   *                        {Object: {x, y}} offsetCenter: center of the event\n   *                        {Object} srcEvent:             native JS Event object\n   */\n  _onClick(event) {\n    if (!event.offsetCenter) {\n      // Do not trigger onHover callbacks when click position is invalid.\n      return;\n    }\n    this._pickAndCallback({\n      callback: this._onLayerClick,\n      event,\n      mode: 'click'\n    });\n  }\n\n  /**\n   * Route click events to layers.\n   * `pickLayer` will call the `onHover` prop of any picked layer,\n   * and `onLayerHover` is called directly from here\n   * with any picking info generated by `pickLayer`.\n   * @param {Object} event  An object encapsulating an input event,\n   *                        with the following shape:\n   *                        {Object: {x, y}} offsetCenter: center of the event\n   *                        {Object} srcEvent:             native JS Event object\n   */\n  _onPointerMove(event) {\n    if (event.leftButton || event.rightButton) {\n      // Do not trigger onHover callbacks if mouse button is down.\n      return;\n    }\n    this._pickAndCallback({\n      callback: this._onLayerHover,\n      event,\n      mode: 'hover'\n    });\n  }\n\n  _onPointerLeave(event) {\n    this.pickObject({\n      x: -1,\n      y: -1,\n      radius: this._pickingRadius,\n      mode: 'hover'\n    });\n  }\n\n  _pickAndCallback(options) {\n    const pos = options.event.offsetCenter;\n    const radius = this._pickingRadius;\n    const selectedInfos = this.pickObject({x: pos.x, y: pos.y, radius, mode: options.mode});\n    if (options.callback) {\n      const firstInfo = selectedInfos.find(info => info.index >= 0) || null;\n      // As per documentation, send null value when no valid object is picked.\n      options.callback(firstInfo, selectedInfos, options.event.srcEvent);\n    }\n  }\n\n  // SEER INTEGRATION\n\n  /**\n   * Called upon Seer initialization, manually sends layers data.\n   */\n  _initSeer() {\n    this.layers.forEach(layer => {\n      initLayerInSeer(layer);\n      updateLayerInSeer(layer);\n    });\n  }\n\n  /**\n   * On Seer property edition, set override and update layers.\n   */\n  _editSeer(payload) {\n    if (payload.type !== 'edit' || payload.valuePath[0] !== 'props') {\n      return;\n    }\n\n    setPropOverrides(payload.itemKey, payload.valuePath.slice(1), payload.value);\n    const newLayers = this.layers.map(layer => new layer.constructor(layer.props));\n    this.updateLayers({newLayers});\n  }\n}\n"],"file":"layer-manager.js"}