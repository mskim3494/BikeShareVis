{"version":3,"sources":["../../../../src/core/controllers/map-state.js"],"names":["ViewState","WebMercatorViewport","normalizeViewportProps","assert","MAPBOX_LIMITS","minZoom","maxZoom","minPitch","maxPitch","DEFAULT_STATE","pitch","bearing","altitude","clamp","value","min","max","MapState","width","height","latitude","longitude","zoom","startPanLngLat","startZoomLngLat","startBearing","startPitch","startZoom","Number","isFinite","_interactiveState","_viewportProps","pos","_getUpdatedState","_unproject","startPos","_calculateNewLngLat","deltaScaleX","deltaScaleY","_calculateNewPitchAndBearing","scale","_calculateNewZoom","zoomedViewport","Object","assign","getLocationAtPoint","lngLat","_zoomFromCenter","_panFromCenter","offset","pan","newProps","props","viewport","unproject","getMapCenterByLngLatPosition","Math","log2"],"mappings":"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","sourcesContent":["import ViewState from './view-state';\nimport WebMercatorViewport, {normalizeViewportProps} from 'viewport-mercator-project';\nimport assert from '../utils/assert';\n\n// MAPBOX LIMITS\nexport const MAPBOX_LIMITS = {\n  minZoom: 0,\n  maxZoom: 20,\n  minPitch: 0,\n  maxPitch: 60\n};\n\nconst DEFAULT_STATE = {\n  pitch: 0,\n  bearing: 0,\n  altitude: 1.5\n};\n\n/* Utils */\nfunction clamp(value, min, max) {\n  return value < min ? min : value > max ? max : value;\n}\n\nexport default class MapState extends ViewState {\n  constructor({\n    /** Mapbox viewport properties */\n    /** The width of the viewport */\n    width,\n    /** The height of the viewport */\n    height,\n    /** The latitude at the center of the viewport */\n    latitude,\n    /** The longitude at the center of the viewport */\n    longitude,\n    /** The tile zoom level of the map. */\n    zoom,\n    /** The bearing of the viewport in degrees */\n    bearing = DEFAULT_STATE.bearing,\n    /** The pitch of the viewport in degrees */\n    pitch = DEFAULT_STATE.pitch,\n    /**\n     * Specify the altitude of the viewport camera\n     * Unit: map heights, default 1.5\n     * Non-public API, see https://github.com/mapbox/mapbox-gl-js/issues/1137\n     */\n    altitude = DEFAULT_STATE.altitude,\n\n    /** Viewport constraints */\n    maxZoom = MAPBOX_LIMITS.maxZoom,\n    minZoom = MAPBOX_LIMITS.minZoom,\n    maxPitch = MAPBOX_LIMITS.maxPitch,\n    minPitch = MAPBOX_LIMITS.minPitch,\n\n    /** Interaction states, required to calculate change during transform */\n    /* The point on map being grabbed when the operation first started */\n    startPanLngLat,\n    /* Center of the zoom when the operation first started */\n    startZoomLngLat,\n    /** Bearing when current perspective rotate operation started */\n    startBearing,\n    /** Pitch when current perspective rotate operation started */\n    startPitch,\n    /** Zoom when current zoom operation started */\n    startZoom\n  } = {}) {\n    assert(Number.isFinite(longitude), '`longitude` must be supplied');\n    assert(Number.isFinite(latitude), '`latitude` must be supplied');\n    assert(Number.isFinite(zoom), '`zoom` must be supplied');\n\n    super({\n      width,\n      height,\n      latitude,\n      longitude,\n      zoom,\n      bearing,\n      pitch,\n      altitude,\n      maxZoom,\n      minZoom,\n      maxPitch,\n      minPitch\n    });\n\n    this._interactiveState = {\n      startPanLngLat,\n      startZoomLngLat,\n      startBearing,\n      startPitch,\n      startZoom\n    };\n  }\n\n  /* Public API */\n\n  getViewportProps() {\n    return this._viewportProps;\n  }\n\n  getInteractiveState() {\n    return this._interactiveState;\n  }\n\n  /**\n   * Start panning\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  panStart({pos}) {\n    return this._getUpdatedState({\n      startPanLngLat: this._unproject(pos)\n    });\n  }\n\n  /**\n   * Pan\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   * @param {[Number, Number], optional} startPos - where the pointer grabbed at\n   *   the start of the operation. Must be supplied of `panStart()` was not called\n   */\n  pan({pos, startPos}) {\n    const startPanLngLat = this._interactiveState.startPanLngLat || this._unproject(startPos);\n\n    if (!startPanLngLat) {\n      return this;\n    }\n\n    const [longitude, latitude] = this._calculateNewLngLat({startPanLngLat, pos});\n\n    return this._getUpdatedState({\n      longitude,\n      latitude\n    });\n  }\n\n  /**\n   * End panning\n   * Must call if `panStart()` was called\n   */\n  panEnd() {\n    return this._getUpdatedState({\n      startPanLngLat: null\n    });\n  }\n\n  /**\n   * Start rotating\n   * @param {[Number, Number]} pos - position on screen where the center is\n   */\n  rotateStart({pos}) {\n    return this._getUpdatedState({\n      startBearing: this._viewportProps.bearing,\n      startPitch: this._viewportProps.pitch\n    });\n  }\n\n  /**\n   * Rotate\n   * @param {Number} deltaScaleX - a number between [-1, 1] specifying the\n   *   change to bearing.\n   * @param {Number} deltaScaleY - a number between [-1, 1] specifying the\n   *   change to pitch. -1 sets to minPitch and 1 sets to maxPitch.\n   */\n  rotate({deltaScaleX = 0, deltaScaleY = 0}) {\n    const {startBearing, startPitch} = this._interactiveState;\n\n    if (!Number.isFinite(startBearing) || !Number.isFinite(startPitch)) {\n      return this;\n    }\n\n    const {pitch, bearing} = this._calculateNewPitchAndBearing({\n      deltaScaleX,\n      deltaScaleY,\n      startBearing,\n      startPitch\n    });\n\n    return this._getUpdatedState({\n      bearing,\n      pitch\n    });\n  }\n\n  /**\n   * End rotating\n   * Must call if `rotateStart()` was called\n   */\n  rotateEnd() {\n    return this._getUpdatedState({\n      startBearing: null,\n      startPitch: null\n    });\n  }\n\n  /**\n   * Start zooming\n   * @param {[Number, Number]} pos - position on screen where the center is\n   */\n  zoomStart({pos}) {\n    return this._getUpdatedState({\n      startZoomLngLat: this._unproject(pos),\n      startZoom: this._viewportProps.zoom\n    });\n  }\n\n  /**\n   * Zoom\n   * @param {[Number, Number]} pos - position on screen where the current center is\n   * @param {[Number, Number]} startPos - the center position at\n   *   the start of the operation. Must be supplied of `zoomStart()` was not called\n   * @param {Number} scale - a number between [0, 1] specifying the accumulated\n   *   relative scale.\n   */\n  zoom({pos, startPos, scale}) {\n    assert(scale > 0, '`scale` must be a positive number');\n\n    // Make sure we zoom around the current mouse position rather than map center\n    let {startZoom, startZoomLngLat} = this._interactiveState;\n\n    if (!Number.isFinite(startZoom)) {\n      // We have two modes of zoom:\n      // scroll zoom that are discrete events (transform from the current zoom level),\n      // and pinch zoom that are continuous events (transform from the zoom level when\n      // pinch started).\n      // If startZoom state is defined, then use the startZoom state;\n      // otherwise assume discrete zooming\n      startZoom = this._viewportProps.zoom;\n      startZoomLngLat = this._unproject(startPos) || this._unproject(pos);\n    }\n\n    // take the start lnglat and put it where the mouse is down.\n    assert(\n      startZoomLngLat,\n      '`startZoomLngLat` prop is required ' +\n        'for zoom behavior to calculate where to position the map.'\n    );\n\n    const zoom = this._calculateNewZoom({scale, startZoom});\n\n    const zoomedViewport = new WebMercatorViewport(Object.assign({}, this._viewportProps, {zoom}));\n    const [longitude, latitude] = zoomedViewport.getLocationAtPoint({lngLat: startZoomLngLat, pos});\n\n    return this._getUpdatedState({\n      zoom,\n      longitude,\n      latitude\n    });\n  }\n\n  /**\n   * End zooming\n   * Must call if `zoomStart()` was called\n   */\n  zoomEnd() {\n    return this._getUpdatedState({\n      startZoomLngLat: null,\n      startZoom: null\n    });\n  }\n\n  zoomIn() {\n    return this._zoomFromCenter(2);\n  }\n\n  zoomOut() {\n    return this._zoomFromCenter(0.5);\n  }\n\n  moveLeft() {\n    return this._panFromCenter([100, 0]);\n  }\n\n  moveRight() {\n    return this._panFromCenter([-100, 0]);\n  }\n\n  moveUp() {\n    return this._panFromCenter([0, 100]);\n  }\n\n  moveDown() {\n    return this._panFromCenter([0, -100]);\n  }\n\n  rotateLeft() {\n    return this._getUpdatedState({\n      bearing: this._viewportProps.bearing - 15\n    });\n  }\n\n  rotateRight() {\n    return this._getUpdatedState({\n      bearing: this._viewportProps.bearing + 15\n    });\n  }\n\n  rotateUp() {\n    return this._getUpdatedState({\n      pitch: this._viewportProps.pitch + 10\n    });\n  }\n\n  rotateDown() {\n    return this._getUpdatedState({\n      pitch: this._viewportProps.pitch - 10\n    });\n  }\n\n  /* Private methods */\n\n  _zoomFromCenter(scale) {\n    const {width, height} = this._viewportProps;\n    return this.zoom({\n      pos: [width / 2, height / 2],\n      scale\n    });\n  }\n\n  _panFromCenter(offset) {\n    const {width, height} = this._viewportProps;\n    return this.pan({\n      startPos: [width / 2, height / 2],\n      pos: [width / 2 + offset[0], height / 2 + offset[1]]\n    });\n  }\n\n  _getUpdatedState(newProps) {\n    // Update _viewportProps\n    return new MapState(Object.assign({}, this._viewportProps, this._interactiveState, newProps));\n  }\n\n  // Apply any constraints (mathematical or defined by _viewportProps) to map state\n  _applyConstraints(props) {\n    // Ensure zoom is within specified range\n    const {maxZoom, minZoom, zoom} = props;\n    props.zoom = clamp(zoom, minZoom, maxZoom);\n\n    // Ensure pitch is within specified range\n    const {maxPitch, minPitch, pitch} = props;\n    props.pitch = clamp(pitch, minPitch, maxPitch);\n\n    Object.assign(props, normalizeViewportProps(props));\n\n    return props;\n  }\n\n  _unproject(pos) {\n    const viewport = new WebMercatorViewport(this._viewportProps);\n    return pos && viewport.unproject(pos);\n  }\n\n  // Calculate a new lnglat based on pixel dragging position\n  _calculateNewLngLat({startPanLngLat, pos}) {\n    const viewport = new WebMercatorViewport(this._viewportProps);\n    return viewport.getMapCenterByLngLatPosition({lngLat: startPanLngLat, pos});\n  }\n\n  // Calculates new zoom\n  _calculateNewZoom({scale, startZoom}) {\n    const {maxZoom, minZoom} = this._viewportProps;\n    const zoom = startZoom + Math.log2(scale);\n    return clamp(zoom, minZoom, maxZoom);\n  }\n\n  // Calculates a new pitch and bearing from a position (coming from an event)\n  _calculateNewPitchAndBearing({deltaScaleX, deltaScaleY, startBearing, startPitch}) {\n    // clamp deltaScaleY to [-1, 1] so that rotation is constrained between minPitch and maxPitch.\n    // deltaScaleX does not need to be clamped as bearing does not have constraints.\n    deltaScaleY = clamp(deltaScaleY, -1, 1);\n\n    const {minPitch, maxPitch} = this._viewportProps;\n\n    const bearing = startBearing + 180 * deltaScaleX;\n    let pitch = startPitch;\n    if (deltaScaleY > 0) {\n      // Gradually increase pitch\n      pitch = startPitch + deltaScaleY * (maxPitch - startPitch);\n    } else if (deltaScaleY < 0) {\n      // Gradually decrease pitch\n      pitch = startPitch - deltaScaleY * (minPitch - startPitch);\n    }\n\n    return {\n      pitch,\n      bearing\n    };\n  }\n}\n"],"file":"map-state.js"}