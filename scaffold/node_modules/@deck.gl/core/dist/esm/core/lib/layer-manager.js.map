{"version":3,"sources":["../../../../src/core/lib/layer-manager.js"],"names":["assert","Framebuffer","ShaderCache","seer","Layer","drawLayers","pickObject","pickVisibleObjects","LIFECYCLE","deepEqual","View","MapView","Viewport","log","flatten","Stats","setPropOverrides","layerEditListener","seerInitListener","initLayerInSeer","updateLayerInSeer","LOG_PRIORITY_LIFECYCLE","LOG_PRIORITY_LIFECYCLE_MINOR","INITIAL_VIEW_STATE","latitude","longitude","zoom","INITIAL_CONTEXT","Object","seal","layerManager","gl","useDevicePixels","stats","viewport","shaderCache","pickingFBO","lastPickedInfo","index","layerId","userData","layerName","layer","LayerManager","eventManager","lastRenderedLayers","layers","context","assign","_cachePrograms","id","width","height","views","viewState","viewsChanged","viewports","layerFilter","drawPickingColors","_needsRedraw","_needsUpdate","_pickingRadius","_eventManager","_onLayerClick","_onLayerHover","_onClick","bind","_onPointerMove","_onPointerLeave","_pickAndCallback","_initSeer","_editSeer","_initEventHandling","setViews","removeListener","clearRedrawFlags","_checkIfNeedsRedraw","reason","layerIds","filter","find","indexOf","_rebuildViewportsFromViews","parameters","_setEventHandlingParameters","setSize","setViewState","setLayers","setNeedsRedraw","Number","isFinite","length","Boolean","map","viewportInstance","view","_diffViews","viewStateChanged","warn","newLayers","getViewports","_updateLayers","oldLayers","error","generatedLayers","needsUpdate","pass","redrawReason","onViewportActive","_activateViewport","x","y","mode","radius","getLayers","_getPickingBuffer","deprecated","redraw","layerNeedsRedraw","getNeedsRedraw","newViewports","makeViewport","newViews","oldViews","some","_","i","equals","on","click","pointermove","pointerleave","pickingRadius","onLayerClick","onLayerHover","isNaN","_validateEventHandling","oldViewport","viewportChanged","setChangeFlags","_updateLayer","resize","canvas","oldLayerMap","oldLayer","_updateSublayersRecursively","error2","_finalizeOldLayers","firstError","newLayer","sublayers","_initializeLayer","_transferLayerState","push","isComposite","getSubLayers","err","_finalizeLayer","_initialize","lifecycle","INITIALIZED","internalState","getModels","model","_transferState","MATCHED","AWAITING_GC","printChangeFlags","_update","AWAITING_FINALIZATION","_finalize","FINALIZED","props","pickable","event","offsetCenter","callback","leftButton","rightButton","options","pos","selectedInfos","firstInfo","info","srcEvent","forEach","payload","type","valuePath","itemKey","slice","value","constructor","updateLayers"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport assert from '../utils/assert';\nimport {Framebuffer, ShaderCache} from 'luma.gl';\nimport seer from 'seer';\nimport Layer from './layer';\nimport {drawLayers} from './draw-layers';\nimport {pickObject, pickVisibleObjects} from './pick-layers';\nimport {LIFECYCLE} from '../lifecycle/constants';\nimport {deepEqual} from '../utils/deep-equal';\nimport View from '../views/view';\nimport MapView from '../views/map-view';\nimport Viewport from '../viewports/viewport';\nimport log from '../utils/log';\nimport {flatten} from '../utils/flatten';\nimport {Stats} from 'probe.gl';\n\nimport {\n  setPropOverrides,\n  layerEditListener,\n  seerInitListener,\n  initLayerInSeer,\n  updateLayerInSeer\n} from './seer-integration';\n\nconst LOG_PRIORITY_LIFECYCLE = 2;\nconst LOG_PRIORITY_LIFECYCLE_MINOR = 4;\n\nconst INITIAL_VIEW_STATE = {latitude: 0, longitude: 0, zoom: 1};\n\n// CONTEXT IS EXPOSED TO LAYERS\nconst INITIAL_CONTEXT = Object.seal({\n  layerManager: null,\n  gl: null,\n\n  // Settings\n  useDevicePixels: true, // Exposed in case custom layers need to adjust sizes\n\n  // General resources\n  stats: null, // for tracking lifecycle performance\n  viewport: null, // Current viewport, exposed to layers for project* function\n\n  // GL Resources\n  shaderCache: null,\n  pickingFBO: null, // Screen-size framebuffer that layers can reuse\n\n  // State\n  lastPickedInfo: {\n    // For callback tracking and autohighlight\n    index: -1,\n    layerId: null\n  },\n\n  userData: {} // Place for any custom app `context`\n});\n\nconst layerName = layer => (layer instanceof Layer ? `${layer}` : !layer ? 'null' : 'invalid');\n\nexport default class LayerManager {\n  // eslint-disable-next-line\n  constructor(gl, {eventManager, stats} = {}) {\n    // Currently deck.gl expects the DeckGL.layers array to be different\n    // whenever React rerenders. If the same layers array is used, the\n    // LayerManager's diffing algorithm will generate a fatal error and\n    // break the rendering.\n\n    // `this.lastRenderedLayers` stores the UNFILTERED layers sent\n    // down to LayerManager, so that `layers` reference can be compared.\n    // If it's the same across two React render calls, the diffing logic\n    // will be skipped.\n    this.lastRenderedLayers = [];\n    this.layers = [];\n\n    this.context = Object.assign({}, INITIAL_CONTEXT, {\n      layerManager: this,\n\n      gl,\n      // Enabling luma.gl Program caching using private API (_cachePrograms)\n      shaderCache: new ShaderCache({gl, _cachePrograms: true}),\n      stats: stats || new Stats({id: 'deck.gl'})\n    });\n\n    // List of view descriptors, gets re-evaluated when width/height changes\n    this.width = 100;\n    this.height = 100;\n    this.views = [];\n    this.viewState = INITIAL_VIEW_STATE;\n    this.viewsChanged = true;\n    this.viewports = []; // Generated viewports\n\n    this.layerFilter = null;\n    this.drawPickingColors = false;\n\n    this._needsRedraw = 'Initial render';\n    this._needsUpdate = false;\n\n    // Event handling\n    this._pickingRadius = 0;\n\n    this._eventManager = null;\n    this._onLayerClick = null;\n    this._onLayerHover = null;\n    this._onClick = this._onClick.bind(this);\n    this._onPointerMove = this._onPointerMove.bind(this);\n    this._onPointerLeave = this._onPointerLeave.bind(this);\n    this._pickAndCallback = this._pickAndCallback.bind(this);\n\n    // Seer integration\n    this._initSeer = this._initSeer.bind(this);\n    this._editSeer = this._editSeer.bind(this);\n\n    Object.seal(this);\n\n    seerInitListener(this._initSeer);\n    layerEditListener(this._editSeer);\n\n    if (eventManager) {\n      this._initEventHandling(eventManager);\n    }\n\n    // Init with default map viewport\n    this.setViews();\n  }\n\n  /**\n   * Method to call when the layer manager is not needed anymore.\n   *\n   * Currently used in the <DeckGL> componentWillUnmount lifecycle to unbind Seer listeners.\n   */\n  finalize() {\n    seer.removeListener(this._initSeer);\n    seer.removeListener(this._editSeer);\n  }\n\n  // Check if a redraw is needed\n  needsRedraw({clearRedrawFlags = true} = {}) {\n    return this._checkIfNeedsRedraw(clearRedrawFlags);\n  }\n\n  // Check if a deep update of all layers is needed\n  needsUpdate() {\n    return this._needsUpdate;\n  }\n\n  // Layers will be redrawn (in next animation frame)\n  setNeedsRedraw(reason) {\n    this._needsRedraw = this._needsRedraw || reason;\n  }\n\n  // Layers will be updated deeply (in next animation frame)\n  // Potentially regenerating attributes and sub layers\n  setNeedsUpdate(reason) {\n    this._needsUpdate = this._needsUpdate || reason;\n  }\n\n  // Gets an (optionally) filtered list of layers\n  getLayers({layerIds = null} = {}) {\n    // Filtering by layerId compares beginning of strings, so that sublayers will be included\n    // Dependes on the convention of adding suffixes to the parent's layer name\n    return layerIds\n      ? this.layers.filter(layer => layerIds.find(layerId => layer.id.indexOf(layerId) === 0))\n      : this.layers;\n  }\n\n  getViews() {\n    return this.views;\n  }\n\n  // Get a set of viewports for a given width and height\n  // TODO - Intention is for deck.gl to autodeduce width and height and drop the need for props\n  getViewports() {\n    this._rebuildViewportsFromViews();\n    this.context.viewport = this.viewports[0];\n    return this.viewports;\n  }\n\n  /**\n   * Set parameters needed for layer rendering and picking.\n   * Parameters are to be passed as a single object, with the following values:\n   * @param {Boolean} useDevicePixels\n   */\n  /* eslint-disable complexity */\n  setParameters(parameters) {\n    if ('eventManager' in parameters) {\n      this._initEventHandling(parameters.eventManager);\n    }\n\n    if (\n      'pickingRadius' in parameters ||\n      'onLayerClick' in parameters ||\n      'onLayerHover' in parameters\n    ) {\n      this._setEventHandlingParameters(parameters);\n    }\n\n    if ('width' in parameters || 'height' in parameters) {\n      this.setSize(parameters.width, parameters.height);\n    }\n\n    if ('views' in parameters) {\n      this.setViews(parameters.views);\n    }\n\n    // TODO - support multiple view states\n    if ('viewState' in parameters) {\n      this.setViewState(parameters.viewState);\n    }\n\n    // TODO - For now we set layers before viewports to preservenchangeFlags\n    if ('layers' in parameters) {\n      this.setLayers(parameters.layers);\n    }\n\n    if ('layerFilter' in parameters) {\n      if (this.layerFilter !== parameters.layerFilter) {\n        this.layerFilter = parameters.layerFilter;\n        this.setNeedsRedraw('layerFilter changed');\n      }\n    }\n\n    if ('drawPickingColors' in parameters) {\n      if (parameters.drawPickingColors !== this.drawPickingColors) {\n        this.drawPickingColors = parameters.drawPickingColors;\n        this.setNeedsRedraw('drawPickingColors changed');\n      }\n    }\n\n    // A way for apps to add data to context that can be accessed in layers\n    if ('userData' in parameters) {\n      this.context.userData = parameters.userData;\n    }\n\n    if ('useDevicePixels' in parameters) {\n      this.context.useDevicePixels = parameters.useDevicePixels;\n    }\n  }\n  /* eslint-enable complexity */\n\n  setSize(width, height) {\n    assert(Number.isFinite(width) && Number.isFinite(height));\n    if (width !== this.width || height !== this.height) {\n      this.width = width;\n      this.height = height;\n      this.viewsChanged = true;\n      this.setNeedsRedraw('Size changed');\n    }\n  }\n\n  // Update the view descriptor list and set change flag if needed\n  // Does not actually rebuild the `Viewport`s until `getViewports` is called\n  setViews(views) {\n    // For now, we default to a full screen map view port\n    // TODO - apps may want to specify an empty view list...\n    if (!views || views.length === 0) {\n      views = [new MapView({id: 'default-view'})];\n    }\n\n    // Ensure any \"naked\" Viewports are wrapped in View instances\n    views = flatten(views, {filter: Boolean}).map(\n      view => (view instanceof Viewport ? new View({viewportInstance: view}) : view)\n    );\n\n    const viewsChanged = this._diffViews(views, this.views);\n\n    this.views = views;\n    this.viewsChanged = this.viewsChanged || viewsChanged;\n  }\n\n  setViewState(viewState) {\n    if (viewState) {\n      const viewStateChanged = deepEqual(viewState, this.viewState);\n      this.viewState = viewState;\n      this.viewsChanged = true || viewStateChanged;\n    } else {\n      log.warn('viewState is not valid')();\n    }\n  }\n\n  // Supply a new layer list, initiating sublayer generation and layer matching\n  setLayers(newLayers) {\n    this.getViewports();\n    assert(this.context.viewport, 'LayerManager.updateLayers: viewport not set');\n\n    // TODO - something is generating state updates that cause rerender of the same\n    if (newLayers === this.lastRenderedLayers) {\n      log.log(3, 'Ignoring layer update due to layer array not changed')();\n      return this;\n    }\n    this.lastRenderedLayers = newLayers;\n\n    newLayers = flatten(newLayers, {filter: Boolean});\n\n    for (const layer of newLayers) {\n      layer.context = this.context;\n    }\n\n    const {error, generatedLayers} = this._updateLayers({\n      oldLayers: this.layers,\n      newLayers\n    });\n\n    this.layers = generatedLayers;\n\n    // Throw first error found, if any\n    if (error) {\n      throw error;\n    }\n    return this;\n  }\n\n  // Update layers from last cycle if `setNeedsUpdate()` has been called\n  updateLayers() {\n    // NOTE: For now, even if only some layer has changed, we update all layers\n    // to ensure that layer id maps etc remain consistent even if different\n    // sublayers are rendered\n    const reason = this.needsUpdate();\n    if (reason) {\n      this.setNeedsRedraw(`updating layers: ${reason}`);\n      // HACK - Call with a copy of lastRenderedLayers to trigger a full update\n      this.setLayers([...this.lastRenderedLayers]);\n    }\n  }\n\n  //\n  // METHODS FOR LAYERS\n  //\n\n  // Draw all layers in all views\n  drawLayers({pass = 'render to screen', redrawReason = 'unknown reason'} = {}) {\n    const {drawPickingColors} = this;\n    const {gl, useDevicePixels} = this.context;\n\n    // render this viewport\n    drawLayers(gl, {\n      layers: this.layers,\n      viewports: this.getViewports(),\n      onViewportActive: this._activateViewport.bind(this),\n      useDevicePixels,\n      drawPickingColors,\n      pass,\n      layerFilter: this.layerFilter,\n      redrawReason\n    });\n  }\n\n  // Pick the closest info at given coordinate\n  pickObject({x, y, mode, radius = 0, layerIds, layerFilter}) {\n    const {gl, useDevicePixels} = this.context;\n\n    const layers = this.getLayers({layerIds});\n\n    return pickObject(gl, {\n      // User params\n      x,\n      y,\n      radius,\n      layers,\n      mode,\n      layerFilter,\n      // Injected params\n      viewports: this.getViewports(),\n      onViewportActive: this._activateViewport.bind(this),\n      pickingFBO: this._getPickingBuffer(),\n      lastPickedInfo: this.context.lastPickedInfo,\n      useDevicePixels\n    });\n  }\n\n  // Get all unique infos within a bounding box\n  pickObjects({x, y, width, height, layerIds, layerFilter}) {\n    const {gl, useDevicePixels} = this.context;\n\n    const layers = this.getLayers({layerIds});\n\n    return pickVisibleObjects(gl, {\n      x,\n      y,\n      width,\n      height,\n      layers,\n      layerFilter,\n      mode: 'pickObjects',\n      viewports: this.getViewports(),\n      onViewportActive: this._activateViewport.bind(this),\n      pickingFBO: this._getPickingBuffer(),\n      useDevicePixels\n    });\n  }\n\n  //\n  // DEPRECATED METHODS in V5.1\n  //\n\n  setViewports(viewports) {\n    log.deprecated('setViewport', 'setViews')();\n    this.setViews(viewports);\n    return this;\n  }\n\n  //\n  // DEPRECATED METHODS in V5\n  //\n\n  setViewport(viewport) {\n    log.deprecated('setViewport', 'setViews')();\n    this.setViews([viewport]);\n    return this;\n  }\n\n  //\n  // PRIVATE METHODS\n  //\n\n  _checkIfNeedsRedraw(clearRedrawFlags) {\n    let redraw = this._needsRedraw;\n    if (clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n\n    // This layers list doesn't include sublayers, relying on composite layers\n    for (const layer of this.layers) {\n      // Call every layer to clear their flags\n      const layerNeedsRedraw = layer.getNeedsRedraw({clearRedrawFlags});\n      redraw = redraw || layerNeedsRedraw;\n    }\n\n    return redraw;\n  }\n\n  // Rebuilds viewports from descriptors towards a certain window size\n  _rebuildViewportsFromViews() {\n    if (this.viewsChanged) {\n      const {width, height, views, viewState} = this;\n      const newViewports = views.map(view => view.makeViewport({width, height, viewState}));\n\n      this.setNeedsRedraw('Viewport(s) changed');\n\n      // Ensure one viewport is activated, layers may expect it\n      // TODO - handle empty viewport list (using dummy viewport), or assert\n      // const oldViewports = this.context.viewports;\n\n      const viewport = newViewports[0];\n      assert(viewport instanceof Viewport, 'Invalid viewport');\n\n      this.context.viewports = newViewports;\n      this._activateViewport(viewport);\n      // }\n\n      // We've just rebuilt the viewports to match the descriptors, so clear the flag\n      this.viewports = newViewports;\n      this.viewsChanged = false;\n    }\n  }\n\n  // Check if viewport array has changed, returns true if any change\n  // Note that descriptors can be the same\n  _diffViews(newViews, oldViews) {\n    if (newViews.length !== oldViews.length) {\n      return true;\n    }\n\n    return newViews.some((_, i) => !newViews[i].equals(oldViews[i]));\n  }\n\n  /**\n   * @param {Object} eventManager   A source of DOM input events\n   */\n  _initEventHandling(eventManager) {\n    this._eventManager = eventManager;\n\n    // TODO: add/remove handlers on demand at runtime, not all at once on init.\n    // Consider both top-level handlers like onLayerClick/Hover\n    // and per-layer handlers attached to individual layers.\n    // https://github.com/uber/deck.gl/issues/634\n    this._eventManager.on({\n      click: this._onClick,\n      pointermove: this._onPointerMove,\n      pointerleave: this._onPointerLeave\n    });\n  }\n\n  // Set parameters for input event handling.\n  _setEventHandlingParameters({pickingRadius, onLayerClick, onLayerHover}) {\n    if (!isNaN(pickingRadius)) {\n      this._pickingRadius = pickingRadius;\n    }\n    if (typeof onLayerClick !== 'undefined') {\n      this._onLayerClick = onLayerClick;\n    }\n    if (typeof onLayerHover !== 'undefined') {\n      this._onLayerHover = onLayerHover;\n    }\n    this._validateEventHandling();\n  }\n\n  // Make a viewport \"current\" in layer context, primed for draw\n  _activateViewport(viewport) {\n    const oldViewport = this.context.viewport;\n    const viewportChanged = !oldViewport || !viewport.equals(oldViewport);\n\n    if (viewportChanged) {\n      log.log(4, 'Viewport', viewport)();\n\n      this.context.viewport = viewport;\n\n      // Update layers states\n      // Let screen space layers update their state based on viewport\n      for (const layer of this.layers) {\n        layer.setChangeFlags({viewportChanged: 'Viewport changed'});\n        this._updateLayer(layer);\n      }\n    }\n\n    assert(this.context.viewport, 'LayerManager: viewport not set');\n\n    return this;\n  }\n\n  _getPickingBuffer() {\n    const {gl} = this.context;\n    // Create a frame buffer if not already available\n    this.context.pickingFBO = this.context.pickingFBO || new Framebuffer(gl);\n    // Resize it to current canvas size (this is a noop if size hasn't changed)\n    this.context.pickingFBO.resize({width: gl.canvas.width, height: gl.canvas.height});\n    return this.context.pickingFBO;\n  }\n\n  // Match all layers, checking for caught errors\n  // To avoid having an exception in one layer disrupt other layers\n  // TODO - mark layers with exceptions as bad and remove from rendering cycle?\n  _updateLayers({oldLayers, newLayers}) {\n    // Create old layer map\n    const oldLayerMap = {};\n    for (const oldLayer of oldLayers) {\n      if (oldLayerMap[oldLayer.id]) {\n        log.warn(`Multiple old layers with same id ${layerName(oldLayer)}`)();\n      } else {\n        oldLayerMap[oldLayer.id] = oldLayer;\n      }\n    }\n\n    // Allocate array for generated layers\n    const generatedLayers = [];\n\n    // Match sublayers\n    const error = this._updateSublayersRecursively({\n      newLayers,\n      oldLayerMap,\n      generatedLayers\n    });\n\n    // Finalize unmatched layers\n    const error2 = this._finalizeOldLayers(oldLayerMap);\n\n    this._needsUpdate = false;\n\n    const firstError = error || error2;\n    return {error: firstError, generatedLayers};\n  }\n\n  // Note: adds generated layers to `generatedLayers` array parameter\n  _updateSublayersRecursively({newLayers, oldLayerMap, generatedLayers}) {\n    let error = null;\n\n    for (const newLayer of newLayers) {\n      newLayer.context = this.context;\n\n      // Given a new coming layer, find its matching old layer (if any)\n      const oldLayer = oldLayerMap[newLayer.id];\n      if (oldLayer === null) {\n        // null, rather than undefined, means this id was originally there\n        log.warn(`Multiple new layers with same id ${layerName(newLayer)}`)();\n      }\n      // Remove the old layer from candidates, as it has been matched with this layer\n      oldLayerMap[newLayer.id] = null;\n\n      let sublayers = null;\n\n      // We must not generate exceptions until after layer matching is complete\n      try {\n        if (!oldLayer) {\n          this._initializeLayer(newLayer);\n          initLayerInSeer(newLayer); // Initializes layer in seer chrome extension (if connected)\n        } else {\n          this._transferLayerState(oldLayer, newLayer);\n          this._updateLayer(newLayer);\n          updateLayerInSeer(newLayer); // Updates layer in seer chrome extension (if connected)\n        }\n        generatedLayers.push(newLayer);\n\n        // Call layer lifecycle method: render sublayers\n        sublayers = newLayer.isComposite && newLayer.getSubLayers();\n        // End layer lifecycle method: render sublayers\n      } catch (err) {\n        log.warn(`error during matching of ${layerName(newLayer)}`, err);\n        error = error || err; // Record first exception\n      }\n\n      if (sublayers) {\n        this._updateSublayersRecursively({\n          newLayers: sublayers,\n          oldLayerMap,\n          generatedLayers\n        });\n      }\n    }\n\n    return error;\n  }\n\n  // Finalize any old layers that were not matched\n  _finalizeOldLayers(oldLayerMap) {\n    let error = null;\n    for (const layerId in oldLayerMap) {\n      const layer = oldLayerMap[layerId];\n      if (layer) {\n        error = error || this._finalizeLayer(layer);\n      }\n    }\n    return error;\n  }\n\n  // EXCEPTION SAFE LAYER ACCESS\n\n  // Initializes a single layer, calling layer methods\n  _initializeLayer(layer) {\n    log.log(LOG_PRIORITY_LIFECYCLE, `initializing ${layerName(layer)}`)();\n\n    let error = null;\n    try {\n      layer._initialize();\n      layer.lifecycle = LIFECYCLE.INITIALIZED;\n    } catch (err) {\n      log.warn(`error while initializing ${layerName(layer)}\\n`, err)();\n      error = error || err;\n      // TODO - what should the lifecycle state be here? LIFECYCLE.INITIALIZATION_FAILED?\n    }\n\n    // Set back pointer (used in picking)\n    layer.internalState.layer = layer;\n\n    // Save layer on model for picking purposes\n    // store on model.userData rather than directly on model\n    for (const model of layer.getModels()) {\n      model.userData.layer = layer;\n    }\n\n    return error;\n  }\n\n  _transferLayerState(oldLayer, newLayer) {\n    newLayer._transferState(oldLayer);\n    newLayer.lifecycle = LIFECYCLE.MATCHED;\n\n    if (newLayer !== oldLayer) {\n      log.log(\n        LOG_PRIORITY_LIFECYCLE_MINOR,\n        `matched ${layerName(newLayer)}`,\n        oldLayer,\n        '->',\n        newLayer\n      )();\n      oldLayer.lifecycle = LIFECYCLE.AWAITING_GC;\n    } else {\n      log.log(LOG_PRIORITY_LIFECYCLE_MINOR, `Matching layer is unchanged ${newLayer.id}`)();\n    }\n  }\n\n  // Updates a single layer, cleaning all flags\n  _updateLayer(layer) {\n    log.log(\n      LOG_PRIORITY_LIFECYCLE_MINOR,\n      `updating ${layer} because: ${layer.printChangeFlags()}`\n    )();\n    let error = null;\n    try {\n      layer._update();\n    } catch (err) {\n      log.warn(`error during update of ${layerName(layer)}`, err)();\n      // Save first error\n      error = err;\n    }\n    return error;\n  }\n\n  // Finalizes a single layer\n  _finalizeLayer(layer) {\n    assert(layer.lifecycle !== LIFECYCLE.AWAITING_FINALIZATION);\n    layer.lifecycle = LIFECYCLE.AWAITING_FINALIZATION;\n    let error = null;\n    this.setNeedsRedraw(`finalized ${layerName(layer)}`);\n    try {\n      layer._finalize();\n    } catch (err) {\n      log.warn(`error during finalization of ${layerName(layer)}`, err)();\n      error = err;\n    }\n    layer.lifecycle = LIFECYCLE.FINALIZED;\n    log.log(LOG_PRIORITY_LIFECYCLE, `finalizing ${layerName(layer)}`);\n    return error;\n  }\n\n  /**\n   * Warn if a deck-level mouse event has been specified,\n   * but no layers are `pickable`.\n   */\n  _validateEventHandling() {\n    if (this.onLayerClick || this.onLayerHover) {\n      if (this.layers.length && !this.layers.some(layer => layer.props.pickable)) {\n        log.warn(\n          'You have supplied a top-level input event handler (e.g. `onLayerClick`), ' +\n            'but none of your layers have set the `pickable` flag.'\n        )();\n      }\n    }\n  }\n\n  /**\n   * Route click events to layers.\n   * `pickLayer` will call the `onClick` prop of any picked layer,\n   * and `onLayerClick` is called directly from here\n   * with any picking info generated by `pickLayer`.\n   * @param {Object} event  An object encapsulating an input event,\n   *                        with the following shape:\n   *                        {Object: {x, y}} offsetCenter: center of the event\n   *                        {Object} srcEvent:             native JS Event object\n   */\n  _onClick(event) {\n    if (!event.offsetCenter) {\n      // Do not trigger onHover callbacks when click position is invalid.\n      return;\n    }\n    this._pickAndCallback({\n      callback: this._onLayerClick,\n      event,\n      mode: 'click'\n    });\n  }\n\n  /**\n   * Route click events to layers.\n   * `pickLayer` will call the `onHover` prop of any picked layer,\n   * and `onLayerHover` is called directly from here\n   * with any picking info generated by `pickLayer`.\n   * @param {Object} event  An object encapsulating an input event,\n   *                        with the following shape:\n   *                        {Object: {x, y}} offsetCenter: center of the event\n   *                        {Object} srcEvent:             native JS Event object\n   */\n  _onPointerMove(event) {\n    if (event.leftButton || event.rightButton) {\n      // Do not trigger onHover callbacks if mouse button is down.\n      return;\n    }\n    this._pickAndCallback({\n      callback: this._onLayerHover,\n      event,\n      mode: 'hover'\n    });\n  }\n\n  _onPointerLeave(event) {\n    this.pickObject({\n      x: -1,\n      y: -1,\n      radius: this._pickingRadius,\n      mode: 'hover'\n    });\n  }\n\n  _pickAndCallback(options) {\n    const pos = options.event.offsetCenter;\n    const radius = this._pickingRadius;\n    const selectedInfos = this.pickObject({x: pos.x, y: pos.y, radius, mode: options.mode});\n    if (options.callback) {\n      const firstInfo = selectedInfos.find(info => info.index >= 0) || null;\n      // As per documentation, send null value when no valid object is picked.\n      options.callback(firstInfo, selectedInfos, options.event.srcEvent);\n    }\n  }\n\n  // SEER INTEGRATION\n\n  /**\n   * Called upon Seer initialization, manually sends layers data.\n   */\n  _initSeer() {\n    this.layers.forEach(layer => {\n      initLayerInSeer(layer);\n      updateLayerInSeer(layer);\n    });\n  }\n\n  /**\n   * On Seer property edition, set override and update layers.\n   */\n  _editSeer(payload) {\n    if (payload.type !== 'edit' || payload.valuePath[0] !== 'props') {\n      return;\n    }\n\n    setPropOverrides(payload.itemKey, payload.valuePath.slice(1), payload.value);\n    const newLayers = this.layers.map(layer => new layer.constructor(layer.props));\n    this.updateLayers({newLayers});\n  }\n}\n"],"file":"layer-manager.js"}