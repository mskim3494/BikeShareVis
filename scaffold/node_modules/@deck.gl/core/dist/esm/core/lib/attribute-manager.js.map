{"version":3,"sources":["../../../../src/core/lib/attribute-manager.js"],"names":["Attribute","log","assert","AttributeTransitionManager","LOG_START_END_PRIORITY","LOG_DETAIL_PRIORITY","noop","logFunctions","savedMessages","timeStart","onLog","level","message","onUpdateStart","numInstances","Date","onUpdate","push","onUpdateEnd","id","timeMs","Math","round","time","group","collapsed","groupEnd","AttributeManager","undefined","gl","stats","attributes","updateTriggers","accessors","needsRedraw","userData","attributeTransitionManager","Object","seal","clearRedrawFlags","redraw","updaters","_add","instanced","attributeNameArray","i","length","name","triggerName","invalidatedAttributes","_invalidateTrigger","attributeName","setNeedsUpdate","data","transitions","props","buffers","context","ignoreUnknownAttributes","_checkExternalBuffers","_setExternalBuffers","_checkIfBuffersNeedUpdating","_allocateBuffers","_updateBuffers","timeEnd","update","transitionUpdated","setCurrentTime","now","attribute","getBuffer","transition","clearChangedFlags","getAttributes","changedAttributes","hasAttribute","extraProps","removed","newAttributes","isGeneric","isIndexed","elements","size","value","assign","_mapUpdateTriggersToAttributes","triggers","accessor","state","Array","isArray","forEach","accessorName","keys","join","warn","bufferMap","buffer","setExternalBuffer","Error","needsUpdate","setNumInstances","allocate","updated"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* eslint-disable guard-for-in */\nimport Attribute from './attribute';\nimport log from '../utils/log';\nimport assert from '../utils/assert';\n\nimport AttributeTransitionManager from './attribute-transition-manager';\n\nconst LOG_START_END_PRIORITY = 2;\nconst LOG_DETAIL_PRIORITY = 3;\n\nfunction noop() {}\n\n// Default loggers\nconst logFunctions = {\n  savedMessages: null,\n  timeStart: null,\n  onLog: ({level, message}) => {\n    log.log(level, message)();\n  },\n  onUpdateStart: ({level, numInstances}) => {\n    logFunctions.savedMessages = [];\n    logFunctions.timeStart = new Date();\n  },\n  onUpdate: ({level, message}) => {\n    if (logFunctions.savedMessages) {\n      logFunctions.savedMessages.push(message);\n    }\n  },\n  onUpdateEnd: ({level, id, numInstances}) => {\n    const timeMs = Math.round(new Date() - logFunctions.timeStart);\n    const time = `${timeMs}ms`;\n    log.group(level, `Updated attributes for ${numInstances} instances in ${id} in ${time}`, {\n      collapsed: true\n    })();\n    for (const message of logFunctions.savedMessages) {\n      log.log(level, message)();\n    }\n    log.groupEnd(level, `Updated attributes for ${numInstances} instances in ${id} in ${time}`)();\n    logFunctions.savedMessages = null;\n  }\n};\n\nexport default class AttributeManager {\n  /**\n   * Sets log functions to help trace or time attribute updates.\n   * Default logging uses deck logger.\n   *\n   * `onLog` is called for each attribute.\n   *\n   * To enable detailed control of timming and e.g. hierarchical logging,\n   * hooks are also provided for update start and end.\n   *\n   * @param {Object} [opts]\n   * @param {String} [onLog=] - called to print\n   * @param {String} [onUpdateStart=] - called before update() starts\n   * @param {String} [onUpdateEnd=] - called after update() ends\n   */\n  static setDefaultLogFunctions({onLog, onUpdateStart, onUpdate, onUpdateEnd} = {}) {\n    if (onLog !== undefined) {\n      logFunctions.onLog = onLog || noop;\n    }\n    if (onUpdateStart !== undefined) {\n      logFunctions.onUpdateStart = onUpdateStart || noop;\n    }\n    if (onUpdate !== undefined) {\n      logFunctions.onUpdate = onUpdate || noop;\n    }\n    if (onUpdateEnd !== undefined) {\n      logFunctions.onUpdateEnd = onUpdateEnd || noop;\n    }\n  }\n\n  /**\n   * @classdesc\n   * Automated attribute generation and management. Suitable when a set of\n   * vertex shader attributes are generated by iteration over a data array,\n   * and updates to these attributes are needed either when the data itself\n   * changes, or when other data relevant to the calculations change.\n   *\n   * - First the application registers descriptions of its dynamic vertex\n   *   attributes using AttributeManager.add().\n   * - Then, when any change that affects attributes is detected by the\n   *   application, the app will call AttributeManager.invalidate().\n   * - Finally before it renders, it calls AttributeManager.update() to\n   *   ensure that attributes are automatically rebuilt if anything has been\n   *   invalidated.\n   *\n   * The application provided update functions describe how attributes\n   * should be updated from a data array and are expected to traverse\n   * that data array (or iterable) and fill in the attribute's typed array.\n   *\n   * Note that the attribute manager intentionally does not do advanced\n   * change detection, but instead makes it easy to build such detection\n   * by offering the ability to \"invalidate\" each attribute separately.\n   */\n  constructor(gl, {id = 'attribute-manager', stats} = {}) {\n    this.id = id;\n    this.gl = gl;\n\n    this.attributes = {};\n\n    this.updateTriggers = {};\n    this.accessors = {};\n    this.needsRedraw = true;\n\n    this.userData = {};\n    this.stats = stats;\n\n    this.attributeTransitionManager = new AttributeTransitionManager(gl, {\n      id: `${id}-transitions`\n    });\n\n    // For debugging sanity, prevent uninitialized members\n    Object.seal(this);\n  }\n\n  finalize() {\n    // TODO - call attribute.finalize()\n  }\n\n  // Returns the redraw flag, optionally clearing it.\n  // Redraw flag will be set if any attributes attributes changed since\n  // flag was last cleared.\n  //\n  // @param {String} [clearRedrawFlags=false] - whether to clear the flag\n  // @return {false|String} - reason a redraw is needed.\n  getNeedsRedraw({clearRedrawFlags = false} = {}) {\n    const redraw = this.needsRedraw;\n    this.needsRedraw = this.needsRedraw && !clearRedrawFlags;\n    return redraw && this.id;\n  }\n\n  // Sets the redraw flag.\n  // @param {Boolean} redraw=true\n  // @return {AttributeManager} - for chaining\n  setNeedsRedraw(redraw = true) {\n    this.needsRedraw = true;\n    return this;\n  }\n\n  // Adds attributes\n  add(attributes, updaters = {}) {\n    this._add(attributes, updaters);\n  }\n\n  // Adds attributes\n  addInstanced(attributes, updaters = {}) {\n    this._add(attributes, updaters, {instanced: 1});\n  }\n\n  /**\n   * Removes attributes\n   * Takes an array of attribute names and delete them from\n   * the attribute map if they exists\n   *\n   * @example\n   * attributeManager.remove(['position']);\n   *\n   * @param {Object} attributeNameArray - attribute name array (see above)\n   */\n  remove(attributeNameArray) {\n    for (let i = 0; i < attributeNameArray.length; i++) {\n      const name = attributeNameArray[i];\n      if (this.attributes[name] !== undefined) {\n        delete this.attributes[name];\n      }\n    }\n  }\n\n  // Marks an attribute for update\n  invalidate(triggerName) {\n    const invalidatedAttributes = this._invalidateTrigger(triggerName);\n    // For performance tuning\n    logFunctions.onLog({\n      level: LOG_DETAIL_PRIORITY,\n      message: `invalidated attributes ${invalidatedAttributes} (${triggerName}) for ${this.id}`\n    });\n  }\n\n  invalidateAll() {\n    for (const attributeName in this.attributes) {\n      this.attributes[attributeName].setNeedsUpdate();\n    }\n    // For performance tuning\n    logFunctions.onLog({\n      level: LOG_DETAIL_PRIORITY,\n      message: `invalidated all attributes for ${this.id}`\n    });\n  }\n\n  // Ensure all attribute buffers are updated from props or data.\n  update({\n    data,\n    numInstances,\n    transitions,\n    props = {},\n    buffers = {},\n    context = {},\n    ignoreUnknownAttributes = false\n  } = {}) {\n    // First apply any application provided buffers\n    this._checkExternalBuffers({buffers, ignoreUnknownAttributes});\n    this._setExternalBuffers(buffers);\n\n    // Only initiate alloc/update (and logging) if actually needed\n    if (this._checkIfBuffersNeedUpdating({numInstances})) {\n      logFunctions.onUpdateStart({level: LOG_START_END_PRIORITY, id: this.id, numInstances});\n      if (this.stats) {\n        this.stats.timeStart('attribute updates', this.id);\n      }\n      this._allocateBuffers({numInstances, data, props, context});\n      this._updateBuffers({numInstances, data, props, context});\n      if (this.stats) {\n        this.stats.timeEnd('attribute updates', this.id);\n      }\n      logFunctions.onUpdateEnd({level: LOG_START_END_PRIORITY, id: this.id, numInstances});\n    }\n\n    this.attributeTransitionManager.update(this.attributes, transitions);\n  }\n\n  // Update attribute transition to the current timestamp\n  // Returns `true` if any transition is in progress\n  updateTransition() {\n    const {attributeTransitionManager} = this;\n    const transitionUpdated = attributeTransitionManager.setCurrentTime(Date.now());\n    this.needsRedraw = this.needsRedraw || transitionUpdated;\n    return transitionUpdated;\n  }\n\n  /**\n   * Returns all attribute descriptors\n   * Note: Format matches luma.gl Model/Program.setAttributes()\n   * @return {Object} attributes - descriptors\n   */\n  getAttributes() {\n    const attributes = {};\n    for (const attributeName in this.attributes) {\n      const attribute = this.attributes[attributeName];\n      attributes[attributeName] = attribute.getBuffer();\n    }\n    return attributes;\n  }\n\n  /**\n   * Returns changed attribute descriptors\n   * This indicates which WebGLBuggers need to be updated\n   * @return {Object} attributes - descriptors\n   */\n  getChangedAttributes({transition = false, clearChangedFlags = false}) {\n    const {attributes, attributeTransitionManager} = this;\n\n    if (transition) {\n      return attributeTransitionManager.getAttributes();\n    }\n\n    const changedAttributes = {};\n    for (const attributeName in attributes) {\n      const attribute = attributes[attributeName];\n      if (attribute.needsRedraw({clearChangedFlags: true})) {\n        // Only return non-transition attributes\n        if (!attributeTransitionManager.hasAttribute(attributeName)) {\n          changedAttributes[attributeName] = attribute.getBuffer();\n        }\n      }\n    }\n    return changedAttributes;\n  }\n\n  // PROTECTED METHODS - Only to be used by collaborating classes, not by apps\n\n  // Returns object containing all accessors as keys, with non-null values\n  // @return {Object} - accessors object\n  getAccessors() {\n    return this.updateTriggers;\n  }\n\n  // PRIVATE METHODS\n\n  // Used to register an attribute\n  _add(attributes, updaters, extraProps = {}) {\n    if (updaters) {\n      log.removed('AttributeManager.add({updaters}) - updater map no longer supported');\n    }\n\n    const newAttributes = {};\n\n    for (const attributeName in attributes) {\n      const attribute = attributes[attributeName];\n\n      // Initialize the attribute descriptor, with WebGL and metadata fields\n      newAttributes[attributeName] = new Attribute({\n        id: attributeName,\n        // Metadata\n        attribute,\n        // Luma fields\n        isGeneric: attribute.isGeneric || false,\n        isIndexed: attribute.isIndexed || attribute.elements,\n        size: (attribute.elements && 1) || attribute.size,\n        value: attribute.value || null,\n        instanced: attribute.instanced || extraProps.instanced\n      });\n    }\n\n    Object.assign(this.attributes, newAttributes);\n\n    this._mapUpdateTriggersToAttributes();\n  }\n  /* eslint-enable max-statements */\n\n  // build updateTrigger name to attribute name mapping\n  _mapUpdateTriggersToAttributes() {\n    const triggers = {};\n\n    for (const attributeName in this.attributes) {\n      const attribute = this.attributes[attributeName];\n      let {accessor} = attribute.state;\n\n      // Backards compatibility: allow attribute name to be used as update trigger key\n      triggers[attributeName] = [attributeName];\n\n      // use accessor name as update trigger key\n      if (typeof accessor === 'string') {\n        accessor = [accessor];\n      }\n      if (Array.isArray(accessor)) {\n        accessor.forEach(accessorName => {\n          if (!triggers[accessorName]) {\n            triggers[accessorName] = [];\n          }\n          triggers[accessorName].push(attributeName);\n        });\n      }\n    }\n\n    this.updateTriggers = triggers;\n  }\n\n  _invalidateTrigger(triggerName) {\n    const {attributes, updateTriggers} = this;\n    const invalidatedAttributes = updateTriggers[triggerName];\n\n    if (!invalidatedAttributes) {\n      let message = `invalidating non-existent trigger ${triggerName} for ${this.id}\\n`;\n      message += `Valid triggers: ${Object.keys(attributes).join(', ')}`;\n      log.warn(message, invalidatedAttributes)();\n    } else {\n      invalidatedAttributes.forEach(name => {\n        const attribute = attributes[name];\n        if (attribute) {\n          attribute.setNeedsUpdate();\n        }\n      });\n    }\n    return invalidatedAttributes;\n  }\n\n  // Set the buffers for the supplied attributes\n  // Update attribute buffers from any attributes in props\n  // Detach any previously set buffers, marking all\n  // Attributes for auto allocation\n  /* eslint-disable max-statements, max-depth */\n  _setExternalBuffers(bufferMap) {\n    // Copy the refs of any supplied buffers in the props\n    for (const attributeName in this.attributes) {\n      const attribute = this.attributes[attributeName];\n\n      const buffer = bufferMap[attributeName];\n      attribute.setExternalBuffer(buffer, this.numInstances);\n      this.needsRedraw |= attribute.needsRedraw();\n    }\n  }\n\n  // Checks that any attribute buffers in props are valid\n  // Note: This is just to help app catch mistakes\n  _checkExternalBuffers({buffers = {}, ignoreUnknownAttributes = false} = {}) {\n    const {attributes} = this;\n    for (const attributeName in buffers) {\n      const attribute = attributes[attributeName];\n      if (!attribute && !ignoreUnknownAttributes) {\n        throw new Error(`Unknown attribute prop ${attributeName}`);\n      }\n    }\n  }\n\n  /* Checks that typed arrays for attributes are big enough\n   * sets alloc flag if not\n   * @return {Boolean} whether any updates are needed\n   */\n  _checkIfBuffersNeedUpdating({numInstances}) {\n    assert(numInstances !== undefined, 'numInstances not defined');\n\n    // Track whether any allocations or updates are needed\n    let needsUpdate = false;\n\n    for (const attributeName in this.attributes) {\n      const attribute = this.attributes[attributeName];\n      attribute.setNumInstances(numInstances);\n      needsUpdate = needsUpdate || attribute.needsUpdate();\n    }\n\n    return needsUpdate;\n  }\n\n  // Calls update on any buffers that need update\n  // TODO? - If app supplied all attributes, no need to iterate over data\n  //\n  // @param {Object} data - data (iterable object)\n  // @param {Object} numInstances - count of data\n  // @param {Object} props - passed to updaters\n  // @param {Object} context - Used as \"this\" context for updaters\n  _allocateBuffers({numInstances, data, props, context}) {\n    const {attributes} = this;\n\n    for (const attributeName in attributes) {\n      const attribute = attributes[attributeName];\n\n      if (attribute.allocate(numInstances)) {\n        logFunctions.onUpdate({\n          level: LOG_DETAIL_PRIORITY,\n          message: `${attributeName} allocated ${numInstances}`,\n          id: this.id\n        });\n      }\n    }\n  }\n\n  // Calls update on any buffers that need update\n  _updateBuffers({numInstances, data, props, context}) {\n    for (const attributeName in this.attributes) {\n      const attribute = this.attributes[attributeName];\n\n      // Call updater function if needed\n      const timeStart = Date.now();\n\n      const updated = attribute.update({numInstances, data, props, context});\n      if (updated) {\n        this.needsRedraw = true;\n\n        const timeMs = Math.round(Date.now() - timeStart);\n        logFunctions.onUpdate({\n          level: LOG_DETAIL_PRIORITY,\n          message: `${attributeName} updated ${numInstances} in ${timeMs}ms`\n        });\n      }\n    }\n  }\n}\n"],"file":"attribute-manager.js"}