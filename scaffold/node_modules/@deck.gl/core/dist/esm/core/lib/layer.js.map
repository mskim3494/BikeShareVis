{"version":3,"sources":["../../../../src/core/lib/layer.js"],"names":["COORDINATE_SYSTEM","AttributeManager","removeLayerInSeer","LIFECYCLE","createProps","diffProps","count","log","GL","withParameters","assert","LayerState","LOG_PRIORITY_UPDATE","EMPTY_PROPS","Object","freeze","noop","defaultProps","dataComparator","updateTriggers","numInstances","undefined","visible","pickable","opacity","type","min","max","value","onHover","onClick","coordinateSystem","LNGLAT","coordinateOrigin","parameters","uniforms","framebuffer","animation","getPolygonOffset","layerIndex","highlightedObjectIndex","autoHighlight","highlightColor","counter","Layer","props","apply","arguments","id","lifecycle","NO_STATE","parentLayer","context","state","internalState","seal","newProps","constructor","assign","className","layerName","name","updateObject","setNeedsRedraw","redraw","needsRedraw","clearRedrawFlags","_getNeedsRedraw","shouldUpdateState","_getUpdateParams","models","model","attributeManager","layer","data","object","lngLat","viewport","Array","isArray","project","xy","unproject","projectFlat","unprojectFlat","screenPixels","deprecated","devicePixelRatio","window","i","color","Uint8Array","i1","i2","i3","index","Error","oldProps","changeFlags","propsOrDataChanged","getAttributeManager","dataChanged","invalidateAll","getModels","delete","opts","draw","info","mode","diffReason","invalidate","getNumInstances","update","transitions","buffers","ignoreUnknownAttributes","getSingleModel","changedAttributes","getChangedAttributes","clearChangedFlags","setAttributes","isInTransition","updateTransition","transition","attribute","size","pickingColor","encodePickingColor","gl","_initState","initializeState","setChangeFlags","propsChanged","viewportChanged","_updateState","program","geometry","getAttributes","clearChangeFlags","stateNeedsUpdate","needsUpdate","updateParams","updateState","isComposite","_renderLayers","updateAttributes","_updateBaseUniforms","_updateModuleSettings","setInstanceCount","finalizeState","moduleParameters","picking_uActive","updateModuleSettings","offsets","polygonOffset","getPickingInfo","flags","updateTriggersChanged","keys","join","somethingChanged","key","_activeUpdateTrigger","attributeManagerNeedsRedraw","getNeedsRedraw","modelNeedsRedraw","stats","addInstanced","instancePickingColors","UNSIGNED_BYTE","calculateInstancePickingColors","oldLayer","userData","propName","invalidateAttribute","propertyName","condition","Math","pow","ONE","setUniforms","settings","pickingHighlightColor","uniformMap"],"mappings":";;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAQA,iBAAR,QAAgC,aAAhC;AACA,OAAOC,gBAAP,MAA6B,qBAA7B;AACA,SAAQC,iBAAR,QAAgC,oBAAhC;AACA,SAAQC,SAAR,QAAwB,wBAAxB;AACA,SAAQC,WAAR,QAA0B,2BAA1B;AACA,SAAQC,uBAAR,QAAwB,oBAAxB;AACA,SAAQC,KAAR,QAAoB,gBAApB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,SAAQC,EAAR,EAAYC,cAAZ,QAAiC,SAAjC;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AAEA,OAAOC,UAAP,MAAuB,eAAvB;AAEA,IAAMC,sBAAsB,CAA5B;AACA,IAAMC,cAAcC,OAAOC,MAAP,CAAc,EAAd,CAApB;;AACA,IAAMC,OAAO,SAAPA,IAAO,GAAM,CAAE,CAArB;;AAEA,IAAMC,eAAe;AACnB;AACAC,kBAAgB,IAFG;AAGnBC,kBAAgB,EAHG;AAGC;AACpBC,gBAAcC,SAJK;AAMnBC,WAAS,IANU;AAOnBC,YAAU,KAPS;AAQnBC,WAAS;AAACC,UAAM,QAAP;AAAiBC,SAAK,CAAtB;AAAyBC,SAAK,CAA9B;AAAiCC,WAAO;AAAxC,GARU;AAUnBC,WAASb,IAVU;AAWnBc,WAASd,IAXU;AAanBe,oBAAkB/B,kBAAkBgC,MAbjB;AAcnBC,oBAAkB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAdC;AAgBnBC,cAAY,EAhBO;AAiBnBC,YAAU,EAjBS;AAkBnBC,eAAa,IAlBM;AAoBnBC,aAAW,IApBQ;AAoBF;AAEjB;AACA;AACA;AACAC,oBAAkB;AAAA,QAAEC,UAAF,QAAEA,UAAF;AAAA,WAAkB,CAAC,CAAD,EAAI,CAACA,UAAD,GAAc,GAAlB,CAAlB;AAAA,GAzBC;AA2BnB;AACAC,0BAAwB,IA5BL;AA6BnBC,iBAAe,KA7BI;AA8BnBC,kBAAgB,CAAC,CAAD,EAAI,CAAJ,EAAO,GAAP,EAAY,GAAZ;AA9BG,CAArB;AAiCA,IAAIC,UAAU,CAAd;;IAEqBC,K;;;AACnB;AAAY;AAAsB;AAAA;;AAChC;;AACA;AACA,SAAKC,KAAL,GAAazC,YAAY0C,KAAZ,CAAkB,IAAlB,EAAwBC,SAAxB,CAAb;AACA;AAEA;;AACA,SAAKC,EAAL,GAAU,KAAKH,KAAL,CAAWG,EAArB,CAPgC,CAOP;;AACzB,SAAK1C,KAAL,GAAaqC,SAAb,CARgC,CAQR;;AACxB,SAAKM,SAAL,GAAiB9C,UAAU+C,QAA3B,CATgC,CASK;;AACrC,SAAKC,WAAL,GAAmB,IAAnB,CAVgC,CAUP;;AACzB,SAAKC,OAAL,GAAe,IAAf,CAXgC,CAWX;;AACrB,SAAKC,KAAL,GAAa,IAAb,CAZgC,CAYb;;AACnB,SAAKC,aAAL,GAAqB,IAArB,CAbgC,CAehC;;AACAxC,WAAOyC,IAAP,CAAY,IAAZ;AACD,G,CAED;;;;;0BACMC,Q,EAAU;AACd,aAAO,IAAI,KAAKC,WAAT,CAAqB3C,OAAO4C,MAAP,CAAc,EAAd,EAAkB,KAAKb,KAAvB,EAA8BW,QAA9B,CAArB,CAAP;AACD;;;+BAEU;AACT,UAAMG,YAAY,KAAKF,WAAL,CAAiBG,SAAjB,IAA8B,KAAKH,WAAL,CAAiBI,IAAjE;AACA,uBAAUF,SAAV,oBAA6B,KAAKd,KAAL,CAAWG,EAAxC;AACD;;;AAMD;AAEA;6BACSc,Y,EAAc;AACrBhD,aAAO4C,MAAP,CAAc,KAAKL,KAAnB,EAA0BS,YAA1B;AACA,WAAKC,cAAL;AACD,K,CAED;;;;qCAC8B;AAAA,UAAfC,MAAe,uEAAN,IAAM;;AAC5B,UAAI,KAAKV,aAAT,EAAwB;AACtB,aAAKA,aAAL,CAAmBW,WAAnB,GAAiCD,MAAjC;AACD;AACF,K,CAED;AACA;AACA;AACA;AACA;AACA;AAEA;;;;qCACgD;AAAA,sFAAJ,EAAI;AAAA,wCAAhCE,gBAAgC;AAAA,UAAhCA,gBAAgC,sCAAb,KAAa;;AAC9C,aAAO,KAAKC,eAAL,CAAqBD,gBAArB,CAAP;AACD,K,CAED;;;;kCACc;AACZ;AACA,aAAO,KAAKE,iBAAL,CAAuB,KAAKC,gBAAL,EAAvB,CAAP,CAFY,CAGZ;AACD,K,CAED;;;;iCACa;AACX,aAAO,KAAKxB,KAAL,CAAWtB,QAAX,IAAuB,KAAKsB,KAAL,CAAWvB,OAAzC;AACD,K,CAED;;;;gCACY;AACV,aAAO,KAAK+B,KAAL,KAAe,KAAKA,KAAL,CAAWiB,MAAX,KAAsB,KAAKjB,KAAL,CAAWkB,KAAX,GAAmB,CAAC,KAAKlB,KAAL,CAAWkB,KAAZ,CAAnB,GAAwC,EAA9D,CAAf,CAAP;AACD,K,CAED;;;;qCACiB;AACf,aAAO,KAAKlB,KAAL,IAAc,KAAKA,KAAL,CAAWkB,KAAhC;AACD;;;0CAEqB;AACpB,aAAO,KAAKjB,aAAL,IAAsB,KAAKA,aAAL,CAAmBkB,gBAAhD;AACD,K,CAED;AACA;;;;sCACkB;AAChB,aAAO,KAAKlB,aAAL,IAAsB,KAAKA,aAAL,CAAmBmB,KAAhD;AACD,K,CAED;AACA;;;;qCACiB;AAAA,UACRC,IADQ,GACA,KAAK7B,KADL,CACR6B,IADQ;AAAA;AAAA;AAAA;;AAAA;AAEf,6BAAqBA,IAArB,8HAA2B;AAAA,cAAhBC,MAAgB;AACzB,iBAAOA,MAAP;AACD;AAJc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKf,aAAO,IAAP;AACD,K,CAED;AAEA;AACA;AACA;;;;4BACQC,M,EAAQ;AAAA,UACPC,QADO,GACK,KAAKzB,OADV,CACPyB,QADO;AAEdnE,aAAOoE,MAAMC,OAAN,CAAcH,MAAd,CAAP;AACA,aAAOC,SAASG,OAAT,CAAiBJ,MAAjB,CAAP;AACD;;;8BAESK,E,EAAI;AAAA,UACLJ,QADK,GACO,KAAKzB,OADZ,CACLyB,QADK;AAEZnE,aAAOoE,MAAMC,OAAN,CAAcE,EAAd,CAAP;AACA,aAAOJ,SAASK,SAAT,CAAmBD,EAAnB,CAAP;AACD;;;gCAEWL,M,EAAQ;AAAA,UACXC,QADW,GACC,KAAKzB,OADN,CACXyB,QADW;AAElBnE,aAAOoE,MAAMC,OAAN,CAAcH,MAAd,CAAP;AACA,aAAOC,SAASM,WAAT,CAAqBP,MAArB,CAAP;AACD;;;kCAEaK,E,EAAI;AAAA,UACTJ,QADS,GACG,KAAKzB,OADR,CACTyB,QADS;AAEhBnE,aAAOoE,MAAMC,OAAN,CAAcE,EAAd,CAAP;AACA,aAAOJ,SAASO,aAAT,CAAuBH,EAAvB,CAAP;AACD,K,CAED;;;;yCACqBI,Y,EAAc;AACjC9E,UAAI+E,UAAJ,CAAe,sBAAf,EAAuC,4CAAvC;AACA,UAAMC,mBAAmB,OAAOC,MAAP,KAAkB,WAAlB,GAAgCA,OAAOD,gBAAvC,GAA0D,CAAnF;AACA,aAAOF,eAAeE,gBAAtB;AACD,K,CAED;AACA;AACA;;;;uCACmB;AACjB,aAAO,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAP;AACD,K,CAED;AACA;;;;uCACmBE,C,EAAG;AACpB/E,aAAO,CAAG+E,IAAI,CAAL,IAAW,EAAZ,GAAkB,GAAnB,MAA4B,CAAnC,EAAsC,kCAAtC;AACA,aAAO,CAAEA,IAAI,CAAL,GAAU,GAAX,EAAkBA,IAAI,CAAL,IAAW,CAAZ,GAAiB,GAAjC,EAAyCA,IAAI,CAAL,IAAW,CAAZ,IAAkB,CAAnB,GAAwB,GAA9D,CAAP;AACD,K,CAED;AACA;AACA;;;;uCACmBC,K,EAAO;AACxBhF,yBAAOgF,KAAP,EAAwBC,UAAxB;;AADwB,kCAEHD,KAFG;AAAA,UAEjBE,EAFiB;AAAA,UAEbC,EAFa;AAAA,UAETC,EAFS,cAGxB;;;AACA,UAAMC,QAAQH,KAAKC,KAAK,GAAV,GAAgBC,KAAK,KAArB,GAA6B,CAA3C;AACA,aAAOC,KAAP;AACD,K,CAED;AACA;AAEA;AACA;;;;sCACkB;AAChB,YAAM,IAAIC,KAAJ,iBAAmB,IAAnB,sCAAN;AACD,K,CAED;;;;6CAC2D;AAAA,UAAxCC,QAAwC,SAAxCA,QAAwC;AAAA,UAA9BpD,KAA8B,SAA9BA,KAA8B;AAAA,UAAvBO,OAAuB,SAAvBA,OAAuB;AAAA,UAAd8C,WAAc,SAAdA,WAAc;AACzD,aAAOA,YAAYC,kBAAnB;AACD,K,CAED;AACA;;;;uCACqD;AAAA,UAAxCF,QAAwC,SAAxCA,QAAwC;AAAA,UAA9BpD,KAA8B,SAA9BA,KAA8B;AAAA,UAAvBO,OAAuB,SAAvBA,OAAuB;AAAA,UAAd8C,WAAc,SAAdA,WAAc;AACnD,UAAM1B,mBAAmB,KAAK4B,mBAAL,EAAzB;;AACA,UAAIF,YAAYG,WAAZ,IAA2B7B,gBAA/B,EAAiD;AAC/CA,yBAAiB8B,aAAjB;AACD;AACF,K,CAED;AACA;;;;oCACgB;AAAA;AAAA;AAAA;;AAAA;AACd,8BAAoB,KAAKC,SAAL,EAApB,mIAAsC;AAAA,cAA3BhC,KAA2B;AACpCA,gBAAMiC,MAAN;AACD;AAHa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIf,K,CAED;;;;yBACKC,I,EAAM;AAAA;AAAA;AAAA;;AAAA;AACT,8BAAoB,KAAKF,SAAL,EAApB,mIAAsC;AAAA,cAA3BhC,KAA2B;AACpCA,gBAAMmC,IAAN,CAAWD,IAAX;AACD;AAHQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIV,K,CAED;AACA;;;;0CAC6B;AAAA,UAAbE,IAAa,SAAbA,IAAa;AAAA,UAAPC,IAAO,SAAPA,IAAO;AAAA,UACpBb,KADoB,GACXY,IADW,CACpBZ,KADoB;;AAG3B,UAAIA,SAAS,CAAb,EAAgB;AACd;AACA,YAAIjB,MAAMC,OAAN,CAAc,KAAKlC,KAAL,CAAW6B,IAAzB,CAAJ,EAAoC;AAClCiC,eAAKhC,MAAL,GAAc,KAAK9B,KAAL,CAAW6B,IAAX,CAAgBqB,KAAhB,CAAd;AACD;AACF;;AAED,aAAOY,IAAP;AACD,K,CAED;AACA;AAEA;AAEA;;;;0CACmD;AAAA,UAA/B9C,IAA+B,uEAAxB,KAAwB;AAAA,UAAjBgD,UAAiB,uEAAJ,EAAI;AACjD,UAAMrC,mBAAmB,KAAK4B,mBAAL,EAAzB;;AACA,UAAI,CAAC5B,gBAAL,EAAuB;AACrB;AACD;;AAED,UAAIX,SAAS,KAAb,EAAoB;AAClBtD,YAAIA,GAAJ,CAAQK,mBAAR,wDAA4EiG,UAA5E;AACArC,yBAAiB8B,aAAjB;AACD,OAHD,MAGO;AACL/F,YAAIA,GAAJ,CACEK,mBADF,kDAE2CiD,IAF3C,eAEoDgD,UAFpD;AAIArC,yBAAiBsC,UAAjB,CAA4BjD,IAA5B;AACD;AACF,K,CAED;;;;qCACiBhB,K,EAAO;AACtB,UAAM2B,mBAAmB,KAAK4B,mBAAL,EAAzB;;AACA,UAAI,CAAC5B,gBAAL,EAAuB;AACrB;AACD,OAJqB,CAMtB;;;AACA,UAAMpD,eAAe,KAAK2F,eAAL,CAAqBlE,KAArB,CAArB;AAEA2B,uBAAiBwC,MAAjB,CAAwB;AACtBtC,cAAM7B,MAAM6B,IADU;AAEtBtD,kCAFsB;AAGtByB,oBAHsB;AAItBoE,qBAAapE,MAAMoE,WAJG;AAKtBC,iBAASrE,KALa;AAMtBO,iBAAS,IANa;AAOtB;AACA+D,iCAAyB;AARH,OAAxB;AAWA,UAAM5C,QAAQ,KAAK6C,cAAL,EAAd;;AACA,UAAI7C,KAAJ,EAAW;AACT,YAAM8C,oBAAoB7C,iBAAiB8C,oBAAjB,CAAsC;AAACC,6BAAmB;AAApB,SAAtC,CAA1B;AACAhD,cAAMiD,aAAN,CAAoBH,iBAApB;AACD;AACF,K,CAED;;;;uCACmB;AACjB,UAAM9C,QAAQ,KAAK6C,cAAL,EAAd;AACA,UAAM5C,mBAAmB,KAAK4B,mBAAL,EAAzB;AACA,UAAMqB,iBAAiBjD,oBAAoBA,iBAAiBkD,gBAAjB,EAA3C;;AAEA,UAAInD,SAASkD,cAAb,EAA6B;AAC3BlD,cAAMiD,aAAN,CAAoBhD,iBAAiB8C,oBAAjB,CAAsC;AAACK,sBAAY;AAAb,SAAtC,CAApB;AACD;AACF;;;mDAE8BC,S,SAA2B;AAAA,UAAfxG,YAAe,SAAfA,YAAe;AAAA,UACjDQ,KADiD,GAClCgG,SADkC,CACjDhG,KADiD;AAAA,UAC1CiG,IAD0C,GAClCD,SADkC,CAC1CC,IAD0C,EAExD;;AACA,WAAK,IAAIpC,IAAI,CAAb,EAAgBA,IAAIrE,YAApB,EAAkCqE,GAAlC,EAAuC;AACrC,YAAMqC,eAAe,KAAKC,kBAAL,CAAwBtC,CAAxB,CAArB;AACA7D,cAAM6D,IAAIoC,IAAJ,GAAW,CAAjB,IAAsBC,aAAa,CAAb,CAAtB;AACAlG,cAAM6D,IAAIoC,IAAJ,GAAW,CAAjB,IAAsBC,aAAa,CAAb,CAAtB;AACAlG,cAAM6D,IAAIoC,IAAJ,GAAW,CAAjB,IAAsBC,aAAa,CAAb,CAAtB;AACD;AACF,K,CAED;AACA;AACA;AACA;AACA;;;;oCACgBjF,K,EAAO;AACrBA,cAAQA,SAAS,KAAKA,KAAtB,CADqB,CAGrB;;AACA,UAAI,KAAKQ,KAAL,IAAc,KAAKA,KAAL,CAAWjC,YAAX,KAA4BC,SAA9C,EAAyD;AACvD,eAAO,KAAKgC,KAAL,CAAWjC,YAAlB;AACD,OANoB,CAQrB;;;AACA,UAAIyB,MAAMzB,YAAN,KAAuBC,SAA3B,EAAsC;AACpC,eAAOwB,MAAMzB,YAAb;AACD,OAXoB,CAarB;;;AAbqB,UAcdsD,IAdc,GAcN,KAAK7B,KAdC,CAcd6B,IAdc;AAerB,aAAOpE,MAAMoE,IAAN,CAAP;AACD,K,CAED;AACA;AAEA;;AACA;;;;kCACc;AACZhE,aAAO,KAAK0C,OAAL,CAAa4E,EAApB;;AAEA,WAAKC,UAAL,GAHY,CAKZ;;;AACA,WAAKC,eAAL,CAAqB,KAAK9E,OAA1B,EANY,CAOZ;AAEA;AACA;;AACA,WAAKC,KAAL,CAAWmB,gBAAX,GAA8B,KAAK4B,mBAAL,EAA9B,CAXY,CAaZ;;AACA,WAAK+B,cAAL,CAAoB;AAAC9B,qBAAa,IAAd;AAAoB+B,sBAAc,IAAlC;AAAwCC,yBAAiB;AAAzD,OAApB;AAEA,WAAK/E,aAAL,CAAmB2C,QAAnB,GAA8BpF,WAA9B;;AACA,WAAKyH,YAAL;;AAEA,UAAM/D,QAAQ,KAAK6C,cAAL,EAAd;;AACA,UAAI7C,KAAJ,EAAW;AACTA,cAAMvB,EAAN,GAAW,KAAKH,KAAL,CAAWG,EAAtB;AACAuB,cAAMgE,OAAN,CAAcvF,EAAd,aAAsB,KAAKH,KAAL,CAAWG,EAAjC;AACAuB,cAAMiE,QAAN,CAAexF,EAAf,aAAuB,KAAKH,KAAL,CAAWG,EAAlC;AACAuB,cAAMiD,aAAN,CAAoB,KAAKpB,mBAAL,GAA2BqC,aAA3B,EAApB;AACD,OAzBW,CA2BZ;;;AACA,WAAKC,gBAAL;AACA,WAAKpF,aAAL,CAAmB2C,QAAnB,GAA8B,IAA9B;AACD,K,CAED;AACA;;;;8BACU;AACR;AACA,UAAM0C,mBAAmB,KAAKC,WAAL,EAAzB,CAFQ,CAGR;;AAEA,UAAID,gBAAJ,EAAsB;AACpB,aAAKL,YAAL;AACD,OAPO,CASR;;;AACA,WAAKI,gBAAL;AACA,WAAKpF,aAAL,CAAmB2C,QAAnB,GAA8B,IAA9B;AACD;AACD;;;;mCAEe;AACb,UAAM4C,eAAe,KAAKxE,gBAAL,EAArB,CADa,CAEb;;;AACA,WAAKyE,WAAL,CAAiBD,YAAjB,EAHa,CAIb;AAEA;;AACA,UAAI,KAAKE,WAAT,EAAsB;AACpB,aAAKC,aAAL;AACD,OATY,CAWb;;;AACA,WAAKC,gBAAL,CAAsB,KAAKpG,KAA3B;;AACA,WAAKqG,mBAAL;;AACA,WAAKC,qBAAL,GAda,CAgBb;;;AACA,UAAI,KAAK9F,KAAL,CAAWkB,KAAf,EAAsB;AACpB,aAAKlB,KAAL,CAAWkB,KAAX,CAAiB6E,gBAAjB,CAAkC,KAAKrC,eAAL,EAAlC;AACD;AACF,K,CAED;AACA;;;;gCACY;AACVrG,aAAO,KAAK4C,aAAL,IAAsB,KAAKD,KAAlC,EADU,CAGV;;AACA,WAAKgG,aAAL,CAAmB,KAAKjG,OAAxB,EAJU,CAKV;;AACAlD,wBAAkB,KAAK8C,EAAvB;AACD,K,CAED;;;;qCACqE;AAAA;;AAAA,wCAA1DsG,gBAA0D;AAAA,UAA1DA,gBAA0D,sCAAvC,IAAuC;AAAA,iCAAjCnH,QAAiC;AAAA,UAAjCA,QAAiC,+BAAtB,EAAsB;AAAA,mCAAlBD,UAAkB;AAAA,UAAlBA,UAAkB,iCAAL,EAAK;;AACnE,UAAI,CAACC,SAASoH,eAAd,EAA+B;AAC7B,aAAK7B,gBAAL;AACD,OAHkE,CAKnE;;;AACA,UAAI4B,gBAAJ,EAAsB;AAAA;AAAA;AAAA;;AAAA;AACpB,gCAAoB,KAAK/C,SAAL,EAApB,mIAAsC;AAAA,gBAA3BhC,KAA2B;AACpCA,kBAAMiF,oBAAN,CAA2BF,gBAA3B;AACD;AAHmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIrB,OAVkE,CAYnE;AACA;;;AAbmE,UAc5DhH,gBAd4D,GAcxC,KAAKO,KAdmC,CAc5DP,gBAd4D;AAenE,UAAMmH,UAAWnH,oBAAoBA,iBAAiBH,QAAjB,CAArB,IAAoD,CAAC,CAAD,EAAI,CAAJ,CAApE;AACAD,iBAAWwH,aAAX,GAA2BD,OAA3B,CAhBmE,CAkBnE;;AACAhJ,qBAAe,KAAK2C,OAAL,CAAa4E,EAA5B,EAAgC9F,UAAhC,EAA4C,YAAM;AAChD,cAAKwE,IAAL,CAAU;AAAC4C,4CAAD;AAAmBnH,4BAAnB;AAA6BD,gCAA7B;AAAyCkB,mBAAS,MAAKA;AAAvD,SAAV;AACD,OAFD,EAnBmE,CAsBnE;AACD,K,CAED;;;;8BACUqD,I,EAAM;AACd;AACA,aAAO,KAAKkD,cAAL,CAAoBlD,IAApB,CAAP,CAFc,CAGd;AACD,K,CAED;;;;qCACiB;AACf,aAAO,KAAKnD,aAAL,CAAmB4C,WAA1B;AACD,K,CAED;;AACA;;;;mCACe0D,K,EAAO;AAAA;;AACpB,WAAKtG,aAAL,CAAmB4C,WAAnB,GAAiC,KAAK5C,aAAL,CAAmB4C,WAAnB,IAAkC,EAAnE;AACA,UAAMA,cAAc,KAAK5C,aAAL,CAAmB4C,WAAvC,CAFoB,CAIpB;;AACA,UAAI0D,MAAMvD,WAAN,IAAqB,CAACH,YAAYG,WAAtC,EAAmD;AACjDH,oBAAYG,WAAZ,GAA0BuD,MAAMvD,WAAhC;AACA9F,YAAIA,GAAJ,CAAQK,sBAAsB,CAA9B,EAAiC;AAAA,wCAAsBgJ,MAAMvD,WAA5B,iBAA8C,OAAKrD,EAAnD;AAAA,SAAjC;AACD;;AACD,UAAI4G,MAAMC,qBAAN,IAA+B,CAAC3D,YAAY2D,qBAAhD,EAAuE;AACrE3D,oBAAY2D,qBAAZ,GACE3D,YAAY2D,qBAAZ,IAAqCD,MAAMC,qBAA3C,GACI/I,OAAO4C,MAAP,CAAc,EAAd,EAAkBkG,MAAMC,qBAAxB,EAA+C3D,YAAY2D,qBAA3D,CADJ,GAEID,MAAMC,qBAAN,IAA+B3D,YAAY2D,qBAHjD;AAIAtJ,YAAIA,GAAJ,CACEK,sBAAsB,CADxB,EAEE;AAAA,iBACE,sCACGE,OAAOgJ,IAAP,CAAYF,MAAMC,qBAAlB,EAAyCE,IAAzC,CAA8C,IAA9C,CADH,iBAC6D,OAAK/G,EADlE,CADF;AAAA,SAFF;AAMD;;AACD,UAAI4G,MAAMxB,YAAN,IAAsB,CAAClC,YAAYkC,YAAvC,EAAqD;AACnDlC,oBAAYkC,YAAZ,GAA2BwB,MAAMxB,YAAjC;AACA7H,YAAIA,GAAJ,CAAQK,sBAAsB,CAA9B,EAAiC;AAAA,yCAAuBgJ,MAAMxB,YAA7B,iBAAgD,OAAKpF,EAArD;AAAA,SAAjC;AACD;;AACD,UAAI4G,MAAMvB,eAAN,IAAyB,CAACnC,YAAYmC,eAA1C,EAA2D;AACzDnC,oBAAYmC,eAAZ,GAA8BuB,MAAMvB,eAApC;AACA9H,YAAIA,GAAJ,CACEK,sBAAsB,CADxB,EAEE;AAAA,4CAA0BgJ,MAAMvB,eAAhC,iBAAsD,OAAKrF,EAA3D;AAAA,SAFF;AAID,OA/BmB,CAiCpB;;;AACA,UAAMmD,qBACJyD,MAAMvD,WAAN,IAAqBuD,MAAMC,qBAA3B,IAAoDD,MAAMxB,YAD5D;AAEAlC,kBAAYC,kBAAZ,GAAiCD,YAAYC,kBAAZ,IAAkCA,kBAAnE;AACAD,kBAAY8D,gBAAZ,GACE9D,YAAY8D,gBAAZ,IAAgC7D,kBAAhC,IAAsDyD,MAAMvB,eAD9D;AAED;AACD;AAEA;;;;uCACmB;AACjB,WAAK/E,aAAL,CAAmB4C,WAAnB,GAAiC;AAC/B;AACAG,qBAAa,KAFkB;AAG/B+B,sBAAc,KAHiB;AAI/ByB,+BAAuB,KAJQ;AAK/BxB,yBAAiB,KALc;AAO/B;AACAlC,4BAAoB,KARW;AAS/B6D,0BAAkB;AATa,OAAjC;AAWD;;;uCAEkB;AACjB,UAAMJ,QAAQ,KAAKtG,aAAL,CAAmB4C,WAAjC;AACA,uBACF0D,MAAMvD,WAAN,GAAoB,OAApB,GAA8B,EAD5B,SAEFuD,MAAMxB,YAAN,GAAqB,QAArB,GAAgC,EAF9B,SAGFwB,MAAMC,qBAAN,GAA8B,WAA9B,GAA4C,EAH1C,SAIFD,MAAMvB,eAAN,GAAwB,UAAxB,GAAqC,EAJnC;AAMD,K,CAED;AACA;AACA;AACA;;;;8BACU7E,Q,EAAUyC,Q,EAAU;AAC5B,UAAMC,cAAc7F,WAAUmD,QAAV,EAAoByC,QAApB,CAApB,CAD4B,CAG5B;;;AACA,UAAIC,YAAY2D,qBAAhB,EAAuC;AACrC,aAAK,IAAMI,GAAX,IAAkB/D,YAAY2D,qBAA9B,EAAqD;AACnD,cAAI3D,YAAY2D,qBAAZ,CAAkCI,GAAlC,CAAJ,EAA4C;AAC1C,iBAAKC,oBAAL,CAA0BD,GAA1B;AACD;AACF;AACF;;AAED,aAAO,KAAK9B,cAAL,CAAoBjC,WAApB,CAAP;AACD,K,CAED;;;;uCAEmB;AACjB,aAAO;AACLrD,eAAO,KAAKA,KADP;AAELoD,kBAAU,KAAK3C,aAAL,CAAmB2C,QAAnB,IAA+B,KAAKpD,KAFzC;AAGLO,iBAAS,KAAKA,OAHT;AAIL8C,qBAAa,KAAK5C,aAAL,CAAmB4C;AAJ3B,OAAP;AAMD,K,CAED;;;;oCACgBhC,gB,EAAkB;AAChC;AACA;AACA,UAAI,CAAC,KAAKZ,aAAV,EAAyB;AACvB,eAAO,KAAP;AACD;;AAED,UAAIU,SAAS,KAAb;AACAA,eAASA,UAAW,KAAKV,aAAL,CAAmBW,WAAnB,IAAkC,KAAKjB,EAA3D;AACA,WAAKM,aAAL,CAAmBW,WAAnB,GAAiC,KAAKX,aAAL,CAAmBW,WAAnB,IAAkC,CAACC,gBAApE,CATgC,CAWhC;;AACA,UAAMM,mBAAmB,KAAK4B,mBAAL,EAAzB;AACA,UAAM+D,8BACJ3F,oBAAoBA,iBAAiB4F,cAAjB,CAAgC;AAAClG;AAAD,OAAhC,CADtB;AAEAF,eAASA,UAAUmG,2BAAnB;AAfgC;AAAA;AAAA;;AAAA;AAiBhC,8BAAoB,KAAK5D,SAAL,EAApB,mIAAsC;AAAA,cAA3BhC,KAA2B;AACpC,cAAI8F,mBAAmB9F,MAAM6F,cAAN,CAAqB;AAAClG;AAAD,WAArB,CAAvB;;AACA,cAAImG,oBAAoB,OAAOA,gBAAP,KAA4B,QAApD,EAA8D;AAC5DA,+CAA4B9F,MAAMvB,EAAlC;AACD;;AACDgB,mBAASA,UAAUqG,gBAAnB;AACD;AAvB+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAyBhC,aAAOrG,MAAP;AACD;;;iCAEY;AACXtD,aAAO,CAAC,KAAK4C,aAAN,IAAuB,CAAC,KAAKD,KAApC;AAEA,UAAMmB,mBAAmB,IAAIvE,gBAAJ,CAAqB,KAAKmD,OAAL,CAAa4E,EAAlC,EAAsC;AAC7DhF,YAAI,KAAKH,KAAL,CAAWG,EAD8C;AAE7DsH,eAAO,KAAKlH,OAAL,CAAakH;AAFyC,OAAtC,CAAzB,CAHW,CAQX;AACA;AACA;;AACA9F,uBAAiB+F,YAAjB,CAA8B;AAC5BC,+BAAuB;AACrB/I,gBAAMjB,GAAGiK,aADY;AAErB5C,gBAAM,CAFe;AAGrBb,kBAAQ,KAAK0D;AAHQ;AADK,OAA9B;AAQA,WAAKpH,aAAL,GAAqB,IAAI3C,UAAJ,CAAe;AAClC6D;AADkC,OAAf,CAArB;AAGA,WAAKnB,KAAL,GAAa,EAAb,CAtBW,CAuBX;;AACA,WAAKA,KAAL,CAAWmB,gBAAX,GAA8B,KAAK4B,mBAAL,EAA9B;AACD,K,CAED;;;;mCACeuE,Q,EAAU;AAAA,UAChBtH,KADgB,GACesH,QADf,CAChBtH,KADgB;AAAA,UACTC,aADS,GACeqH,QADf,CACTrH,aADS;AAAA,UACMT,KADN,GACe8H,QADf,CACM9H,KADN;AAEvBnC,aAAO2C,SAASC,aAAhB;AAEAA,oBAAc2C,QAAd,GAAyBpD,KAAzB;;AAEA,UAAI,SAAS8H,QAAb,EAAuB;AACrB;AACD,OARsB,CAUvB;;;AACAtH,YAAMoB,KAAN,GAAc,IAAd;AACA,WAAKpB,KAAL,GAAaA,KAAb;AACA,WAAKC,aAAL,GAAqBA,aAArB,CAbuB,CAcvB;AACA;AAEA;;AAjBuB;AAAA;AAAA;;AAAA;AAkBvB,8BAAoB,KAAKiD,SAAL,EAApB,mIAAsC;AAAA,cAA3BhC,KAA2B;AACpCA,gBAAMqG,QAAN,CAAenG,KAAf,GAAuB,IAAvB;AACD;AApBsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAsBvB,WAAKpE,SAAL,CAAe,KAAKwC,KAApB,EAA2BA,KAA3B;AACD,K,CAED;;;;yCACqBgI,Q,EAAU;AAC7B,WAAKC,mBAAL,CAAyBD,QAAzB;AACD,K,CAED;;;;uCACmBE,Y,EAAcC,S,EAAW;AAC1C,UAAMpJ,QAAQ,KAAKiB,KAAL,CAAWkI,YAAX,CAAd;;AACA,UAAInJ,UAAUP,SAAd,EAAyB;AACvB,cAAM,IAAI2E,KAAJ,oBAAsB+E,YAAtB,iCAAyD,IAAzD,EAAN;AACD;;AACD,UAAIC,aAAa,CAACA,UAAUpJ,KAAV,CAAlB,EAAoC;AAClC,cAAM,IAAIoE,KAAJ,wBAA0B+E,YAA1B,uBAAmD,IAAnD,EAAN;AACD;AACF;;;0CAEqB;AACpB,UAAM5I,WAAW;AACf;AACAX,iBAASyJ,KAAKC,GAAL,CAAS,KAAKrI,KAAL,CAAWrB,OAApB,EAA6B,IAAI,GAAjC,CAFM;AAGf2J,aAAK;AAHU,OAAjB;AADoB;AAAA;AAAA;;AAAA;AAMpB,8BAAoB,KAAK5E,SAAL,EAApB,mIAAsC;AAAA,cAA3BhC,KAA2B;AACpCA,gBAAM6G,WAAN,CAAkBjJ,QAAlB;AACD,SARmB,CAUpB;;AAVoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAWpB,WAAK4B,cAAL;AACD;;;4CAEuB;AACtB,UAAMsH,WAAW;AACfC,+BAAuB,KAAKzI,KAAL,CAAWH;AADnB,OAAjB;AADsB;AAAA;AAAA;;AAAA;AAItB,8BAAoB,KAAK6D,SAAL,EAApB,mIAAsC;AAAA,cAA3BhC,KAA2B;AACpCA,gBAAMiF,oBAAN,CAA2B6B,QAA3B;AACD;AANqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOvB,K,CAED;AAEA;;;;gCACYE,U,EAAY;AAAA;AAAA;AAAA;;AAAA;AACtB,8BAAoB,KAAKhF,SAAL,EAApB,mIAAsC;AAAA,cAA3BhC,KAA2B;AACpCA,gBAAM6G,WAAN,CAAkBG,UAAlB;AACD,SAHqB,CAKtB;;AALsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMtB,WAAKxH,cAAL;AACAxD,UAAI+E,UAAJ,CAAe,mBAAf,EAAoC,mBAApC;AACD;;;wBAhoBW;AACV,aAAO,KAAKhC,aAAL,CAAmBgH,KAA1B;AACD;;;;;;SAhCkB1H,K;AAiqBrBA,MAAMgB,SAAN,GAAkB,OAAlB;AACAhB,MAAM3B,YAAN,GAAqBA,YAArB","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* global window */\nimport {COORDINATE_SYSTEM} from './constants';\nimport AttributeManager from './attribute-manager';\nimport {removeLayerInSeer} from './seer-integration';\nimport {LIFECYCLE} from '../lifecycle/constants';\nimport {createProps} from '../lifecycle/create-props';\nimport {diffProps} from '../lifecycle/props';\nimport {count} from '../utils/count';\nimport log from '../utils/log';\nimport {GL, withParameters} from 'luma.gl';\nimport assert from '../utils/assert';\n\nimport LayerState from './layer-state';\n\nconst LOG_PRIORITY_UPDATE = 1;\nconst EMPTY_PROPS = Object.freeze({});\nconst noop = () => {};\n\nconst defaultProps = {\n  // data: Special handling for null, see below\n  dataComparator: null,\n  updateTriggers: {}, // Update triggers: a core change detection mechanism in deck.gl\n  numInstances: undefined,\n\n  visible: true,\n  pickable: false,\n  opacity: {type: 'number', min: 0, max: 1, value: 0.8},\n\n  onHover: noop,\n  onClick: noop,\n\n  coordinateSystem: COORDINATE_SYSTEM.LNGLAT,\n  coordinateOrigin: [0, 0, 0],\n\n  parameters: {},\n  uniforms: {},\n  framebuffer: null,\n\n  animation: null, // Passed prop animation functions to evaluate props\n\n  // Offset depth based on layer index to avoid z-fighting.\n  // Negative values pull layer towards the camera\n  // https://www.opengl.org/archives/resources/faq/technical/polygonoffset.htm\n  getPolygonOffset: ({layerIndex}) => [0, -layerIndex * 100],\n\n  // Selection/Highlighting\n  highlightedObjectIndex: null,\n  autoHighlight: false,\n  highlightColor: [0, 0, 128, 128]\n};\n\nlet counter = 0;\n\nexport default class Layer {\n  constructor(/* ...propObjects */) {\n    // Merge supplied props with default props and freeze them.\n    /* eslint-disable prefer-spread */\n    this.props = createProps.apply(this, arguments);\n    /* eslint-enable prefer-spread */\n\n    // Define all members before layer is sealed\n    this.id = this.props.id; // The layer's id, used for matching with layers from last render cycle\n    this.count = counter++; // Keep track of how many layer instances you are generating\n    this.lifecycle = LIFECYCLE.NO_STATE; // Helps track and debug the life cycle of the layers\n    this.parentLayer = null; // reference to the composite layer parent that rendered this layer\n    this.context = null; // Will reference layer manager's context, contains state shared by layers\n    this.state = null; // Will be set to the shared layer state object during layer matching\n    this.internalState = null;\n\n    // Seal the layer\n    Object.seal(this);\n  }\n\n  // clone this layer with modified props\n  clone(newProps) {\n    return new this.constructor(Object.assign({}, this.props, newProps));\n  }\n\n  toString() {\n    const className = this.constructor.layerName || this.constructor.name;\n    return `${className}({id: '${this.props.id}'})`;\n  }\n\n  get stats() {\n    return this.internalState.stats;\n  }\n\n  // Public API\n\n  // Updates selected state members and marks the object for redraw\n  setState(updateObject) {\n    Object.assign(this.state, updateObject);\n    this.setNeedsRedraw();\n  }\n\n  // Sets the redraw flag for this layer, will trigger a redraw next animation frame\n  setNeedsRedraw(redraw = true) {\n    if (this.internalState) {\n      this.internalState.needsRedraw = redraw;\n    }\n  }\n\n  // This layer needs a deep update\n  // TODO - Need to align with existing needsUpdate before uncommenting\n  // For now async props will call layerManager directly\n  // setNeedsUpdate() {\n  //   this.context.layerManager.setNeedsUpdate(String(this));\n  // }\n\n  // Checks state of attributes and model\n  getNeedsRedraw({clearRedrawFlags = false} = {}) {\n    return this._getNeedsRedraw(clearRedrawFlags);\n  }\n\n  // Checks if layer attributes needs updating\n  needsUpdate() {\n    // Call subclass lifecycle method\n    return this.shouldUpdateState(this._getUpdateParams());\n    // End lifecycle method\n  }\n\n  // Returns true if the layer is pickable and visible.\n  isPickable() {\n    return this.props.pickable && this.props.visible;\n  }\n\n  // Return an array of models used by this layer, can be overriden by layer subclass\n  getModels() {\n    return this.state && (this.state.models || (this.state.model ? [this.state.model] : []));\n  }\n\n  // TODO - Gradually phase out, does not support multi model layers\n  getSingleModel() {\n    return this.state && this.state.model;\n  }\n\n  getAttributeManager() {\n    return this.internalState && this.internalState.attributeManager;\n  }\n\n  // Returns the most recent layer that matched to this state\n  // (When reacting to an async event, this layer may no longer be the latest)\n  getCurrentLayer() {\n    return this.internalState && this.internalState.layer;\n  }\n\n  // Use iteration (the only required capability on data) to get first element\n  // deprecated since we are effectively only supporting Arrays\n  getFirstObject() {\n    const {data} = this.props;\n    for (const object of data) {\n      return object;\n    }\n    return null;\n  }\n\n  // PROJECTION METHODS\n\n  // Projects a point with current map state (lat, lon, zoom, pitch, bearing)\n  // TODO - need to be extended to work with COORDINATE_SYSTEM.METERS,IDENTITY\n  // TODO - need to be extended to work with multiple `views`\n  project(lngLat) {\n    const {viewport} = this.context;\n    assert(Array.isArray(lngLat));\n    return viewport.project(lngLat);\n  }\n\n  unproject(xy) {\n    const {viewport} = this.context;\n    assert(Array.isArray(xy));\n    return viewport.unproject(xy);\n  }\n\n  projectFlat(lngLat) {\n    const {viewport} = this.context;\n    assert(Array.isArray(lngLat));\n    return viewport.projectFlat(lngLat);\n  }\n\n  unprojectFlat(xy) {\n    const {viewport} = this.context;\n    assert(Array.isArray(xy));\n    return viewport.unprojectFlat(xy);\n  }\n\n  // TODO - needs to refer to context for devicePixels setting\n  screenToDevicePixels(screenPixels) {\n    log.deprecated('screenToDevicePixels', 'DeckGL prop useDevicePixels for conversion')();\n    const devicePixelRatio = typeof window !== 'undefined' ? window.devicePixelRatio : 1;\n    return screenPixels * devicePixelRatio;\n  }\n\n  // Returns the picking color that doesn't match any subfeature\n  // Use if some graphics do not belong to any pickable subfeature\n  // @return {Array} - a black color\n  nullPickingColor() {\n    return [0, 0, 0];\n  }\n\n  // Returns the picking color that doesn't match any subfeature\n  // Use if some graphics do not belong to any pickable subfeature\n  encodePickingColor(i) {\n    assert((((i + 1) >> 24) & 255) === 0, 'index out of picking color range');\n    return [(i + 1) & 255, ((i + 1) >> 8) & 255, (((i + 1) >> 8) >> 8) & 255];\n  }\n\n  // Returns the index corresponding to a picking color that doesn't match any subfeature\n  // @param {Uint8Array} color - color array to be decoded\n  // @return {Array} - the decoded picking color\n  decodePickingColor(color) {\n    assert(color instanceof Uint8Array);\n    const [i1, i2, i3] = color;\n    // 1 was added to seperate from no selection\n    const index = i1 + i2 * 256 + i3 * 65536 - 1;\n    return index;\n  }\n\n  // //////////////////////////////////////////////////\n  // LIFECYCLE METHODS, overridden by the layer subclasses\n\n  // Called once to set up the initial state\n  // App can create WebGL resources\n  initializeState() {\n    throw new Error(`Layer ${this} has not defined initializeState`);\n  }\n\n  // Let's layer control if updateState should be called\n  shouldUpdateState({oldProps, props, context, changeFlags}) {\n    return changeFlags.propsOrDataChanged;\n  }\n\n  // Default implementation, all attributes will be invalidated and updated\n  // when data changes\n  updateState({oldProps, props, context, changeFlags}) {\n    const attributeManager = this.getAttributeManager();\n    if (changeFlags.dataChanged && attributeManager) {\n      attributeManager.invalidateAll();\n    }\n  }\n\n  // Called once when layer is no longer matched and state will be discarded\n  // App can destroy WebGL resources here\n  finalizeState() {\n    for (const model of this.getModels()) {\n      model.delete();\n    }\n  }\n\n  // If state has a model, draw it with supplied uniforms\n  draw(opts) {\n    for (const model of this.getModels()) {\n      model.draw(opts);\n    }\n  }\n\n  // called to populate the info object that is passed to the event handler\n  // @return null to cancel event\n  getPickingInfo({info, mode}) {\n    const {index} = info;\n\n    if (index >= 0) {\n      // If props.data is an indexable array, get the object\n      if (Array.isArray(this.props.data)) {\n        info.object = this.props.data[index];\n      }\n    }\n\n    return info;\n  }\n\n  // END LIFECYCLE METHODS\n  // //////////////////////////////////////////////////\n\n  // INTERNAL METHODS\n\n  // Default implementation of attribute invalidation, can be redefined\n  invalidateAttribute(name = 'all', diffReason = '') {\n    const attributeManager = this.getAttributeManager();\n    if (!attributeManager) {\n      return;\n    }\n\n    if (name === 'all') {\n      log.log(LOG_PRIORITY_UPDATE, `updateTriggers invalidating all attributes: ${diffReason}`)();\n      attributeManager.invalidateAll();\n    } else {\n      log.log(\n        LOG_PRIORITY_UPDATE,\n        `updateTriggers invalidating attribute ${name}: ${diffReason}`\n      )();\n      attributeManager.invalidate(name);\n    }\n  }\n\n  // Calls attribute manager to update any WebGL attributes\n  updateAttributes(props) {\n    const attributeManager = this.getAttributeManager();\n    if (!attributeManager) {\n      return;\n    }\n\n    // Figure out data length\n    const numInstances = this.getNumInstances(props);\n\n    attributeManager.update({\n      data: props.data,\n      numInstances,\n      props,\n      transitions: props.transitions,\n      buffers: props,\n      context: this,\n      // Don't worry about non-attribute props\n      ignoreUnknownAttributes: true\n    });\n\n    const model = this.getSingleModel();\n    if (model) {\n      const changedAttributes = attributeManager.getChangedAttributes({clearChangedFlags: true});\n      model.setAttributes(changedAttributes);\n    }\n  }\n\n  // Update attribute transition\n  updateTransition() {\n    const model = this.getSingleModel();\n    const attributeManager = this.getAttributeManager();\n    const isInTransition = attributeManager && attributeManager.updateTransition();\n\n    if (model && isInTransition) {\n      model.setAttributes(attributeManager.getChangedAttributes({transition: true}));\n    }\n  }\n\n  calculateInstancePickingColors(attribute, {numInstances}) {\n    const {value, size} = attribute;\n    // add 1 to index to seperate from no selection\n    for (let i = 0; i < numInstances; i++) {\n      const pickingColor = this.encodePickingColor(i);\n      value[i * size + 0] = pickingColor[0];\n      value[i * size + 1] = pickingColor[1];\n      value[i * size + 2] = pickingColor[2];\n    }\n  }\n\n  // Deduces numer of instances. Intention is to support:\n  // - Explicit setting of numInstances\n  // - Auto-deduction for ES6 containers that define a size member\n  // - Auto-deduction for Classic Arrays via the built-in length attribute\n  // - Auto-deduction via arrays\n  getNumInstances(props) {\n    props = props || this.props;\n\n    // First check if the layer has set its own value\n    if (this.state && this.state.numInstances !== undefined) {\n      return this.state.numInstances;\n    }\n\n    // Check if app has provided an explicit value\n    if (props.numInstances !== undefined) {\n      return props.numInstances;\n    }\n\n    // Use container library to get a count for any ES6 container or object\n    const {data} = this.props;\n    return count(data);\n  }\n\n  // LAYER MANAGER API\n  // Should only be called by the deck.gl LayerManager class\n\n  // Called by layer manager when a new layer is found\n  /* eslint-disable max-statements */\n  _initialize() {\n    assert(this.context.gl);\n\n    this._initState();\n\n    // Call subclass lifecycle methods\n    this.initializeState(this.context);\n    // End subclass lifecycle methods\n\n    // TODO deprecated, for backwards compatibility with older layers\n    // in case layer resets state\n    this.state.attributeManager = this.getAttributeManager();\n\n    // initializeState callback tends to clear state\n    this.setChangeFlags({dataChanged: true, propsChanged: true, viewportChanged: true});\n\n    this.internalState.oldProps = EMPTY_PROPS;\n    this._updateState();\n\n    const model = this.getSingleModel();\n    if (model) {\n      model.id = this.props.id;\n      model.program.id = `${this.props.id}-program`;\n      model.geometry.id = `${this.props.id}-geometry`;\n      model.setAttributes(this.getAttributeManager().getAttributes());\n    }\n\n    // Clear temporary states\n    this.clearChangeFlags();\n    this.internalState.oldProps = null;\n  }\n\n  // Called by layer manager\n  // if this layer is new (not matched with an existing layer) oldProps will be empty object\n  _update() {\n    // Call subclass lifecycle method\n    const stateNeedsUpdate = this.needsUpdate();\n    // End lifecycle method\n\n    if (stateNeedsUpdate) {\n      this._updateState();\n    }\n\n    // Clear temporary states\n    this.clearChangeFlags();\n    this.internalState.oldProps = null;\n  }\n  /* eslint-enable max-statements */\n\n  _updateState() {\n    const updateParams = this._getUpdateParams();\n    // Call subclass lifecycle methods\n    this.updateState(updateParams);\n    // End subclass lifecycle methods\n\n    // Render or update previously rendered sublayers\n    if (this.isComposite) {\n      this._renderLayers();\n    }\n\n    // Add any subclass attributes\n    this.updateAttributes(this.props);\n    this._updateBaseUniforms();\n    this._updateModuleSettings();\n\n    // Note: Automatic instance count update only works for single layers\n    if (this.state.model) {\n      this.state.model.setInstanceCount(this.getNumInstances());\n    }\n  }\n\n  // Called by manager when layer is about to be disposed\n  // Note: not guaranteed to be called on application shutdown\n  _finalize() {\n    assert(this.internalState && this.state);\n\n    // Call subclass lifecycle method\n    this.finalizeState(this.context);\n    // End lifecycle method\n    removeLayerInSeer(this.id);\n  }\n\n  // Calculates uniforms\n  drawLayer({moduleParameters = null, uniforms = {}, parameters = {}}) {\n    if (!uniforms.picking_uActive) {\n      this.updateTransition();\n    }\n\n    // TODO/ib - hack move to luma Model.draw\n    if (moduleParameters) {\n      for (const model of this.getModels()) {\n        model.updateModuleSettings(moduleParameters);\n      }\n    }\n\n    // Apply polygon offset to avoid z-fighting\n    // TODO - move to draw-layers\n    const {getPolygonOffset} = this.props;\n    const offsets = (getPolygonOffset && getPolygonOffset(uniforms)) || [0, 0];\n    parameters.polygonOffset = offsets;\n\n    // Call subclass lifecycle method\n    withParameters(this.context.gl, parameters, () => {\n      this.draw({moduleParameters, uniforms, parameters, context: this.context});\n    });\n    // End lifecycle method\n  }\n\n  // {uniforms = {}, ...opts}\n  pickLayer(opts) {\n    // Call subclass lifecycle method\n    return this.getPickingInfo(opts);\n    // End lifecycle method\n  }\n\n  // Helper methods\n  getChangeFlags() {\n    return this.internalState.changeFlags;\n  }\n\n  // Dirty some change flags, will be handled by updateLayer\n  /* eslint-disable complexity */\n  setChangeFlags(flags) {\n    this.internalState.changeFlags = this.internalState.changeFlags || {};\n    const changeFlags = this.internalState.changeFlags;\n\n    // Update primary flags\n    if (flags.dataChanged && !changeFlags.dataChanged) {\n      changeFlags.dataChanged = flags.dataChanged;\n      log.log(LOG_PRIORITY_UPDATE + 1, () => `dataChanged: ${flags.dataChanged} in ${this.id}`)();\n    }\n    if (flags.updateTriggersChanged && !changeFlags.updateTriggersChanged) {\n      changeFlags.updateTriggersChanged =\n        changeFlags.updateTriggersChanged && flags.updateTriggersChanged\n          ? Object.assign({}, flags.updateTriggersChanged, changeFlags.updateTriggersChanged)\n          : flags.updateTriggersChanged || changeFlags.updateTriggersChanged;\n      log.log(\n        LOG_PRIORITY_UPDATE + 1,\n        () =>\n          'updateTriggersChanged: ' +\n          `${Object.keys(flags.updateTriggersChanged).join(', ')} in ${this.id}`\n      )();\n    }\n    if (flags.propsChanged && !changeFlags.propsChanged) {\n      changeFlags.propsChanged = flags.propsChanged;\n      log.log(LOG_PRIORITY_UPDATE + 1, () => `propsChanged: ${flags.propsChanged} in ${this.id}`)();\n    }\n    if (flags.viewportChanged && !changeFlags.viewportChanged) {\n      changeFlags.viewportChanged = flags.viewportChanged;\n      log.log(\n        LOG_PRIORITY_UPDATE + 2,\n        () => `viewportChanged: ${flags.viewportChanged} in ${this.id}`\n      )();\n    }\n\n    // Update composite flags\n    const propsOrDataChanged =\n      flags.dataChanged || flags.updateTriggersChanged || flags.propsChanged;\n    changeFlags.propsOrDataChanged = changeFlags.propsOrDataChanged || propsOrDataChanged;\n    changeFlags.somethingChanged =\n      changeFlags.somethingChanged || propsOrDataChanged || flags.viewportChanged;\n  }\n  /* eslint-enable complexity */\n\n  // Clear all changeFlags, typically after an update\n  clearChangeFlags() {\n    this.internalState.changeFlags = {\n      // Primary changeFlags, can be strings stating reason for change\n      dataChanged: false,\n      propsChanged: false,\n      updateTriggersChanged: false,\n      viewportChanged: false,\n\n      // Derived changeFlags\n      propsOrDataChanged: false,\n      somethingChanged: false\n    };\n  }\n\n  printChangeFlags() {\n    const flags = this.internalState.changeFlags;\n    return `\\\n${flags.dataChanged ? 'data ' : ''}\\\n${flags.propsChanged ? 'props ' : ''}\\\n${flags.updateTriggersChanged ? 'triggers ' : ''}\\\n${flags.viewportChanged ? 'viewport' : ''}\\\n`;\n  }\n\n  // Compares the layers props with old props from a matched older layer\n  // and extracts change flags that describe what has change so that state\n  // can be update correctly with minimal effort\n  // TODO - arguments for testing only\n  diffProps(newProps, oldProps) {\n    const changeFlags = diffProps(newProps, oldProps);\n\n    // iterate over changedTriggers\n    if (changeFlags.updateTriggersChanged) {\n      for (const key in changeFlags.updateTriggersChanged) {\n        if (changeFlags.updateTriggersChanged[key]) {\n          this._activeUpdateTrigger(key);\n        }\n      }\n    }\n\n    return this.setChangeFlags(changeFlags);\n  }\n\n  // PRIVATE METHODS\n\n  _getUpdateParams() {\n    return {\n      props: this.props,\n      oldProps: this.internalState.oldProps || this.props,\n      context: this.context,\n      changeFlags: this.internalState.changeFlags\n    };\n  }\n\n  // Checks state of attributes and model\n  _getNeedsRedraw(clearRedrawFlags) {\n    // this method may be called by the render loop as soon a the layer\n    // has been created, so guard against uninitialized state\n    if (!this.internalState) {\n      return false;\n    }\n\n    let redraw = false;\n    redraw = redraw || (this.internalState.needsRedraw && this.id);\n    this.internalState.needsRedraw = this.internalState.needsRedraw && !clearRedrawFlags;\n\n    // TODO - is attribute manager needed? - Model should be enough.\n    const attributeManager = this.getAttributeManager();\n    const attributeManagerNeedsRedraw =\n      attributeManager && attributeManager.getNeedsRedraw({clearRedrawFlags});\n    redraw = redraw || attributeManagerNeedsRedraw;\n\n    for (const model of this.getModels()) {\n      let modelNeedsRedraw = model.getNeedsRedraw({clearRedrawFlags});\n      if (modelNeedsRedraw && typeof modelNeedsRedraw !== 'string') {\n        modelNeedsRedraw = `model ${model.id}`;\n      }\n      redraw = redraw || modelNeedsRedraw;\n    }\n\n    return redraw;\n  }\n\n  _initState() {\n    assert(!this.internalState && !this.state);\n\n    const attributeManager = new AttributeManager(this.context.gl, {\n      id: this.props.id,\n      stats: this.context.stats\n    });\n\n    // All instanced layers get instancePickingColors attribute by default\n    // Their shaders can use it to render a picking scene\n    // TODO - this slightly slows down non instanced layers\n    attributeManager.addInstanced({\n      instancePickingColors: {\n        type: GL.UNSIGNED_BYTE,\n        size: 3,\n        update: this.calculateInstancePickingColors\n      }\n    });\n\n    this.internalState = new LayerState({\n      attributeManager\n    });\n    this.state = {};\n    // TODO deprecated, for backwards compatibility with older layers\n    this.state.attributeManager = this.getAttributeManager();\n  }\n\n  // Called by layer manager to transfer state from an old layer\n  _transferState(oldLayer) {\n    const {state, internalState, props} = oldLayer;\n    assert(state && internalState);\n\n    internalState.oldProps = props;\n\n    if (this === oldLayer) {\n      return;\n    }\n\n    // Move state\n    state.layer = this;\n    this.state = state;\n    this.internalState = internalState;\n    // Note: We keep the state ref on old layers to support async actions\n    // oldLayer.state = null;\n\n    // Update model layer reference\n    for (const model of this.getModels()) {\n      model.userData.layer = this;\n    }\n\n    this.diffProps(this.props, props);\n  }\n\n  // Operate on each changed triggers, will be called when an updateTrigger changes\n  _activeUpdateTrigger(propName) {\n    this.invalidateAttribute(propName);\n  }\n\n  //  Helper to check that required props are supplied\n  _checkRequiredProp(propertyName, condition) {\n    const value = this.props[propertyName];\n    if (value === undefined) {\n      throw new Error(`Property ${propertyName} undefined in layer ${this}`);\n    }\n    if (condition && !condition(value)) {\n      throw new Error(`Bad property ${propertyName} in layer ${this}`);\n    }\n  }\n\n  _updateBaseUniforms() {\n    const uniforms = {\n      // apply gamma to opacity to make it visually \"linear\"\n      opacity: Math.pow(this.props.opacity, 1 / 2.2),\n      ONE: 1.0\n    };\n    for (const model of this.getModels()) {\n      model.setUniforms(uniforms);\n    }\n\n    // TODO - set needsRedraw on the model(s)?\n    this.setNeedsRedraw();\n  }\n\n  _updateModuleSettings() {\n    const settings = {\n      pickingHighlightColor: this.props.highlightColor\n    };\n    for (const model of this.getModels()) {\n      model.updateModuleSettings(settings);\n    }\n  }\n\n  // DEPRECATED METHODS\n\n  // Updates selected state members and marks the object for redraw\n  setUniforms(uniformMap) {\n    for (const model of this.getModels()) {\n      model.setUniforms(uniformMap);\n    }\n\n    // TODO - set needsRedraw on the model(s)?\n    this.setNeedsRedraw();\n    log.deprecated('layer.setUniforms', 'model.setUniforms')();\n  }\n}\n\nLayer.layerName = 'Layer';\nLayer.defaultProps = defaultProps;\n"],"file":"layer.js"}