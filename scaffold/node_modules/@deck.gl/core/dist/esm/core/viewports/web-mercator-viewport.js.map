{"version":3,"sources":["../../../../src/core/viewports/web-mercator-viewport.js"],"names":["Viewport","lngLatToWorld","worldToLngLat","pixelsToWorld","getProjectionMatrix","getViewMatrix","fitBounds","vec2_add","vec2_negate","assert","ERR_ARGUMENT","WebMercatorViewport","opts","latitude","longitude","zoom","pitch","bearing","farZMultiplier","width","height","altitude","Math","max","projectionMatrix","viewMatrixUncentered","Object","assign","position","viewMatrix","focalDistance","metersToLngLatDelta","bind","lngLatDeltaToMeters","addMetersToLngLat","freeze","xyz","x","y","z","Number","isFinite","distanceScales","pixelsPerMeter","degreesPerPixel","deltaLng","deltaLat","length","deltaLngLatZ","deltaZ","pixelsPerDegree","metersPerPixel","deltaX","deltaY","lngLatZ","lng","lat","Z","lngLat","pos","fromLocation","pixelUnprojectionMatrix","toLocation","scale","translate","newCenter","center","getMapCenterByLngLatPosition","bounds","options","EPSILON","MAPBOX_LIMITS","xy","displayName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// View and Projection Matrix calculations for mapbox-js style\n// map view properties\nimport Viewport from './viewport';\n\nimport {\n  lngLatToWorld,\n  worldToLngLat,\n  pixelsToWorld,\n  getProjectionMatrix,\n  getViewMatrix,\n  fitBounds\n} from 'viewport-mercator-project';\n\n// TODO - import from viewport-mercator-project\n// import {fitBounds} from '../viewport-mercator-project/fit-bounds';\n\n// TODO - import from math.gl\n/* eslint-disable camelcase */\nimport vec2_add from 'gl-vec2/add';\nimport vec2_negate from 'gl-vec2/negate';\n\nimport assert from '../utils/assert';\n\nconst ERR_ARGUMENT = 'Illegal argument to WebMercatorViewport';\n\nexport default class WebMercatorViewport extends Viewport {\n  /**\n   * @classdesc\n   * Creates view/projection matrices from mercator params\n   * Note: The Viewport is immutable in the sense that it only has accessors.\n   * A new viewport instance should be created if any parameters have changed.\n   */\n  /* eslint-disable complexity, max-statements */\n  constructor(opts = {}) {\n    const {\n      latitude = 0,\n      longitude = 0,\n      zoom = 11,\n      pitch = 0,\n      bearing = 0,\n      farZMultiplier = 10\n    } = opts;\n\n    let {width, height, altitude = 1.5} = opts;\n\n    // Silently allow apps to send in 0,0 to facilitate isomorphic render etc\n    width = width || 1;\n    height = height || 1;\n\n    // Altitude - prevent division by 0\n    // TODO - just throw an Error instead?\n    altitude = Math.max(0.75, altitude);\n\n    const projectionMatrix = getProjectionMatrix({\n      width,\n      height,\n      pitch,\n      altitude,\n      farZMultiplier\n    });\n\n    // The uncentered matrix allows us two move the center addition to the\n    // shader (cheap) which gives a coordinate system that has its center in\n    // the layer's center position. This makes rotations and other modelMatrx\n    // transforms much more useful.\n    const viewMatrixUncentered = getViewMatrix({\n      height,\n      pitch,\n      bearing,\n      altitude\n    });\n\n    super(\n      Object.assign({}, opts, {\n        // x, y, position, ...\n        // TODO / hack - prevent vertical offsets if not FirstPersonViewport\n        position: opts.position && [opts.position[0], opts.position[1], 0],\n        width,\n        height,\n        viewMatrix: viewMatrixUncentered,\n        longitude,\n        latitude,\n        zoom,\n        projectionMatrix,\n        focalDistance: 1 // Viewport is already carefully set up to \"focus\" on ground\n      })\n    );\n\n    // Save parameters\n    this.latitude = latitude;\n    this.longitude = longitude;\n    this.zoom = zoom;\n    this.pitch = pitch;\n    this.bearing = bearing;\n    this.altitude = altitude;\n\n    // Bind methods\n    this.metersToLngLatDelta = this.metersToLngLatDelta.bind(this);\n    this.lngLatDeltaToMeters = this.lngLatDeltaToMeters.bind(this);\n    this.addMetersToLngLat = this.addMetersToLngLat.bind(this);\n\n    Object.freeze(this);\n  }\n  /* eslint-enable complexity, max-statements */\n\n  /**\n   * Converts a meter offset to a lnglat offset\n   *\n   * Note: Uses simple linear approximation around the viewport center\n   * Error increases with size of offset (roughly 1% per 100km)\n   *\n   * @param {[Number,Number]|[Number,Number,Number]) xyz - array of meter deltas\n   * @return {[Number,Number]|[Number,Number,Number]) - array of [lng,lat,z] deltas\n   */\n  metersToLngLatDelta(xyz) {\n    const [x, y, z = 0] = xyz;\n    assert(Number.isFinite(x) && Number.isFinite(y) && Number.isFinite(z), ERR_ARGUMENT);\n    const {pixelsPerMeter, degreesPerPixel} = this.distanceScales;\n    const deltaLng = x * pixelsPerMeter[0] * degreesPerPixel[0];\n    const deltaLat = y * pixelsPerMeter[1] * degreesPerPixel[1];\n    return xyz.length === 2 ? [deltaLng, deltaLat] : [deltaLng, deltaLat, z];\n  }\n\n  /**\n   * Converts a lnglat offset to a meter offset\n   *\n   * Note: Uses simple linear approximation around the viewport center\n   * Error increases with size of offset (roughly 1% per 100km)\n   *\n   * @param {[Number,Number]|[Number,Number,Number]) deltaLngLatZ - array of [lng,lat,z] deltas\n   * @return {[Number,Number]|[Number,Number,Number]) - array of meter deltas\n   */\n  lngLatDeltaToMeters(deltaLngLatZ) {\n    const [deltaLng, deltaLat, deltaZ = 0] = deltaLngLatZ;\n    assert(\n      Number.isFinite(deltaLng) && Number.isFinite(deltaLat) && Number.isFinite(deltaZ),\n      ERR_ARGUMENT\n    );\n    const {pixelsPerDegree, metersPerPixel} = this.distanceScales;\n    const deltaX = deltaLng * pixelsPerDegree[0] * metersPerPixel[0];\n    const deltaY = deltaLat * pixelsPerDegree[1] * metersPerPixel[1];\n    return deltaLngLatZ.length === 2 ? [deltaX, deltaY] : [deltaX, deltaY, deltaZ];\n  }\n\n  /**\n   * Add a meter delta to a base lnglat coordinate, returning a new lnglat array\n   *\n   * Note: Uses simple linear approximation around the viewport center\n   * Error increases with size of offset (roughly 1% per 100km)\n   *\n   * @param {[Number,Number]|[Number,Number,Number]) lngLatZ - base coordinate\n   * @param {[Number,Number]|[Number,Number,Number]) xyz - array of meter deltas\n   * @return {[Number,Number]|[Number,Number,Number]) array of [lng,lat,z] deltas\n   */\n  addMetersToLngLat(lngLatZ, xyz) {\n    const [lng, lat, Z = 0] = lngLatZ;\n    const [deltaLng, deltaLat, deltaZ = 0] = this.metersToLngLatDelta(xyz);\n    return lngLatZ.length === 2\n      ? [lng + deltaLng, lat + deltaLat]\n      : [lng + deltaLng, lat + deltaLat, Z + deltaZ];\n  }\n\n  /**\n   * Get the map center that place a given [lng, lat] coordinate at screen\n   * point [x, y]\n   *\n   * @param {Array} lngLat - [lng,lat] coordinates\n   *   Specifies a point on the sphere.\n   * @param {Array} pos - [x,y] coordinates\n   *   Specifies a point on the screen.\n   * @return {Array} [lng,lat] new map center.\n   */\n  getMapCenterByLngLatPosition({lngLat, pos}) {\n    const fromLocation = pixelsToWorld(pos, this.pixelUnprojectionMatrix);\n    const toLocation = lngLatToWorld(lngLat, this.scale);\n\n    const translate = vec2_add([], toLocation, vec2_negate([], fromLocation));\n    const newCenter = vec2_add([], this.center, translate);\n\n    return worldToLngLat(newCenter, this.scale);\n  }\n\n  // Legacy method name\n  getLocationAtPoint({lngLat, pos}) {\n    return this.getMapCenterByLngLatPosition({lngLat, pos});\n  }\n\n  /**\n   * Returns a new viewport that fit around the given rectangle.\n   * Only supports non-perspective mode.\n   * @param {Array} bounds - [[lon, lat], [lon, lat]]\n   * @param {Number} [options.padding] - The amount of padding in pixels to add to the given bounds.\n   * @param {Array} [options.offset] - The center of the given bounds relative to the map's center,\n   *    [x, y] measured in pixels.\n   * @returns {WebMercatorViewport}\n   */\n  fitBounds(bounds, options = {}) {\n    const {width, height} = this;\n    const {longitude, latitude, zoom} = fitBounds(Object.assign({width, height, bounds}, options));\n    return new WebMercatorViewport({width, height, longitude, latitude, zoom});\n  }\n\n  // TODO - should support user supplied constraints\n  isMapSynched() {\n    const EPSILON = 0.000001;\n    const MAPBOX_LIMITS = {\n      pitch: 60,\n      zoom: 40\n    };\n\n    const {pitch, zoom} = this;\n\n    return pitch <= MAPBOX_LIMITS.pitch + EPSILON && zoom <= MAPBOX_LIMITS.zoom + EPSILON;\n  }\n\n  // INTERNAL METHODS\n\n  // Project [lng,lat] on sphere onto [x,y] on 512*512 Mercator Zoom 0 tile.\n  _projectFlat(lngLat, scale = this.scale) {\n    return lngLatToWorld(lngLat, scale);\n  }\n\n  // Unproject world point [x,y] on map onto {lat, lon} on sphere\n  _unprojectFlat(xy, scale = this.scale) {\n    return worldToLngLat(xy, scale);\n  }\n}\n\nWebMercatorViewport.displayName = 'WebMercatorViewport';\n"],"file":"web-mercator-viewport.js"}