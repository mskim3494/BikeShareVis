{"version":3,"sources":["../../../../src/core-layers/point-cloud-layer/point-cloud-layer.js"],"names":["Layer","experimental","fp64LowPart","enable64bitSupport","GL","Model","Geometry","vs","fs","DEFAULT_COLOR","defaultProps","radiusPixels","fp64","getPosition","x","position","getNormal","normal","getColor","color","lightSettings","PointCloudLayer","id","projectModule","props","modules","state","attributeManager","addInstanced","instancePositions","size","transition","accessor","update","calculateInstancePositions","instancePositions64xyLow","calculateInstancePositions64xyLow","instanceNormals","defaultValue","calculateInstanceNormals","instanceColors","type","UNSIGNED_BYTE","calculateInstanceColors","oldProps","changeFlags","gl","context","model","delete","setState","_getModel","invalidateAll","uniforms","render","Object","assign","positions","i","angle","Math","PI","push","cos","sin","getShaders","geometry","drawMode","TRIANGLES","attributes","Float32Array","isInstanced","shaderCache","attribute","data","value","point","isFP64","isGeneric","isNaN","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, experimental} from '../../core';\nconst {fp64LowPart, enable64bitSupport} = experimental;\nimport {GL, Model, Geometry} from 'luma.gl';\n\nimport vs from './point-cloud-layer-vertex.glsl';\nimport fs from './point-cloud-layer-fragment.glsl';\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n\nconst defaultProps = {\n  radiusPixels: 10, //  point radius in pixels\n  fp64: false,\n\n  getPosition: x => x.position,\n  getNormal: x => x.normal,\n  getColor: x => x.color || DEFAULT_COLOR,\n\n  lightSettings: {}\n};\n\nexport default class PointCloudLayer extends Layer {\n  getShaders(id) {\n    const projectModule = enable64bitSupport(this.props) ? 'project64' : 'project32';\n    return {vs, fs, modules: [projectModule, 'lighting', 'picking']};\n  }\n\n  initializeState() {\n    /* eslint-disable max-len */\n    this.state.attributeManager.addInstanced({\n      instancePositions: {\n        size: 3,\n        transition: true,\n        accessor: 'getPosition',\n        update: this.calculateInstancePositions\n      },\n      instancePositions64xyLow: {\n        size: 2,\n        accessor: 'getPosition',\n        update: this.calculateInstancePositions64xyLow\n      },\n      instanceNormals: {\n        size: 3,\n        transition: true,\n        accessor: 'getNormal',\n        defaultValue: 1,\n        update: this.calculateInstanceNormals\n      },\n      instanceColors: {\n        size: 4,\n        type: GL.UNSIGNED_BYTE,\n        transition: true,\n        accessor: 'getColor',\n        update: this.calculateInstanceColors\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n    if (props.fp64 !== oldProps.fp64) {\n      const {gl} = this.context;\n      if (this.state.model) {\n        this.state.model.delete();\n      }\n      this.setState({model: this._getModel(gl)});\n      this.state.attributeManager.invalidateAll();\n    }\n  }\n\n  draw({uniforms}) {\n    const {radiusPixels} = this.props;\n    this.state.model.render(\n      Object.assign({}, uniforms, {\n        radiusPixels\n      })\n    );\n  }\n\n  _getModel(gl) {\n    // a triangle that minimally cover the unit circle\n    const positions = [];\n    for (let i = 0; i < 3; i++) {\n      const angle = i / 3 * Math.PI * 2;\n      positions.push(Math.cos(angle) * 2, Math.sin(angle) * 2, 0);\n    }\n\n    return new Model(\n      gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: GL.TRIANGLES,\n          attributes: {\n            positions: new Float32Array(positions)\n          }\n        }),\n        isInstanced: true,\n        shaderCache: this.context.shaderCache\n      })\n    );\n  }\n\n  calculateInstancePositions(attribute) {\n    const {data, getPosition} = this.props;\n    const {value} = attribute;\n    let i = 0;\n    for (const point of data) {\n      const position = getPosition(point);\n      value[i++] = position[0];\n      value[i++] = position[1];\n      value[i++] = position[2] || 0;\n    }\n  }\n\n  calculateInstancePositions64xyLow(attribute) {\n    const isFP64 = enable64bitSupport(this.props);\n    attribute.isGeneric = !isFP64;\n\n    if (!isFP64) {\n      attribute.value = new Float32Array(2);\n      return;\n    }\n\n    const {data, getPosition} = this.props;\n    const {value} = attribute;\n    let i = 0;\n    for (const point of data) {\n      const position = getPosition(point);\n      value[i++] = fp64LowPart(position[0]);\n      value[i++] = fp64LowPart(position[1]);\n    }\n  }\n\n  calculateInstanceNormals(attribute) {\n    const {data, getNormal} = this.props;\n    const {value} = attribute;\n    let i = 0;\n    for (const point of data) {\n      const normal = getNormal(point);\n      value[i++] = normal[0];\n      value[i++] = normal[1];\n      value[i++] = normal[2];\n    }\n  }\n\n  calculateInstanceColors(attribute) {\n    const {data, getColor} = this.props;\n    const {value} = attribute;\n    let i = 0;\n    for (const point of data) {\n      const color = getColor(point);\n      value[i++] = color[0];\n      value[i++] = color[1];\n      value[i++] = color[2];\n      value[i++] = isNaN(color[3]) ? 255 : color[3];\n    }\n  }\n}\n\nPointCloudLayer.layerName = 'PointCloudLayer';\nPointCloudLayer.defaultProps = defaultProps;\n"],"file":"point-cloud-layer.js"}