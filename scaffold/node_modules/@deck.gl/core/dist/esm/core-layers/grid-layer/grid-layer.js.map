{"version":3,"sources":["../../../../src/core-layers/grid-layer/grid-layer.js"],"names":["CompositeLayer","experimental","BinSorter","defaultColorRange","getQuantizeScale","getLinearScale","GridCellLayer","pointToDensityGridData","nop","defaultProps","colorDomain","colorRange","getColorValue","points","length","lowerPercentile","type","min","max","value","upperPercentile","onSetColorDomain","elevationDomain","elevationRange","getElevationValue","elevationLowerPercentile","elevationUpperPercentile","elevationScale","onSetElevationDomain","cellSize","coverage","getPosition","x","position","extruded","fp64","lightSettings","GridLayer","state","layerData","sortedColorBins","sortedElevationBins","colorValueDomain","elevationValueDomain","colorScaleFunc","elevationScaleFunc","dimensionUpdaters","getDimensionUpdaters","oldProps","props","changeFlags","dimensionChanges","getDimensionChanges","dataChanged","needsReProjectPoints","getLayerData","forEach","f","apply","getColor","id","triggers","updater","getSortedColorBins","getColorValueDomain","getColorScale","getElevation","getSortedElevationBins","getElevationValueDomain","getElevationScale","updaters","dimensionKey","needUpdate","find","item","some","t","push","info","isPicked","picked","index","object","cell","colorValue","binMap","elevationValue","Object","assign","Boolean","updateTriggers","step","prop","data","setState","getSortedBins","getValueRange","cv","isColorValueInDomain","color","Number","isFinite","ev","isElevationValueInDomain","_onGetSublayerColor","bind","_onGetSublayerElevation","getUpdateTriggers","SubLayerClass","getSubLayerClass","getSubLayerProps","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {CompositeLayer, experimental} from '../../core';\nconst {BinSorter, defaultColorRange, getQuantizeScale, getLinearScale} = experimental;\n\nimport GridCellLayer from '../grid-cell-layer/grid-cell-layer';\n\nimport {pointToDensityGridData} from './grid-aggregator';\n\nfunction nop() {}\n\nconst defaultProps = {\n  // color\n  colorDomain: null,\n  colorRange: defaultColorRange,\n  getColorValue: points => points.length,\n  lowerPercentile: {type: 'number', min: 0, max: 100, value: 0},\n  upperPercentile: {type: 'number', min: 0, max: 100, value: 100},\n  onSetColorDomain: nop,\n\n  // elevation\n  elevationDomain: null,\n  elevationRange: [0, 1000],\n  getElevationValue: points => points.length,\n  elevationLowerPercentile: {type: 'number', min: 0, max: 100, value: 0},\n  elevationUpperPercentile: {type: 'number', min: 0, max: 100, value: 100},\n  elevationScale: 1,\n  onSetElevationDomain: nop,\n\n  // grid\n  cellSize: {type: 'number', min: 0, max: 1000, value: 1000},\n  coverage: {type: 'number', min: 0, max: 1, value: 1},\n  getPosition: x => x.position,\n  extruded: false,\n  fp64: false,\n\n  // Optional settings for 'lighting' shader module\n  lightSettings: {}\n};\n\nexport default class GridLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      layerData: [],\n      sortedColorBins: null,\n      sortedElevationBins: null,\n      colorValueDomain: null,\n      elevationValueDomain: null,\n      colorScaleFunc: nop,\n      elevationScaleFunc: nop,\n      dimensionUpdaters: this.getDimensionUpdaters()\n    };\n  }\n\n  updateState({oldProps, props, changeFlags}) {\n    const dimensionChanges = this.getDimensionChanges(oldProps, props);\n\n    if (changeFlags.dataChanged || this.needsReProjectPoints(oldProps, props)) {\n      // project data into hexagons, and get sortedBins\n      this.getLayerData();\n    } else if (dimensionChanges) {\n      dimensionChanges.forEach(f => typeof f === 'function' && f.apply(this));\n    }\n  }\n\n  needsReProjectPoints(oldProps, props) {\n    return oldProps.cellSize !== props.cellSize;\n  }\n\n  getDimensionUpdaters() {\n    // dimension updaters are sequential,\n    // if the first one needs to be called, the 2nd and 3rd one will automatically\n    // be called. e.g. if ColorValue needs to be updated, getColorValueDomain and getColorScale\n    // will automatically be called\n    return {\n      getColor: [\n        {\n          id: 'value',\n          triggers: ['getColorValue'],\n          updater: this.getSortedColorBins\n        },\n        {\n          id: 'domain',\n          triggers: ['lowerPercentile', 'upperPercentile'],\n          updater: this.getColorValueDomain\n        },\n        {\n          id: 'scaleFunc',\n          triggers: ['colorDomain', 'colorRange'],\n          updater: this.getColorScale\n        }\n      ],\n      getElevation: [\n        {\n          id: 'value',\n          triggers: ['getElevationValue'],\n          updater: this.getSortedElevationBins\n        },\n        {\n          id: 'domain',\n          triggers: ['elevationLowerPercentile', 'elevationUpperPercentile'],\n          updater: this.getElevationValueDomain\n        },\n        {\n          id: 'scaleFunc',\n          triggers: ['elevationDomain', 'elevationRange'],\n          updater: this.getElevationScale\n        }\n      ]\n    };\n  }\n\n  getDimensionChanges(oldProps, props) {\n    const {dimensionUpdaters} = this.state;\n    const updaters = [];\n\n    // get dimension to be updated\n    for (const dimensionKey in dimensionUpdaters) {\n      // return the first triggered updater for each dimension\n      const needUpdate = dimensionUpdaters[dimensionKey].find(item =>\n        item.triggers.some(t => oldProps[t] !== props[t])\n      );\n\n      if (needUpdate) {\n        updaters.push(needUpdate.updater);\n      }\n    }\n\n    return updaters.length ? updaters : null;\n  }\n\n  getPickingInfo({info}) {\n    const {sortedColorBins, sortedElevationBins} = this.state;\n\n    const isPicked = info.picked && info.index > -1;\n    let object = null;\n\n    if (isPicked) {\n      const cell = this.state.layerData[info.index];\n\n      const colorValue =\n        sortedColorBins.binMap[cell.index] && sortedColorBins.binMap[cell.index].value;\n      const elevationValue =\n        sortedElevationBins.binMap[cell.index] && sortedElevationBins.binMap[cell.index].value;\n\n      object = Object.assign(\n        {\n          colorValue,\n          elevationValue\n        },\n        cell\n      );\n    }\n\n    // add bin colorValue and elevationValue to info\n    return Object.assign(info, {\n      picked: Boolean(object),\n      // override object with picked cell\n      object\n    });\n  }\n\n  getUpdateTriggers() {\n    const {dimensionUpdaters} = this.state;\n\n    // merge all dimension triggers\n    const updateTriggers = {};\n\n    for (const dimensionKey in dimensionUpdaters) {\n      updateTriggers[dimensionKey] = {};\n\n      for (const step of dimensionUpdaters[dimensionKey]) {\n        step.triggers.forEach(prop => {\n          updateTriggers[dimensionKey][prop] = this.props[prop];\n        });\n      }\n    }\n\n    return updateTriggers;\n  }\n\n  getLayerData() {\n    const {data, cellSize, getPosition} = this.props;\n    const {layerData} = pointToDensityGridData(data, cellSize, getPosition);\n\n    this.setState({layerData});\n    this.getSortedBins();\n  }\n\n  getValueDomain() {\n    this.getColorValueDomain();\n    this.getElevationValueDomain();\n  }\n\n  getSortedBins() {\n    this.getSortedColorBins();\n    this.getSortedElevationBins();\n  }\n\n  getSortedColorBins() {\n    const {getColorValue} = this.props;\n    const sortedColorBins = new BinSorter(this.state.layerData || [], getColorValue);\n\n    this.setState({sortedColorBins});\n    this.getColorValueDomain();\n  }\n\n  getSortedElevationBins() {\n    const {getElevationValue} = this.props;\n    const sortedElevationBins = new BinSorter(this.state.layerData || [], getElevationValue);\n    this.setState({sortedElevationBins});\n    this.getElevationValueDomain();\n  }\n\n  getColorValueDomain() {\n    const {lowerPercentile, upperPercentile, onSetColorDomain} = this.props;\n\n    this.state.colorValueDomain = this.state.sortedColorBins.getValueRange([\n      lowerPercentile,\n      upperPercentile\n    ]);\n\n    if (typeof onSetColorDomain === 'function') {\n      onSetColorDomain(this.state.colorValueDomain);\n    }\n\n    this.getColorScale();\n  }\n\n  getElevationValueDomain() {\n    const {elevationLowerPercentile, elevationUpperPercentile, onSetElevationDomain} = this.props;\n\n    this.state.elevationValueDomain = this.state.sortedElevationBins.getValueRange([\n      elevationLowerPercentile,\n      elevationUpperPercentile\n    ]);\n\n    if (typeof onSetElevationDomain === 'function') {\n      onSetElevationDomain(this.state.elevationValueDomain);\n    }\n\n    this.getElevationScale();\n  }\n\n  getColorScale() {\n    const {colorRange} = this.props;\n    const colorDomain = this.props.colorDomain || this.state.colorValueDomain;\n\n    this.state.colorScaleFunc = getQuantizeScale(colorDomain, colorRange);\n  }\n\n  getElevationScale() {\n    const {elevationRange} = this.props;\n    const elevationDomain = this.props.elevationDomain || this.state.elevationValueDomain;\n\n    this.state.elevationScaleFunc = getLinearScale(elevationDomain, elevationRange);\n  }\n\n  _onGetSublayerColor(cell) {\n    const {sortedColorBins, colorScaleFunc, colorValueDomain} = this.state;\n\n    const cv = sortedColorBins.binMap[cell.index] && sortedColorBins.binMap[cell.index].value;\n    const colorDomain = this.props.colorDomain || colorValueDomain;\n\n    const isColorValueInDomain = cv >= colorDomain[0] && cv <= colorDomain[colorDomain.length - 1];\n\n    // if cell value is outside domain, set alpha to 0\n    const color = isColorValueInDomain ? colorScaleFunc(cv) : [0, 0, 0, 0];\n\n    // add alpha to color if not defined in colorRange\n    color[3] = Number.isFinite(color[3]) ? color[3] : 255;\n\n    return color;\n  }\n\n  _onGetSublayerElevation(cell) {\n    const {sortedElevationBins, elevationScaleFunc, elevationValueDomain} = this.state;\n    const ev =\n      sortedElevationBins.binMap[cell.index] && sortedElevationBins.binMap[cell.index].value;\n\n    const elevationDomain = this.props.elevationDomain || elevationValueDomain;\n\n    const isElevationValueInDomain =\n      ev >= elevationDomain[0] && ev <= elevationDomain[elevationDomain.length - 1];\n\n    // if cell value is outside domain, set elevation to -1\n    return isElevationValueInDomain ? elevationScaleFunc(ev) : -1;\n  }\n\n  // for subclassing, override this method to return\n  // customized sub layer props\n  getSubLayerProps() {\n    const {elevationScale, fp64, extruded, cellSize, coverage, lightSettings} = this.props;\n\n    // return props to the sublayer constructor\n    return super.getSubLayerProps({\n      id: 'grid-cell',\n      data: this.state.layerData,\n\n      fp64,\n      cellSize,\n      coverage,\n      lightSettings,\n      elevationScale,\n      extruded,\n\n      getColor: this._onGetSublayerColor.bind(this),\n      getElevation: this._onGetSublayerElevation.bind(this),\n      updateTriggers: this.getUpdateTriggers()\n    });\n  }\n\n  // for subclassing, override this method to return\n  // customized sub layer class\n  getSubLayerClass() {\n    return GridCellLayer;\n  }\n\n  renderLayers() {\n    const SubLayerClass = this.getSubLayerClass();\n\n    return new SubLayerClass(this.getSubLayerProps());\n  }\n}\n\nGridLayer.layerName = 'GridLayer';\nGridLayer.defaultProps = defaultProps;\n"],"file":"grid-layer.js"}