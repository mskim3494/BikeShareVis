{"version":3,"sources":["../../../../src/core-layers/solid-polygon-layer/solid-polygon-layer.js"],"names":["Layer","experimental","enable64bitSupport","get","GL","Model","Geometry","hasFeature","FEATURES","PolygonTesselator","vs","fs","defaultLineColor","defaultFillColor","defaultProps","filled","extruded","wireframe","fp64","elevationScale","getPolygon","f","getElevation","getFillColor","getLineColor","lightSettings","SIDE_FILL_POSITIONS","Float32Array","SIDE_WIRE_POSITIONS","ATTRIBUTE_MAPS","TOP","indices","instanced","positions","positions64xyLow","elevations","fillColors","name","pickingColors","SIDE","nextPositions","nextPositions64xyLow","WIRE","lineColors","SolidPolygonLayer","projectModule","props","modules","gl","context","setState","numInstances","IndexType","ELEMENT_INDEX_UINT32","Uint32Array","Uint16Array","attributeManager","getAttributeManager","noAlloc","add","size","isIndexed","update","calculateIndices","accessor","calculatePositions","calculatePositionsLow","calculateNextPositions","calculateNextPositionsLow","calculateElevations","alias","type","UNSIGNED_BYTE","calculateFillColors","calculateLineColors","calculatePickingColors","uniforms","renderUniforms","Object","assign","state","models","forEach","model","render","updateParams","updateGeometry","oldProps","regenerateModels","delete","modelsChanged","_getModels","invalidate","changeFlags","geometryConfigChanged","dataChanged","updateTriggersChanged","all","polygons","data","map","polygonTesselator","invalidateAll","updatePositions","buffers","ignoreUnknownAttributes","_updateAttributes","getAttributes","changedAttributes","getChangedAttributes","clearChangedFlags","attributes","modelsByName","modelName","setVertexCount","numVertex","setInstanceCount","attributeMap","newAttributes","attributeName","attribute","attributeOverride","setAttributes","id","getShaders","geometry","drawMode","TRIANGLES","vertexPositions","isGeneric","value","isSideVertex","vertexCount","shaderCache","TRIANGLE_STRIP","isInstanced","LINE_STRIP","filter","Boolean","target","ELEMENT_ARRAY_BUFFER","length","isFP64","polygonIndex","colors","key","getColor","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, experimental} from '../../core';\nconst {enable64bitSupport, get} = experimental;\nimport {GL, Model, Geometry, hasFeature, FEATURES} from 'luma.gl';\n\n// Polygon geometry generation is managed by the polygon tesselator\nimport {PolygonTesselator} from './polygon-tesselator';\n\nimport vs from './solid-polygon-layer-vertex.glsl';\nimport fs from './solid-polygon-layer-fragment.glsl';\n\nconst defaultLineColor = [0x0, 0x0, 0x0, 0xff];\nconst defaultFillColor = [0x0, 0x0, 0x0, 0xff];\n\nconst defaultProps = {\n  filled: true,\n  // Whether to extrude\n  extruded: false,\n  // Whether to draw a GL.LINES wireframe of the polygon\n  wireframe: false,\n  fp64: false,\n\n  // elevation multiplier\n  elevationScale: 1,\n\n  // Accessor for polygon geometry\n  getPolygon: f => get(f, 'polygon') || get(f, 'geometry.coordinates'),\n  // Accessor for extrusion height\n  getElevation: f => get(f, 'elevation') || get(f, 'properties.height') || 0,\n  // Accessor for colors\n  getFillColor: f => get(f, 'fillColor') || get(f, 'properties.color') || defaultFillColor,\n  getLineColor: f => get(f, 'lineColor') || get(f, 'properties.color') || defaultLineColor,\n\n  // Optional settings for 'lighting' shader module\n  lightSettings: {}\n};\n\n// Side model attributes\nconst SIDE_FILL_POSITIONS = new Float32Array([\n  // top left corner\n  0,\n  1,\n  // bottom left corner\n  0,\n  0,\n  // top right corner\n  1,\n  1,\n  // bottom right corner\n  1,\n  0\n]);\nconst SIDE_WIRE_POSITIONS = new Float32Array([\n  // top right corner\n  1,\n  1,\n  // top left corner\n  0,\n  1,\n  // bottom left corner\n  0,\n  0,\n  // bottom right corner\n  1,\n  0\n]);\n\n// Model types\nconst ATTRIBUTE_MAPS = {\n  TOP: {\n    indices: {instanced: 0},\n    positions: {instanced: 0},\n    positions64xyLow: {instanced: 0},\n    elevations: {instanced: 0},\n    fillColors: {name: 'colors', instanced: 0},\n    pickingColors: {instanced: 0}\n  },\n  SIDE: {\n    positions: {instanced: 1},\n    positions64xyLow: {instanced: 1},\n    nextPositions: {instanced: 1},\n    nextPositions64xyLow: {instanced: 1},\n    elevations: {instanced: 1},\n    fillColors: {name: 'colors', instanced: 1},\n    pickingColors: {instanced: 1}\n  },\n  WIRE: {\n    positions: {instanced: 1},\n    positions64xyLow: {instanced: 1},\n    nextPositions: {instanced: 1},\n    nextPositions64xyLow: {instanced: 1},\n    elevations: {instanced: 1},\n    lineColors: {name: 'colors', instanced: 1},\n    pickingColors: {instanced: 1}\n  }\n};\n\nexport default class SolidPolygonLayer extends Layer {\n  getShaders() {\n    const projectModule = enable64bitSupport(this.props) ? 'project64' : 'project32';\n    return {vs, fs, modules: [projectModule, 'lighting', 'picking']};\n  }\n\n  initializeState() {\n    const {gl} = this.context;\n    this.setState({\n      numInstances: 0,\n      IndexType: hasFeature(gl, FEATURES.ELEMENT_INDEX_UINT32) ? Uint32Array : Uint16Array\n    });\n\n    const attributeManager = this.getAttributeManager();\n    const noAlloc = true;\n    /* eslint-disable max-len */\n    attributeManager.add({\n      indices: {size: 1, isIndexed: true, update: this.calculateIndices, noAlloc},\n      positions: {\n        size: 3,\n        accessor: ['extruded', 'fp64'],\n        update: this.calculatePositions,\n        noAlloc\n      },\n      positions64xyLow: {size: 2, accessor: 'fp64', update: this.calculatePositionsLow},\n      nextPositions: {\n        size: 3,\n        accessor: ['extruded', 'fp64'],\n        update: this.calculateNextPositions,\n        noAlloc\n      },\n      nextPositions64xyLow: {size: 2, accessor: 'fp64', update: this.calculateNextPositionsLow},\n      elevations: {\n        size: 1,\n        accessor: ['extruded', 'getElevation'],\n        update: this.calculateElevations,\n        noAlloc\n      },\n      fillColors: {\n        alias: 'colors',\n        size: 4,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getFillColor',\n        update: this.calculateFillColors,\n        noAlloc\n      },\n      lineColors: {\n        alias: 'colors',\n        size: 4,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getLineColor',\n        update: this.calculateLineColors,\n        noAlloc\n      },\n      pickingColors: {size: 3, type: GL.UNSIGNED_BYTE, update: this.calculatePickingColors, noAlloc}\n    });\n    /* eslint-enable max-len */\n  }\n\n  draw({uniforms}) {\n    const {extruded, elevationScale} = this.props;\n\n    const renderUniforms = Object.assign({}, uniforms, {\n      extruded: extruded ? 1.0 : 0.0,\n      elevationScale\n    });\n\n    this.state.models.forEach(model => {\n      model.render(renderUniforms);\n    });\n  }\n\n  updateState(updateParams) {\n    super.updateState(updateParams);\n\n    this.updateGeometry(updateParams);\n\n    const {props, oldProps} = updateParams;\n\n    const regenerateModels =\n      props.fp64 !== oldProps.fp64 ||\n      props.filled !== oldProps.filled ||\n      props.extruded !== oldProps.extruded ||\n      props.wireframe !== oldProps.wireframe;\n\n    if (regenerateModels) {\n      if (this.state.models) {\n        this.state.models.forEach(model => model.delete());\n      }\n\n      this.setState(\n        Object.assign(\n          {\n            // Set a flag to set attributes to new models\n            modelsChanged: true\n          },\n          this._getModels(this.context.gl)\n        )\n      );\n    }\n\n    if (props.extruded !== oldProps.extruded) {\n      this.state.attributeManager.invalidate('extruded');\n    }\n    if (props.fp64 !== oldProps.fp64) {\n      this.state.attributeManager.invalidate('fp64');\n    }\n  }\n\n  updateGeometry({props, oldProps, changeFlags}) {\n    const geometryConfigChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPolygon));\n\n    // When the geometry config  or the data is changed,\n    // tessellator needs to be invoked\n    if (geometryConfigChanged) {\n      // TODO - avoid creating a temporary array here: let the tesselator iterate\n      const polygons = props.data.map(props.getPolygon);\n\n      this.setState({\n        polygonTesselator: new PolygonTesselator({polygons, IndexType: this.state.IndexType})\n      });\n\n      this.state.attributeManager.invalidateAll();\n    }\n\n    if (\n      geometryConfigChanged ||\n      props.extruded !== oldProps.extruded ||\n      props.fp64 !== oldProps.fp64\n    ) {\n      this.state.polygonTesselator.updatePositions({\n        fp64: props.fp64,\n        extruded: props.extruded\n      });\n    }\n  }\n\n  updateAttributes(props) {\n    const {attributeManager, modelsChanged} = this.state;\n\n    // Figure out data length\n    attributeManager.update({\n      data: props.data,\n      numInstances: 0,\n      props,\n      buffers: props,\n      context: this,\n      // Don't worry about non-attribute props\n      ignoreUnknownAttributes: true\n    });\n\n    if (modelsChanged) {\n      this._updateAttributes(attributeManager.getAttributes());\n      // clear the flag\n      this.setState({modelsChanged: false});\n    } else {\n      const changedAttributes = attributeManager.getChangedAttributes({clearChangedFlags: true});\n      this._updateAttributes(changedAttributes);\n    }\n  }\n\n  _updateAttributes(attributes) {\n    const {modelsByName} = this.state;\n\n    for (const modelName in modelsByName) {\n      const model = modelsByName[modelName];\n\n      if (modelName === 'TOP') {\n        model.setVertexCount(this.state.numVertex);\n      } else {\n        model.setInstanceCount(this.state.numInstances);\n      }\n\n      const attributeMap = ATTRIBUTE_MAPS[modelName];\n      const newAttributes = {};\n      for (const attributeName in attributes) {\n        const attribute = attributes[attributeName];\n        const attributeOverride = attributeMap[attributeName];\n\n        if (attributeOverride) {\n          attribute.instanced = attributeOverride.instanced;\n          newAttributes[attributeOverride.name || attributeName] = attribute;\n        }\n      }\n      model.setAttributes(newAttributes);\n    }\n  }\n\n  _getModels(gl) {\n    const {id, filled, extruded, wireframe} = this.props;\n\n    const models = {};\n\n    if (filled) {\n      models.TOP = new Model(\n        gl,\n        Object.assign({}, this.getShaders(), {\n          id: `${id}-top`,\n          geometry: new Geometry({\n            drawMode: GL.TRIANGLES,\n            attributes: {\n              vertexPositions: {size: 2, isGeneric: true, value: new Float32Array([0, 1])},\n              nextPositions: {size: 3, isGeneric: true, value: new Float32Array(3)},\n              nextPositions64xyLow: {size: 2, isGeneric: true, value: new Float32Array(2)}\n            }\n          }),\n          uniforms: {\n            isSideVertex: 0\n          },\n          vertexCount: 0,\n          isIndexed: true,\n          shaderCache: this.context.shaderCache\n        })\n      );\n    }\n    if (filled && extruded) {\n      models.SIDE = new Model(\n        gl,\n        Object.assign({}, this.getShaders(), {\n          id: `${id}-side`,\n          geometry: new Geometry({\n            drawMode: GL.TRIANGLE_STRIP,\n            vertexCount: 4,\n            attributes: {\n              vertexPositions: {size: 2, value: SIDE_FILL_POSITIONS}\n            }\n          }),\n          uniforms: {\n            isSideVertex: 1\n          },\n          isInstanced: 1,\n          shaderCache: this.context.shaderCache\n        })\n      );\n    }\n    if (extruded && wireframe) {\n      models.WIRE = new Model(\n        gl,\n        Object.assign({}, this.getShaders(), {\n          id: `${id}-wire`,\n          geometry: new Geometry({\n            drawMode: GL.LINE_STRIP,\n            vertexCount: 4,\n            attributes: {\n              vertexPositions: {size: 2, value: SIDE_WIRE_POSITIONS}\n            }\n          }),\n          uniforms: {\n            isSideVertex: 1\n          },\n          isInstanced: 1,\n          shaderCache: this.context.shaderCache\n        })\n      );\n    }\n\n    return {\n      models: [models.WIRE, models.SIDE, models.TOP].filter(Boolean),\n      modelsByName: models\n    };\n  }\n\n  calculateIndices(attribute) {\n    attribute.value = this.state.polygonTesselator.indices();\n    attribute.target = GL.ELEMENT_ARRAY_BUFFER;\n    const numVertex = attribute.value.length / attribute.size;\n    this.setState({numVertex});\n  }\n\n  calculatePositions(attribute) {\n    attribute.value = this.state.polygonTesselator.positions();\n    const numInstances = attribute.value.length / attribute.size;\n    this.setState({numInstances});\n  }\n  calculatePositionsLow(attribute) {\n    const isFP64 = enable64bitSupport(this.props);\n    attribute.isGeneric = !isFP64;\n\n    if (!isFP64) {\n      attribute.value = new Float32Array(2);\n      return;\n    }\n\n    attribute.value = this.state.polygonTesselator.positions64xyLow();\n  }\n\n  calculateNextPositions(attribute) {\n    attribute.value = this.state.polygonTesselator.nextPositions();\n  }\n  calculateNextPositionsLow(attribute) {\n    const isFP64 = enable64bitSupport(this.props);\n    attribute.isGeneric = !isFP64;\n\n    if (!isFP64) {\n      attribute.value = new Float32Array(2);\n      return;\n    }\n\n    attribute.value = this.state.polygonTesselator.nextPositions64xyLow();\n  }\n\n  calculateElevations(attribute) {\n    if (this.props.extruded) {\n      attribute.isGeneric = false;\n      attribute.value = this.state.polygonTesselator.elevations({\n        getElevation: polygonIndex => this.props.getElevation(this.props.data[polygonIndex])\n      });\n    } else {\n      attribute.isGeneric = true;\n      attribute.value = new Float32Array(1);\n    }\n  }\n\n  calculateFillColors(attribute) {\n    attribute.value = this.state.polygonTesselator.colors({\n      key: 'fillColors',\n      getColor: polygonIndex => this.props.getFillColor(this.props.data[polygonIndex])\n    });\n  }\n  calculateLineColors(attribute) {\n    attribute.value = this.state.polygonTesselator.colors({\n      key: 'lineColors',\n      getColor: polygonIndex => this.props.getLineColor(this.props.data[polygonIndex])\n    });\n  }\n\n  // Override the default picking colors calculation\n  calculatePickingColors(attribute) {\n    attribute.value = this.state.polygonTesselator.pickingColors();\n  }\n}\n\nSolidPolygonLayer.layerName = 'SolidPolygonLayer';\nSolidPolygonLayer.defaultProps = defaultProps;\n"],"file":"solid-polygon-layer.js"}