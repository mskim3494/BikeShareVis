{"version":3,"sources":["../../../../src/core-layers/line-layer/line-layer.js"],"names":["Layer","experimental","fp64LowPart","enable64bitSupport","GL","Model","Geometry","vs","fs","DEFAULT_COLOR","defaultProps","strokeWidth","fp64","getSourcePosition","x","sourcePosition","getTargetPosition","targetPosition","getColor","color","LineLayer","projectModule","props","modules","attributeManager","getAttributeManager","addInstanced","instanceSourcePositions","size","transition","accessor","update","calculateInstanceSourcePositions","instanceTargetPositions","calculateInstanceTargetPositions","instanceSourceTargetPositions64xyLow","calculateInstanceSourceTargetPositions64xyLow","instanceColors","type","UNSIGNED_BYTE","calculateInstanceColors","oldProps","changeFlags","gl","context","state","model","delete","setState","_getModel","invalidateAll","uniforms","render","Object","assign","positions","getShaders","id","geometry","drawMode","TRIANGLE_STRIP","attributes","Float32Array","isInstanced","shaderCache","attribute","data","value","i","object","isNaN","isFP64","isGeneric","layerName"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAQA,KAAR,EAAeC,YAAf,QAAkC,YAAlC;IACOC,W,GAAmCD,Y,CAAnCC,W;IAAaC,kB,GAAsBF,Y,CAAtBE,kB;AACpB,SAAQC,EAAR,EAAYC,KAAZ,EAAmBC,QAAnB,QAAkC,SAAlC;AAEA,OAAOC,EAAP,MAAe,0BAAf;AACA,OAAOC,EAAP,MAAe,4BAAf;AAEA,IAAMC,gBAAgB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,GAAV,CAAtB;AAEA,IAAMC,eAAe;AACnBC,eAAa,CADM;AAEnBC,QAAM,KAFa;AAInBC,qBAAmB;AAAA,WAAKC,EAAEC,cAAP;AAAA,GAJA;AAKnBC,qBAAmB;AAAA,WAAKF,EAAEG,cAAP;AAAA,GALA;AAMnBC,YAAU;AAAA,WAAKJ,EAAEK,KAAF,IAAWV,aAAhB;AAAA;AANS,CAArB;;IASqBW,S;;;;;;;;;;;;;iCACN;AACX,UAAMC,gBAAgBlB,mBAAmB,KAAKmB,KAAxB,IAAiC,WAAjC,GAA+C,WAArE;AACA,aAAO;AAACf,cAAD;AAAKC,cAAL;AAASe,iBAAS,CAACF,aAAD,EAAgB,SAAhB;AAAlB,OAAP;AACD;;;sCAEiB;AAChB,UAAMG,mBAAmB,KAAKC,mBAAL,EAAzB;AAEA;;AACAD,uBAAiBE,YAAjB,CAA8B;AAC5BC,iCAAyB;AACvBC,gBAAM,CADiB;AAEvBC,sBAAY,IAFW;AAGvBC,oBAAU,mBAHa;AAIvBC,kBAAQ,KAAKC;AAJU,SADG;AAO5BC,iCAAyB;AACvBL,gBAAM,CADiB;AAEvBC,sBAAY,IAFW;AAGvBC,oBAAU,mBAHa;AAIvBC,kBAAQ,KAAKG;AAJU,SAPG;AAa5BC,8CAAsC;AACpCP,gBAAM,CAD8B;AAEpCE,oBAAU,CAAC,mBAAD,EAAsB,mBAAtB,CAF0B;AAGpCC,kBAAQ,KAAKK;AAHuB,SAbV;AAkB5BC,wBAAgB;AACdT,gBAAM,CADQ;AAEdU,gBAAMlC,GAAGmC,aAFK;AAGdV,sBAAY,IAHE;AAIdC,oBAAU,UAJI;AAKdC,kBAAQ,KAAKS;AALC;AAlBY,OAA9B;AA0BA;AACD;;;sCAE2C;AAAA,UAA/BlB,KAA+B,QAA/BA,KAA+B;AAAA,UAAxBmB,QAAwB,QAAxBA,QAAwB;AAAA,UAAdC,WAAc,QAAdA,WAAc;;AAC1C,wHAAkB;AAACpB,oBAAD;AAAQmB,0BAAR;AAAkBC;AAAlB,OAAlB;;AAEA,UAAIpB,MAAMV,IAAN,KAAe6B,SAAS7B,IAA5B,EAAkC;AAAA,YACzB+B,EADyB,GACnB,KAAKC,OADc,CACzBD,EADyB;;AAEhC,YAAI,KAAKE,KAAL,CAAWC,KAAf,EAAsB;AACpB,eAAKD,KAAL,CAAWC,KAAX,CAAiBC,MAAjB;AACD;;AACD,aAAKC,QAAL,CAAc;AAACF,iBAAO,KAAKG,SAAL,CAAeN,EAAf;AAAR,SAAd;AACA,aAAKE,KAAL,CAAWrB,gBAAX,CAA4B0B,aAA5B;AACD;AACF;;;gCAEgB;AAAA,UAAXC,QAAW,SAAXA,QAAW;AAAA,UACRxC,WADQ,GACO,KAAKW,KADZ,CACRX,WADQ;AAGf,WAAKkC,KAAL,CAAWC,KAAX,CAAiBM,MAAjB,CACEC,OAAOC,MAAP,CAAc,EAAd,EAAkBH,QAAlB,EAA4B;AAC1BxC;AAD0B,OAA5B,CADF;AAKD;;;8BAESgC,E,EAAI;AACZ;;;;;;;AAOA,UAAMY,YAAY,CAAC,CAAD,EAAI,CAAC,CAAL,EAAQ,CAAR,EAAW,CAAX,EAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAC,CAAxB,EAA2B,CAA3B,EAA8B,CAA9B,EAAiC,CAAjC,EAAoC,CAApC,CAAlB;AAEA,aAAO,IAAIlD,KAAJ,CACLsC,EADK,EAELU,OAAOC,MAAP,CAAc,EAAd,EAAkB,KAAKE,UAAL,EAAlB,EAAqC;AACnCC,YAAI,KAAKnC,KAAL,CAAWmC,EADoB;AAEnCC,kBAAU,IAAIpD,QAAJ,CAAa;AACrBqD,oBAAUvD,GAAGwD,cADQ;AAErBC,sBAAY;AACVN,uBAAW,IAAIO,YAAJ,CAAiBP,SAAjB;AADD;AAFS,SAAb,CAFyB;AAQnCQ,qBAAa,IARsB;AASnCC,qBAAa,KAAKpB,OAAL,CAAaoB;AATS,OAArC,CAFK,CAAP;AAcD;;;qDAEgCC,S,EAAW;AAAA,mBACR,KAAK3C,KADG;AAAA,UACnC4C,IADmC,UACnCA,IADmC;AAAA,UAC7BrD,iBAD6B,UAC7BA,iBAD6B;AAAA,UAEnCsD,KAFmC,GAEpBF,SAFoB,CAEnCE,KAFmC;AAAA,UAE5BvC,IAF4B,GAEpBqC,SAFoB,CAE5BrC,IAF4B;AAG1C,UAAIwC,IAAI,CAAR;AAH0C;AAAA;AAAA;;AAAA;AAI1C,6BAAqBF,IAArB,8HAA2B;AAAA,cAAhBG,MAAgB;AACzB,cAAMtD,iBAAiBF,kBAAkBwD,MAAlB,CAAvB;AACAF,gBAAMC,IAAI,CAAV,IAAerD,eAAe,CAAf,CAAf;AACAoD,gBAAMC,IAAI,CAAV,IAAerD,eAAe,CAAf,CAAf;AACAoD,gBAAMC,IAAI,CAAV,IAAeE,MAAMvD,eAAe,CAAf,CAAN,IAA2B,CAA3B,GAA+BA,eAAe,CAAf,CAA9C;AACAqD,eAAKxC,IAAL;AACD;AAVyC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAW3C;;;qDAEgCqC,S,EAAW;AAAA,oBACR,KAAK3C,KADG;AAAA,UACnC4C,IADmC,WACnCA,IADmC;AAAA,UAC7BlD,iBAD6B,WAC7BA,iBAD6B;AAAA,UAEnCmD,KAFmC,GAEpBF,SAFoB,CAEnCE,KAFmC;AAAA,UAE5BvC,IAF4B,GAEpBqC,SAFoB,CAE5BrC,IAF4B;AAG1C,UAAIwC,IAAI,CAAR;AAH0C;AAAA;AAAA;;AAAA;AAI1C,8BAAqBF,IAArB,mIAA2B;AAAA,cAAhBG,MAAgB;AACzB,cAAMpD,iBAAiBD,kBAAkBqD,MAAlB,CAAvB;AACAF,gBAAMC,IAAI,CAAV,IAAenD,eAAe,CAAf,CAAf;AACAkD,gBAAMC,IAAI,CAAV,IAAenD,eAAe,CAAf,CAAf;AACAkD,gBAAMC,IAAI,CAAV,IAAeE,MAAMrD,eAAe,CAAf,CAAN,IAA2B,CAA3B,GAA+BA,eAAe,CAAf,CAA9C;AACAmD,eAAKxC,IAAL;AACD;AAVyC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAW3C;;;kEAE6CqC,S,EAAW;AACvD,UAAMM,SAASpE,mBAAmB,KAAKmB,KAAxB,CAAf;AACA2C,gBAAUO,SAAV,GAAsB,CAACD,MAAvB;;AAEA,UAAI,CAACA,MAAL,EAAa;AACXN,kBAAUE,KAAV,GAAkB,IAAIL,YAAJ,CAAiB,CAAjB,CAAlB;AACA;AACD;;AAPsD,oBASF,KAAKxC,KATH;AAAA,UAShD4C,IATgD,WAShDA,IATgD;AAAA,UAS1CrD,iBAT0C,WAS1CA,iBAT0C;AAAA,UASvBG,iBATuB,WASvBA,iBATuB;AAAA,UAUhDmD,KAVgD,GAUjCF,SAViC,CAUhDE,KAVgD;AAAA,UAUzCvC,IAVyC,GAUjCqC,SAViC,CAUzCrC,IAVyC;AAWvD,UAAIwC,IAAI,CAAR;AAXuD;AAAA;AAAA;;AAAA;AAYvD,8BAAqBF,IAArB,mIAA2B;AAAA,cAAhBG,MAAgB;AACzB,cAAMtD,iBAAiBF,kBAAkBwD,MAAlB,CAAvB;AACA,cAAMpD,iBAAiBD,kBAAkBqD,MAAlB,CAAvB;AACAF,gBAAMC,IAAI,CAAV,IAAelE,YAAYa,eAAe,CAAf,CAAZ,CAAf;AACAoD,gBAAMC,IAAI,CAAV,IAAelE,YAAYa,eAAe,CAAf,CAAZ,CAAf;AACAoD,gBAAMC,IAAI,CAAV,IAAelE,YAAYe,eAAe,CAAf,CAAZ,CAAf;AACAkD,gBAAMC,IAAI,CAAV,IAAelE,YAAYe,eAAe,CAAf,CAAZ,CAAf;AACAmD,eAAKxC,IAAL;AACD;AApBsD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqBxD;;;4CAEuBqC,S,EAAW;AAAA,oBACR,KAAK3C,KADG;AAAA,UAC1B4C,IAD0B,WAC1BA,IAD0B;AAAA,UACpBhD,QADoB,WACpBA,QADoB;AAAA,UAE1BiD,KAF0B,GAEXF,SAFW,CAE1BE,KAF0B;AAAA,UAEnBvC,IAFmB,GAEXqC,SAFW,CAEnBrC,IAFmB;AAGjC,UAAIwC,IAAI,CAAR;AAHiC;AAAA;AAAA;;AAAA;AAIjC,8BAAqBF,IAArB,mIAA2B;AAAA,cAAhBG,MAAgB;AACzB,cAAMlD,QAAQD,SAASmD,MAAT,CAAd;AACAF,gBAAMC,IAAI,CAAV,IAAejD,MAAM,CAAN,CAAf;AACAgD,gBAAMC,IAAI,CAAV,IAAejD,MAAM,CAAN,CAAf;AACAgD,gBAAMC,IAAI,CAAV,IAAejD,MAAM,CAAN,CAAf;AACAgD,gBAAMC,IAAI,CAAV,IAAeE,MAAMnD,MAAM,CAAN,CAAN,IAAkB,GAAlB,GAAwBA,MAAM,CAAN,CAAvC;AACAiD,eAAKxC,IAAL;AACD;AAXgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYlC;;;;EArJoC5B,K;;SAAlBoB,S;AAwJrBA,UAAUqD,SAAV,GAAsB,WAAtB;AACArD,UAAUV,YAAV,GAAyBA,YAAzB","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, experimental} from '../../core';\nconst {fp64LowPart, enable64bitSupport} = experimental;\nimport {GL, Model, Geometry} from 'luma.gl';\n\nimport vs from './line-layer-vertex.glsl';\nimport fs from './line-layer-fragment.glsl';\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n\nconst defaultProps = {\n  strokeWidth: 1,\n  fp64: false,\n\n  getSourcePosition: x => x.sourcePosition,\n  getTargetPosition: x => x.targetPosition,\n  getColor: x => x.color || DEFAULT_COLOR\n};\n\nexport default class LineLayer extends Layer {\n  getShaders() {\n    const projectModule = enable64bitSupport(this.props) ? 'project64' : 'project32';\n    return {vs, fs, modules: [projectModule, 'picking']};\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      instanceSourcePositions: {\n        size: 3,\n        transition: true,\n        accessor: 'getSourcePosition',\n        update: this.calculateInstanceSourcePositions\n      },\n      instanceTargetPositions: {\n        size: 3,\n        transition: true,\n        accessor: 'getTargetPosition',\n        update: this.calculateInstanceTargetPositions\n      },\n      instanceSourceTargetPositions64xyLow: {\n        size: 4,\n        accessor: ['getSourcePosition', 'getTargetPosition'],\n        update: this.calculateInstanceSourceTargetPositions64xyLow\n      },\n      instanceColors: {\n        size: 4,\n        type: GL.UNSIGNED_BYTE,\n        transition: true,\n        accessor: 'getColor',\n        update: this.calculateInstanceColors\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n\n    if (props.fp64 !== oldProps.fp64) {\n      const {gl} = this.context;\n      if (this.state.model) {\n        this.state.model.delete();\n      }\n      this.setState({model: this._getModel(gl)});\n      this.state.attributeManager.invalidateAll();\n    }\n  }\n\n  draw({uniforms}) {\n    const {strokeWidth} = this.props;\n\n    this.state.model.render(\n      Object.assign({}, uniforms, {\n        strokeWidth\n      })\n    );\n  }\n\n  _getModel(gl) {\n    /*\n     *  (0, -1)-------------_(1, -1)\n     *       |          _,-\"  |\n     *       o      _,-\"      o\n     *       |  _,-\"          |\n     *   (0, 1)\"-------------(1, 1)\n     */\n    const positions = [0, -1, 0, 0, 1, 0, 1, -1, 0, 1, 1, 0];\n\n    return new Model(\n      gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: GL.TRIANGLE_STRIP,\n          attributes: {\n            positions: new Float32Array(positions)\n          }\n        }),\n        isInstanced: true,\n        shaderCache: this.context.shaderCache\n      })\n    );\n  }\n\n  calculateInstanceSourcePositions(attribute) {\n    const {data, getSourcePosition} = this.props;\n    const {value, size} = attribute;\n    let i = 0;\n    for (const object of data) {\n      const sourcePosition = getSourcePosition(object);\n      value[i + 0] = sourcePosition[0];\n      value[i + 1] = sourcePosition[1];\n      value[i + 2] = isNaN(sourcePosition[2]) ? 0 : sourcePosition[2];\n      i += size;\n    }\n  }\n\n  calculateInstanceTargetPositions(attribute) {\n    const {data, getTargetPosition} = this.props;\n    const {value, size} = attribute;\n    let i = 0;\n    for (const object of data) {\n      const targetPosition = getTargetPosition(object);\n      value[i + 0] = targetPosition[0];\n      value[i + 1] = targetPosition[1];\n      value[i + 2] = isNaN(targetPosition[2]) ? 0 : targetPosition[2];\n      i += size;\n    }\n  }\n\n  calculateInstanceSourceTargetPositions64xyLow(attribute) {\n    const isFP64 = enable64bitSupport(this.props);\n    attribute.isGeneric = !isFP64;\n\n    if (!isFP64) {\n      attribute.value = new Float32Array(4);\n      return;\n    }\n\n    const {data, getSourcePosition, getTargetPosition} = this.props;\n    const {value, size} = attribute;\n    let i = 0;\n    for (const object of data) {\n      const sourcePosition = getSourcePosition(object);\n      const targetPosition = getTargetPosition(object);\n      value[i + 0] = fp64LowPart(sourcePosition[0]);\n      value[i + 1] = fp64LowPart(sourcePosition[1]);\n      value[i + 2] = fp64LowPart(targetPosition[0]);\n      value[i + 3] = fp64LowPart(targetPosition[1]);\n      i += size;\n    }\n  }\n\n  calculateInstanceColors(attribute) {\n    const {data, getColor} = this.props;\n    const {value, size} = attribute;\n    let i = 0;\n    for (const object of data) {\n      const color = getColor(object);\n      value[i + 0] = color[0];\n      value[i + 1] = color[1];\n      value[i + 2] = color[2];\n      value[i + 3] = isNaN(color[3]) ? 255 : color[3];\n      i += size;\n    }\n  }\n}\n\nLineLayer.layerName = 'LineLayer';\nLineLayer.defaultProps = defaultProps;\n"],"file":"line-layer.js"}