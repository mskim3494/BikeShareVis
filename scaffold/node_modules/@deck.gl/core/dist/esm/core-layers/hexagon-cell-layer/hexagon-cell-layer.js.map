{"version":3,"sources":["../../../../src/core-layers/hexagon-cell-layer/hexagon-cell-layer.js"],"names":["Layer","experimental","log","fp64LowPart","enable64bitSupport","GL","Model","CylinderGeometry","vs","fs","DEFAULT_COLOR","defaultProps","hexagonVertices","radius","angle","coverage","type","min","max","value","elevationScale","extruded","fp64","getCentroid","x","centroid","getColor","color","getElevation","elevation","lightSettings","HexagonCellLayer","props","missingProps","Number","isFinite","once","Array","isArray","length","projectModule","modules","attributeManager","getAttributeManager","addInstanced","instancePositions","size","transition","accessor","update","calculateInstancePositions","instancePositions64xyLow","calculateInstancePositions64xyLow","instanceColors","UNSIGNED_BYTE","calculateInstanceColors","oldProps","changeFlags","gl","context","state","model","delete","setState","_getModel","invalidateAll","updateRadiusAngle","vertices","vertex0","vertex3","viewport","getDistanceScales","pixelsPerMeter","spaceCoord0","projectFlat","spaceCoord3","dx","dy","dxy","Math","sqrt","acos","sign","PI","topRadius","bottomRadius","topCap","bottomCap","height","nradial","nvertical","Object","assign","getShaders","id","geometry","getCylinderGeometry","isInstanced","shaderCache","uniforms","render","attribute","data","i","object","lon","lat","isFP64","isGeneric","Float32Array","position","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, experimental} from '../../core';\nconst {log, fp64LowPart, enable64bitSupport} = experimental;\nimport {GL, Model, CylinderGeometry} from 'luma.gl';\n\nimport vs from './hexagon-cell-layer-vertex.glsl';\nimport fs from './hexagon-cell-layer-fragment.glsl';\n\nconst DEFAULT_COLOR = [255, 0, 255, 255];\n\nconst defaultProps = {\n  hexagonVertices: null,\n  radius: null,\n  angle: null,\n  coverage: {type: 'number', min: 0, max: 1, value: 1},\n  elevationScale: {type: 'number', min: 0, value: 1},\n  extruded: true,\n  fp64: false,\n\n  getCentroid: x => x.centroid,\n  getColor: x => x.color,\n  getElevation: x => x.elevation,\n\n  lightSettings: {}\n};\n\nexport default class HexagonCellLayer extends Layer {\n  constructor(props) {\n    let missingProps = false;\n    if (!props.hexagonVertices && (!props.radius || !Number.isFinite(props.angle))) {\n      log.once(\n        0,\n        'HexagonCellLayer: Either hexagonVertices or radius and angle are ' +\n          'needed to calculate primitive hexagon.'\n      )();\n      missingProps = true;\n    } else if (\n      props.hexagonVertices &&\n      (!Array.isArray(props.hexagonVertices) || props.hexagonVertices.length < 6)\n    ) {\n      log.once(0, 'HexagonCellLayer: hexagonVertices needs to be an array of 6 points')();\n\n      missingProps = true;\n    }\n\n    if (missingProps) {\n      log.once(0, 'Now using 1000 meter as default radius, 0 as default angle')();\n      props.radius = 1000;\n      props.angle = 0;\n    }\n\n    super(props);\n  }\n\n  getShaders() {\n    const projectModule = enable64bitSupport(this.props) ? 'project64' : 'project32';\n    return {vs, fs, modules: [projectModule, 'lighting', 'picking']};\n  }\n\n  /**\n   * DeckGL calls initializeState when GL context is available\n   * Essentially a deferred constructor\n   */\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      instancePositions: {\n        size: 3,\n        transition: true,\n        accessor: ['getCentroid', 'getElevation'],\n        update: this.calculateInstancePositions\n      },\n      instancePositions64xyLow: {\n        size: 2,\n        accessor: 'getCentroid',\n        update: this.calculateInstancePositions64xyLow\n      },\n      instanceColors: {\n        size: 4,\n        type: GL.UNSIGNED_BYTE,\n        transition: true,\n        accessor: 'getColor',\n        update: this.calculateInstanceColors\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n    if (props.fp64 !== oldProps.fp64) {\n      const {gl} = this.context;\n      if (this.state.model) {\n        this.state.model.delete();\n      }\n      this.setState({model: this._getModel(gl)});\n      this.state.attributeManager.invalidateAll();\n    }\n\n    if (\n      props.hexagonVertices !== oldProps.hexagonVertices ||\n      props.radius !== oldProps.radius ||\n      props.angle !== oldProps.angle\n    ) {\n      this.updateRadiusAngle();\n    }\n  }\n\n  updateRadiusAngle() {\n    let {angle, radius} = this.props;\n    const {hexagonVertices} = this.props;\n\n    if (Array.isArray(hexagonVertices) && hexagonVertices.length >= 6) {\n      // calculate angle and vertices from hexagonVertices if provided\n      const vertices = this.props.hexagonVertices;\n\n      const vertex0 = vertices[0];\n      const vertex3 = vertices[3];\n\n      // transform to space coordinates\n      const {viewport} = this.context;\n      const {pixelsPerMeter} = viewport.getDistanceScales();\n      const spaceCoord0 = this.projectFlat(vertex0);\n      const spaceCoord3 = this.projectFlat(vertex3);\n\n      // distance between two close centroids\n      const dx = spaceCoord0[0] - spaceCoord3[0];\n      const dy = spaceCoord0[1] - spaceCoord3[1];\n      const dxy = Math.sqrt(dx * dx + dy * dy);\n\n      // Calculate angle that the perpendicular hexagon vertex axis is tilted\n      angle = Math.acos(dx / dxy) * -Math.sign(dy) + Math.PI / 2;\n      radius = dxy / 2 / pixelsPerMeter[0];\n    }\n\n    this.setState({angle, radius});\n  }\n\n  getCylinderGeometry(radius) {\n    return new CylinderGeometry({\n      radius,\n      topRadius: radius,\n      bottomRadius: radius,\n      topCap: true,\n      bottomCap: true,\n      height: 1,\n      nradial: 6,\n      nvertical: 1\n    });\n  }\n\n  _getModel(gl) {\n    return new Model(\n      gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: this.getCylinderGeometry(1),\n        isInstanced: true,\n        shaderCache: this.context.shaderCache\n      })\n    );\n  }\n\n  draw({uniforms}) {\n    const {elevationScale, extruded, coverage} = this.props;\n    const {radius, angle} = this.state;\n\n    this.state.model.render(\n      Object.assign({}, uniforms, {\n        radius,\n        angle,\n        extruded,\n        coverage,\n        elevationScale\n      })\n    );\n  }\n\n  calculateInstancePositions(attribute) {\n    const {data, getCentroid, getElevation} = this.props;\n    const {value, size} = attribute;\n    let i = 0;\n    for (const object of data) {\n      const [lon, lat] = getCentroid(object);\n      const elevation = getElevation(object);\n      value[i + 0] = lon;\n      value[i + 1] = lat;\n      value[i + 2] = elevation || 0;\n      i += size;\n    }\n  }\n\n  calculateInstancePositions64xyLow(attribute) {\n    const isFP64 = enable64bitSupport(this.props);\n    attribute.isGeneric = !isFP64;\n\n    if (!isFP64) {\n      attribute.value = new Float32Array(2);\n      return;\n    }\n\n    const {data, getCentroid} = this.props;\n    const {value} = attribute;\n    let i = 0;\n    for (const object of data) {\n      const position = getCentroid(object);\n      value[i++] = fp64LowPart(position[0]);\n      value[i++] = fp64LowPart(position[1]);\n    }\n  }\n\n  calculateInstanceColors(attribute) {\n    const {data, getColor} = this.props;\n    const {value, size} = attribute;\n    let i = 0;\n    for (const object of data) {\n      const color = getColor(object) || DEFAULT_COLOR;\n\n      value[i + 0] = color[0];\n      value[i + 1] = color[1];\n      value[i + 2] = color[2];\n      value[i + 3] = Number.isFinite(color[3]) ? color[3] : DEFAULT_COLOR[3];\n      i += size;\n    }\n  }\n}\n\nHexagonCellLayer.layerName = 'HexagonCellLayer';\nHexagonCellLayer.defaultProps = defaultProps;\n"],"file":"hexagon-cell-layer.js"}