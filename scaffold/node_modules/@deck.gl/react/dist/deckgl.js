"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _autobind = _interopRequireDefault(require("./utils/autobind"));

var _inheritsFrom = require("./utils/inherits-from");

var _core = require("@deck.gl/core");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _instanceof(left, right) { if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) { return right[Symbol.hasInstance](left); } else { return left instanceof right; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!_instanceof(instance, Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

var log = _core.experimental.log;
var propTypes = Object.assign({}, _core.Deck.getPropTypes(_propTypes.default), {
  viewports: _propTypes.default.array,
  // Deprecated
  viewport: _propTypes.default.object // Deprecated

});
var defaultProps = _core.Deck.defaultProps;

var DeckGL =
/*#__PURE__*/
function (_React$Component) {
  _inherits(DeckGL, _React$Component);

  function DeckGL(props) {
    var _this;

    _classCallCheck(this, DeckGL);

    _this = _possibleConstructorReturn(this, (DeckGL.__proto__ || Object.getPrototypeOf(DeckGL)).call(this, props));
    _this.state = {};
    _this.children = [];
    (0, _autobind.default)(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(DeckGL, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      this.deck = new _core.Deck(Object.assign({}, this.props, {
        canvas: this.deckCanvas,
        onResize: function onResize(size) {
          return _this2.forceUpdate();
        }
      }));

      this._updateFromProps(this.props);
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      this._updateFromProps(nextProps);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.deck.finalize();
    } // Public API

  }, {
    key: "pickObject",
    value: function pickObject(_ref) {
      var x = _ref.x,
          y = _ref.y,
          _ref$radius = _ref.radius,
          radius = _ref$radius === void 0 ? 0 : _ref$radius,
          _ref$layerIds = _ref.layerIds,
          layerIds = _ref$layerIds === void 0 ? null : _ref$layerIds;
      return this.deck.pickObject({
        x: x,
        y: y,
        radius: radius,
        layerIds: layerIds
      });
    }
  }, {
    key: "pickObjects",
    value: function pickObjects(_ref2) {
      var x = _ref2.x,
          y = _ref2.y,
          _ref2$width = _ref2.width,
          width = _ref2$width === void 0 ? 1 : _ref2$width,
          _ref2$height = _ref2.height,
          height = _ref2$height === void 0 ? 1 : _ref2$height,
          _ref2$layerIds = _ref2.layerIds,
          layerIds = _ref2$layerIds === void 0 ? null : _ref2$layerIds;
      return this.deck.pickObjects({
        x: x,
        y: y,
        width: width,
        height: height,
        layerIds: layerIds
      });
    }
  }, {
    key: "queryObject",
    value: function queryObject(opts) {
      log.deprecated('queryObject', 'pickObject')();
      return this.deck.pickObject(opts);
    }
  }, {
    key: "queryVisibleObjects",
    value: function queryVisibleObjects(opts) {
      log.deprecated('queryVisibleObjects', 'pickObjects')();
      return this.pickObjects(opts);
    } // Private Helpers
    // 1. Extract any JSX layers from the react children
    // 2. Handle any backwards compatiblity props for React layer
    // Needs to be called both from initial mount, and when new props arrive

  }, {
    key: "_updateFromProps",
    value: function _updateFromProps(nextProps) {
      // Support old "geospatial view state as separate props" style (React only!)
      var viewState = nextProps.viewState;

      if (!viewState) {
        var latitude = nextProps.latitude,
            longitude = nextProps.longitude,
            zoom = nextProps.zoom,
            pitch = nextProps.pitch,
            bearing = nextProps.bearing;
        viewState = nextProps.viewState || {
          latitude: latitude,
          longitude: longitude,
          zoom: zoom,
          pitch: pitch,
          bearing: bearing
        };
      } // Support old `viewports` prop (React only!)


      var views = nextProps.views || nextProps.viewports || nextProps.viewport && [nextProps.viewport];

      if (nextProps.viewports) {
        log.deprecated('DeckGL.viewports', 'DeckGL.views')();
      }

      if (nextProps.viewport) {
        log.deprecated('DeckGL.viewport', 'DeckGL.views')();
      } // extract any deck.gl layers masquerading as react elements from props.children


      var _extractJSXLayers2 = this._extractJSXLayers(nextProps.children),
          layers = _extractJSXLayers2.layers,
          children = _extractJSXLayers2.children;

      if (this.deck) {
        this.deck.setProps(Object.assign({}, nextProps, {
          views: views,
          viewState: viewState,
          // Avoid modifying layers array if no JSX layers were found
          layers: layers ? _toConsumableArray(layers).concat(_toConsumableArray(nextProps.layers)) : nextProps.layers
        }));
      }

      this.children = children;
    } // extracts any deck.gl layers masquerading as react elements from props.children

  }, {
    key: "_extractJSXLayers",
    value: function _extractJSXLayers(children) {
      var reactChildren = []; // extract real react elements (i.e. not deck.gl layers)

      var layers = null; // extracted layer from react children, will add to deck.gl layer array

      _react.default.Children.forEach(children, function (reactElement) {
        if (reactElement) {
          // For some reason Children.forEach doesn't filter out `null`s
          var LayerType = reactElement.type;

          if ((0, _inheritsFrom.inheritsFrom)(LayerType, _core.Layer)) {
            var layer = new LayerType(reactElement.props);
            layers = layers || [];
            layers.push(layer);
          } else {
            reactChildren.push(reactElement);
          }
        }
      });

      return {
        layers: layers,
        children: reactChildren
      };
    } // Iterate over views and reposition children associated with views
    // TODO - Can we supply a similar function for the non-React case?

  }, {
    key: "_renderChildrenUnderViews",
    value: function _renderChildrenUnderViews(children) {
      var _this3 = this;

      // Flatten out nested views array
      var views = this.deck ? this.deck.getViewports() : []; // Build a view id to view index

      var viewMap = {};
      views.forEach(function (view) {
        if (view.id) {
          viewMap[view.id] = view;
        }
      });
      return children.map( // If child specifies props.viewId, position under view, otherwise render as normal
      function (child, i) {
        return child.props.viewId || child.props.viewId ? _this3._positionChild({
          child: child,
          viewMap: viewMap,
          i: i
        }) : child;
      });
    }
  }, {
    key: "_positionChild",
    value: function _positionChild(_ref3) {
      var child = _ref3.child,
          viewMap = _ref3.viewMap,
          i = _ref3.i;
      var _child$props = child.props,
          viewId = _child$props.viewId,
          viewportId = _child$props.viewportId;

      if (viewportId) {
        log.deprecated('viewportId', 'viewId')();
      }

      var view = viewMap[viewId || viewportId]; // Drop (auto-hide) elements with viewId that are not matched by any current view

      if (!view) {
        return null;
      } // Resolve potentially relative dimensions using the deck.gl container size


      var x = view.x,
          y = view.y,
          width = view.width,
          height = view.height; // Clone the element with width and height set per view

      var newProps = Object.assign({}, child.props, {
        width: width,
        height: height
      }); // Inject map properties
      // TODO - this is too react-map-gl specific

      Object.assign(newProps, view.getMercatorParams(), {
        visible: view.isMapSynched()
      });
      var clone = (0, _react.cloneElement)(child, newProps); // Wrap it in an absolutely positioning div

      var style = {
        position: 'absolute',
        left: x,
        top: y,
        width: width,
        height: height
      };
      var key = "view-child-".concat(viewId, "-").concat(i);
      return (0, _react.createElement)('div', {
        key: key,
        id: key,
        style: style
      }, clone);
    }
  }, {
    key: "render",
    value: function render() {
      var _this4 = this;

      // Render the background elements (typically react-map-gl instances)
      // using the view descriptors
      var children = this._renderChildrenUnderViews(this.children); // Note that width and height are handled by deck.gl


      var id = this.props.id; // TODO - this styling is enforced for correct positioning with children
      // It can override the styling set by `Deck`, this should be consolidated.

      var style = Object.assign({}, {
        position: 'absolute',
        left: 0,
        top: 0
      }, this.props.style);
      var canvas = (0, _react.createElement)('canvas', {
        ref: function ref(c) {
          return _this4.deckCanvas = c;
        },
        key: 'deck-canvas',
        id: id,
        style: style
      }); // Render deck.gl as last child

      children.push(canvas);
      return (0, _react.createElement)('div', {
        id: 'deckgl-wrapper'
      }, children);
    }
  }]);

  return DeckGL;
}(_react.default.Component);

exports.default = DeckGL;
DeckGL.propTypes = propTypes;
DeckGL.defaultProps = defaultProps;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,